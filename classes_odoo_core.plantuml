@startuml classes_odoo_core
set namespaceSeparator none
class "APIKeyDescription" as odoo_src.odoo.addons.base.models.res_users.APIKeyDescription {
  duration
  expiration_date
  name
  check_access_make_key()
  create(vals_list)
  make_key()
}
class "APIKeyShow" as odoo_src.odoo.addons.base.models.res_users.APIKeyShow {
  id
  key
}
class "APIKeys" as odoo_src.odoo.addons.base.models.res_users.APIKeys {
  create_date
  expiration_date
  name
  scope
  user_id
  init()
  remove()
}
class "APIKeysUser" as odoo_src.odoo.addons.base.models.res_users.APIKeysUser {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  api_key_ids
  api_key_wizard()
}
class "APSCommon" as odoo_src.odoo.addons.payment_aps.tests.common.APSCommon {
  setUpClass()
}
class "APSController" as odoo_src.odoo.addons.payment_aps.controllers.main.APSController {
  aps_return_from_checkout()
  aps_webhook()
}
class "AcRoleType" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.res_partner.AcRoleType {
  code
  name
}
class "AccountAccount" as odoo_src.odoo.addons.l10n_de.models.account_account.AccountAccount {
  write(vals)
}
class "AccountAccount" as odoo_src.odoo.addons.l10n_mx.models.account_account.AccountAccount {
  create(vals_list)
}
class "AccountAccount" as odoo_src.odoo.addons.l10n_dk.models.account_account.AccountAccount {
}
class "AccountAccount" as odoo_src.odoo.addons.l10n_pt.models.account_account.AccountAccount {
  l10n_pt_taxonomy_code
}
class "AccountAccount" as odoo_src.odoo.addons.l10n_in_withholding.models.account_account.AccountAccount {
  l10n_in_tds_tcs_section_id
}
class "AccountAccount" as odoo_src.odoo.addons.account.models.account_account.AccountAccount {
  account_type
  allowed_journal_ids
  code
  code_mapping_ids
  code_store
  company_currency_id
  company_fiscal_country_code
  company_ids
  currency_id
  current_balance
  deprecated
  display_mapping_tab
  group_id
  include_initial_balance
  internal_group
  name
  non_trade
  note
  opening_balance
  opening_credit
  opening_debit
  placeholder_code
  reconcile
  related_taxes_amount
  root_id
  tag_ids
  tax_ids
  used
  action_open_related_taxes()
  action_unmerge()
  copy_data(default)
  copy_translations(new, excluded)
  create(vals_list)
  default_get(default_fields)
  get_import_templates()
  name_create(name)
  name_search(name, args, operator, limit) -> list[tuple[int, str]]
  write(vals)
}
class "AccountAccountTag" as odoo_src.odoo.addons.account.models.account_account_tag.AccountAccountTag {
  active
  applicability
  color
  country_id
  name
  tax_negate
  create(vals_list)
}
class "AccountAnalyticAccount" as odoo_src.odoo.addons.mrp_account.models.analytic_account.AccountAnalyticAccount {
  bom_count
  bom_ids
  production_count
  production_ids
  workcenter_ids
  workorder_count
  action_view_mrp_bom()
  action_view_mrp_production()
  action_view_workorder()
}
class "AccountAnalyticAccount" as odoo_src.odoo.addons.hr_expense.models.analytic.AccountAnalyticAccount {
}
class "AccountAnalyticAccount" as odoo_src.odoo.addons.account.models.account_analytic_account.AccountAnalyticAccount {
  credit
  debit
  invoice_count
  vendor_bill_count
  action_view_invoice()
  action_view_vendor_bill()
}
class "AccountAnalyticAccount" as odoo_src.odoo.addons.analytic.models.analytic_account.AccountAnalyticAccount {
  active
  balance
  code
  color
  company_id
  credit
  currency_id
  debit
  line_ids
  name
  partner_id
  plan_id
  root_plan_id
  copy_data(default)
  web_read(specification: dict[str, dict]) -> list[dict]
  write(vals)
}
class "AccountAnalyticApplicability" as odoo_src.odoo.addons.mrp_account.models.analytic_account.AccountAnalyticApplicability {
  business_domain
}
class "AccountAnalyticApplicability" as odoo_src.odoo.addons.hr_timesheet.models.analytic_applicability.AccountAnalyticApplicability {
  business_domain
}
class "AccountAnalyticApplicability" as odoo_src.odoo.addons.hr_expense.models.analytic.AccountAnalyticApplicability {
  business_domain
}
class "AccountAnalyticApplicability" as odoo_src.odoo.addons.account.models.account_analytic_plan.AccountAnalyticApplicability {
  account_prefix
  account_prefix_placeholder
  business_domain
  display_account_prefix
  product_categ_id
}
class "AccountAnalyticApplicability" as odoo_src.odoo.addons.analytic.models.analytic_plan.AccountAnalyticApplicability {
  analytic_plan_id
  applicability
  business_domain
  company_id
}
class "AccountAnalyticDistributionModel" as odoo_src.odoo.addons.account.models.account_analytic_distribution_model.AccountAnalyticDistributionModel {
  account_prefix
  prefix_placeholder
  product_categ_id
  product_id
}
class "AccountAnalyticDistributionModel" as odoo_src.odoo.addons.analytic.models.analytic_distribution_model.AccountAnalyticDistributionModel {
  company_id
  partner_category_id
  partner_id
  sequence
  action_read_distribution_model()
}
class "AccountAnalyticLine" as odoo_src.odoo.addons.mrp_account.models.analytic_account.AccountAnalyticLine {
  category
}
class "AccountAnalyticLine" as odoo_src.odoo.addons.hr_timesheet.models.hr_timesheet.AccountAnalyticLine {
  department_id
  employee_id
  encoding_uom_id
  job_title
  manager_id
  message_partner_ids
  milestone_id
  parent_task_id
  partner_id
  project_id
  readonly_timesheet
  task_id
  user_id
  action_open_timesheet_view_portal()
  create(vals_list)
  default_get(field_list)
  get_views(views, options)
  write(values)
}
class "AccountAnalyticLine" as odoo_src.odoo.addons.account.models.account_analytic_line.AccountAnalyticLine {
  amount
  category
  code
  general_account_id
  journal_id
  move_line_id
  partner_id
  product_id
  product_uom_id
  ref
  create(vals)
  on_change_unit_amount()
  unlink()
  view_header_get(view_id, view_type)
  write(vals)
}
class "AccountAnalyticLine" as odoo_src.odoo.addons.analytic.models.analytic_line.AccountAnalyticLine {
  amount
  analytic_distribution
  analytic_precision
  category
  company_id
  currency_id
  date
  name
  partner_id
  product_uom_category_id
  product_uom_id
  unit_amount
  user_id
}
class "AccountAnalyticPlan" as odoo_src.odoo.addons.analytic.models.analytic_plan.AccountAnalyticPlan {
  account_count
  account_ids
  all_account_count
  applicability_ids
  children_count
  children_ids
  color
  complete_name
  default_applicability
  description
  name
  parent_id
  parent_path
  root_id
  sequence
  action_view_analytical_accounts()
  action_view_children_plans()
  get_relevant_plans()
  unlink()
  write(vals)
}
class "AccountBankStatement" as odoo_src.odoo.addons.account.models.account_bank_statement.AccountBankStatement {
  attachment_ids
  balance_end
  balance_end_real
  balance_start
  company_id
  currency_id
  date
  first_line_index
  is_complete
  is_valid
  journal_id
  line_ids
  name
  problem_description
  reference
  create(vals_list)
  default_get(fields_list)
  init()
  write(values)
}
class "AccountBankStatementLine" as odoo_src.odoo.addons.point_of_sale.models.account_bank_statement.AccountBankStatementLine {
  pos_session_id
}
class "AccountBankStatementLine" as odoo_src.odoo.addons.account.models.account_bank_statement_line.AccountBankStatementLine {
  account_number
  amount
  amount_currency
  amount_residual
  company_id
  country_code
  currency_id
  foreign_currency_id
  internal_index
  is_reconciled
  journal_id
  move_id
  partner_id
  partner_name
  payment_ids
  payment_ref
  running_balance
  sequence
  statement_balance_end_real
  statement_complete
  statement_id
  statement_name
  statement_valid
  transaction_details
  transaction_type
  action_undo_reconciliation()
  create(vals_list)
  default_get(fields_list)
  init()
  new(values, origin, ref)
  read_group(domain, fields, groupby, offset, limit, orderby, lazy)
  unlink()
  write(vals)
}
class "AccountCashRounding" as odoo_src.odoo.addons.point_of_sale.models.pos_order.AccountCashRounding {
}
class "AccountCashRounding" as odoo_src.odoo.addons.point_of_sale.models.account_cash_rounding.AccountCashRounding {
}
class "AccountCashRounding" as odoo_src.odoo.addons.account.models.account_cash_rounding.AccountCashRounding {
  loss_account_id
  name
  profit_account_id
  rounding
  rounding_method
  strategy
  compute_difference(currency, amount)
  round(amount)
  validate_rounding()
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bg.models.template_bg.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_kz.models.template_kz.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gq.models.template_gq.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gq.models.template_gq_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_nl.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_nl.models.template_nl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_hu.models.template_hu.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_hr.models.template_hr.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ne.models.template_ne.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ne.models.template_ne_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_hn.models.template_hn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_de.models.template_de_skr03.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_de.models.template_de_skr04.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_de.models.chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_mx.models.template_mx.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_at.models.template_at.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_br.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_br.models.template_br.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_dk.models.template_dk.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_kh.models.template_kh.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_kr.models.template_kr.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bo.models.template_bo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bh.models.template_bh.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ml.models.template_ml_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ml.models.template_ml.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gw.models.template_gw_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gw.models.template_gw.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bf.models.template_bf.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bf.models.template_bf_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_au.models.template_au.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar.models.template_ar_base.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar.models.template_ar_ri.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar.models.account_chart_template.AccountChartTemplate {
  try_loading(template_code, company, install_demo, force_create)
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar.models.template_ar_ex.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_my.models.template_my.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_za.models.template_za.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pt.models.template_pt.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_tz_account.models.template_tz.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_uk.models.template_uk.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ph.models.template_ph.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_sg.models.template_sg.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_uy.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_uy.models.template_uy.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_si.models.template_si.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_sn.models.template_sn_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_sn.models.template_sn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pa.models.template_pa.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ve.models.template_ve.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ec_stock.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_sa.models.template_sa.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_tr.models.template_tr.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_latam_invoice_document.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_fr_account.models.template_mc.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_fr_account.models.template_fr.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_tn.models.template_tn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_rw.models.template_rw.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_tg.models.template_tg.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_tg.models.template_tg_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_be_pos_restaurant.models.template_be.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_th.models.template_th.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar_withholding.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ar_withholding.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_lt.models.template_lt.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ie.models.template_ie.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_eg.models.template_eg.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_il.models.template_il.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cy.models.template_cy.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cl.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cl.models.template_cl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_fi.models.template_fi.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_id.models.template_id.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_lu.models.template_lu.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_iq.models.template_iq.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cd.models.template_cd_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cd.models.template_cd.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_jp.models.template_jp.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cm.models.template_cm.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cm.models.template_cm_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_et.models.template_et.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_assec.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_coop_pymes.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_canary_common.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_common.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_common_mainland.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_coop_full.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_canary_pymes.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_canary_assoc.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_pymes.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_canary_full.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es.models.template_es_full.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_hr_kuna.models.template_hr_kuna.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gn.models.template_gn_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gn.models.template_gn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ke.models.template_ke.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_it_edi_doi.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_do.models.template_do.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_nz.models.template_nz.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_zm_account.models.template_zm.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_dz.models.template_dz.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_in_withholding.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bd.models.template_bd.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gr.models.template_gr.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_no.models.template_no.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_syscohada.models.template_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_syscohada.models.template_syscohada.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ae.models.template_ae.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_kw.models.template_kw.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_mn.models.template_mn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bj.models.template_bj_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_bj.models.template_bj.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_mt.models.template_mt.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_km.models.template_km_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_km.models.template_km.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ga.models.template_ga.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ga.models.template_ga_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_mz.models.template_mz.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_hk.models.template_hk.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ng.models.template_ng.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ma.models.template_ma.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_be.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_be.models.template_be_comp.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_be.models.template_be.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_be.models.template_be_asso.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_gt.models.template_gt.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pl.models.template_pl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_lb_account.models.template_lb.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pk.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pk.models.template_pk.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pe.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_pe.models.template_pe.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ua.models.template_ua_psbo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_vn.models.template_vn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_sk.models.template_sk.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_se.models.template_se_K3.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_se.models.template_se.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_se.models.template_se_K2.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ug.models.template_ug.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_rs.models.template_rs.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_mu_account.models.template_mu.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_td.models.template_td.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_td.models.template_td_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_hu_edi.models.template_hu.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ro.models.template_ro.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_latam_check.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.account.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.account.models.template_generic_coa.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.account.models.chart_template.AccountChartTemplate {
  ref(xmlid, raise_if_not_found)
  try_loading(template_code, company, install_demo, force_create)
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_qa.models.template_qa.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_tw.models.template_tw.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_co.models.template_co.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ch.models.template_ch.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ca.models.template_ca.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_om.models.template_om.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_it.models.template_it.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cf.models.template_cf.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cf.models.template_cf_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ec.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ec.models.template_ec.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cz.models.template_cz.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cg.models.template_cg_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cg.models.template_cg.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_it_edi_withholding.models.account_chart_template.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ci.models.template_ci.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ci.models.template_ci_syscebnl.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cn.models.template_cn_common.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cn.models.template_cn_large_bis.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cn.models.template_cn.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_ee.models.template_ee.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_in.demo.account_demo.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_in.models.template_in.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_cr.models.template_cr.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_lv.models.template_lv.AccountChartTemplate {
}
class "AccountChartTemplate" as odoo_src.odoo.addons.l10n_jo.models.template_jo_standard.AccountChartTemplate {
}
class "AccountClosing" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.account_closing.AccountClosing {
  company_id
  cumulative_total
  currency_id
  date_closing_start
  date_closing_stop
  frequency
  last_order_hash
  last_order_id
  name
  sequence_number
  total_interval
  write(vals)
}
class "AccountCodeMapping" as odoo_src.odoo.addons.account.models.account_code_mapping.AccountCodeMapping {
  account_id
  code
  company_id
  create(vals_list)
}
class "AccountDebitNote" as odoo_src.odoo.addons.l10n_sa_edi.wizard.account_debit_note.AccountDebitNote {
  create_debit()
}
class "AccountDebitNote" as odoo_src.odoo.addons.l10n_latam_invoice_document.wizards.account_debit_note.AccountDebitNote {
  create_debit()
}
class "AccountDebitNote" as odoo_src.odoo.addons.l10n_hu_edi.wizard.account_move_debit.AccountDebitNote {
}
class "AccountDebitNote" as odoo_src.odoo.addons.account_debit_note.wizard.account_debit_note.AccountDebitNote {
  copy_lines
  country_code
  date
  journal_id
  journal_type
  move_ids
  move_type
  reason
  create_debit()
  default_get(fields)
}
class "AccountDocumentDownloadController" as odoo_src.odoo.addons.account.controllers.download_docs.AccountDocumentDownloadController {
  download_invoice_attachments(attachments)
  download_invoice_documents_filetype(invoices, filetype, allow_fallback)
}
class "AccountEdiCommon" as odoo_src.odoo.addons.account_edi_ubl_cii_tax_extension.models.account_edi_common.AccountEdiCommon {
}
class "AccountEdiCommon" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_common.AccountEdiCommon {
  format_float(amount, precision_digits)
}
class "AccountEdiDocument" as odoo_src.odoo.addons.l10n_sa_edi.models.account_edi_document.AccountEdiDocument {
}
class "AccountEdiDocument" as odoo_src.odoo.addons.account_edi.models.account_edi_document.AccountEdiDocument {
  attachment_id
  blocking_level
  edi_content
  edi_format_id
  edi_format_name
  error
  move_id
  name
  state
  action_export_xml()
}
class "AccountEdiFormat" as odoo_src.odoo.addons.l10n_in_edi.models.account_edi_format.AccountEdiFormat {
}
class "AccountEdiFormat" as odoo_src.odoo.addons.l10n_sa_edi.models.account_edi_format.AccountEdiFormat {
}
class "AccountEdiFormat" as odoo_src.odoo.addons.l10n_es_edi_sii.models.account_edi_format.AccountEdiFormat {
}
class "AccountEdiFormat" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.account_edi_format.AccountEdiFormat {
}
class "AccountEdiFormat" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.models.account_edi_format.AccountEdiFormat {
}
class "AccountEdiFormat" as odoo_src.odoo.addons.account_edi.models.account_edi_format.AccountEdiFormat {
  code
  name
  create(vals_list)
}
class "AccountEdiProxyClientUser" as odoo_src.odoo.addons.account_peppol.models.account_edi_proxy_user.AccountEdiProxyClientUser {
  peppol_verification_code
  proxy_type
}
class "AccountEdiProxyClientUser" as odoo_src.odoo.addons.l10n_my_edi.models.account_edi_proxy_user.AccountEdiProxyClientUser {
  proxy_type
}
class "AccountEdiProxyClientUser" as odoo_src.odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user.AccountEdiProxyClientUser {
  active
  company_id
  edi_identification
  edi_mode
  id_client
  private_key_id
  proxy_type
  refresh_token
}
class "AccountEdiProxyClientUser" as odoo_src.odoo.addons.l10n_it_edi.models.account_edi_proxy_user.AccountEdiProxyClientUser {
  proxy_type
}
class "<color:red>AccountEdiProxyError</color>" as odoo_src.odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user.AccountEdiProxyError {
  code
  message : bool
}
class "AccountEdiTestCommon" as odoo_src.odoo.addons.account_edi.tests.common.AccountEdiTestCommon {
  edi_format_ref : bool
  assert_generated_file_equal(invoice, expected_values, applied_xpath)
  create_edi_document(edi_format, state, move, move_type)
  edi_cron()
  mock_edi(_get_move_applicability_method, _needs_web_services_method, _check_move_configuration_method)
  setUpClass()
  setup_edi_format(edi_format_ref)
  with_custom_method(method_name, method_content)
}
class "AccountEdiXmlCII" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_cii_facturx.AccountEdiXmlCII {
}
class "AccountEdiXmlOIOUBL201" as odoo_src.odoo.addons.l10n_dk_oioubl.models.account_edi_xml_oioubl_201.AccountEdiXmlOIOUBL201 {
}
class "AccountEdiXmlUBL20" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_20.AccountEdiXmlUBL20 {
}
class "AccountEdiXmlUBL21" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_21.AccountEdiXmlUBL21 {
}
class "AccountEdiXmlUBL21JO" as odoo_src.odoo.addons.l10n_jo_edi.models.account_edi_xml_ubl_21_jo.AccountEdiXmlUBL21JO {
  approximate()
  format_float(amount, precision_digits)
}
class "AccountEdiXmlUBL21RS" as odoo_src.odoo.addons.l10n_rs_edi.models.account_edi_xml_ubl_21_rs.AccountEdiXmlUBL21RS {
}
class "AccountEdiXmlUBL21Zatca" as odoo_src.odoo.addons.l10n_sa_edi.models.account_edi_xml_ubl_21_zatca.AccountEdiXmlUBL21Zatca {
}
class "AccountEdiXmlUBL21Zatca" as odoo_src.odoo.addons.l10n_sa_edi_pos.models.account_edi_xml_ubl_21_zatca.AccountEdiXmlUBL21Zatca {
}
class "AccountEdiXmlUBLANZ" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_a_nz.AccountEdiXmlUBLANZ {
}
class "AccountEdiXmlUBLBIS3" as odoo_src.odoo.addons.l10n_fr_facturx_chorus_pro.models.account_edi_xml_ubl_bis3.AccountEdiXmlUBLBIS3 {
}
class "AccountEdiXmlUBLBIS3" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_bis3.AccountEdiXmlUBLBIS3 {
}
class "AccountEdiXmlUBLDE" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_xrechnung.AccountEdiXmlUBLDE {
}
class "AccountEdiXmlUBLEFFF" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_efff.AccountEdiXmlUBLEFFF {
}
class "AccountEdiXmlUBLMyInvoisMY" as odoo_src.odoo.addons.l10n_my_edi_pos.models.account_edi_xml_ubl_my.AccountEdiXmlUBLMyInvoisMY {
}
class "AccountEdiXmlUBLMyInvoisMY" as odoo_src.odoo.addons.l10n_my_edi.models.account_edi_xml_ubl_my.AccountEdiXmlUBLMyInvoisMY {
}
class "AccountEdiXmlUBLMyInvoisMY" as odoo_src.odoo.addons.l10n_my_edi_extended.models.account_edi_xml_ubl_my.AccountEdiXmlUBLMyInvoisMY {
}
class "AccountEdiXmlUBLNL" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_nlcius.AccountEdiXmlUBLNL {
}
class "AccountEdiXmlUBLPINTANZ" as odoo_src.odoo.addons.l10n_anz_ubl_pint.models.account_edi_xml_pint_anz.AccountEdiXmlUBLPINTANZ {
}
class "AccountEdiXmlUBLPINTJP" as odoo_src.odoo.addons.l10n_jp_ubl_pint.models.account_edi_xml_pint_jp.AccountEdiXmlUBLPINTJP {
}
class "AccountEdiXmlUBLPINTMY" as odoo_src.odoo.addons.l10n_my_ubl_pint.models.account_edi_xml_pint_my.AccountEdiXmlUBLPINTMY {
}
class "AccountEdiXmlUBLPINTSG" as odoo_src.odoo.addons.l10n_sg_ubl_pint.models.account_edi_xml_pint_sg.AccountEdiXmlUBLPINTSG {
}
class "AccountEdiXmlUBLRO" as odoo_src.odoo.addons.l10n_ro_edi.models.account_edi_xml_ubl_ciusro.AccountEdiXmlUBLRO {
}
class "AccountEdiXmlUBLSG" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_sg.AccountEdiXmlUBLSG {
}
class "AccountEdiXmlUblTr" as odoo_src.odoo.addons.l10n_tr_nilvera_einvoice.models.account_edi_xml_ubl_tr.AccountEdiXmlUblTr {
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.l10n_gr_edi.models.account_fiscal_position.AccountFiscalPosition {
  l10n_gr_edi_preferred_classification_ids
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.l10n_br.models.account_fiscal_position.AccountFiscalPosition {
  l10n_br_fp_type
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.l10n_ar.models.account_fiscal_position.AccountFiscalPosition {
  l10n_ar_afip_responsibility_type_ids
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.account_fiscal_position.AccountFiscalPosition {
  write(vals)
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.base_vat.models.account_fiscal_position.AccountFiscalPosition {
  adjust_vals_country_id(vals)
  create(vals_list)
  raise_vat_error_message(country)
  write(vals)
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.l10n_it_edi_doi.models.account_fiscal_position.AccountFiscalPosition {
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.point_of_sale.models.account_fiscal_position.AccountFiscalPosition {
}
class "AccountFiscalPosition" as odoo_src.odoo.addons.account.models.partner.AccountFiscalPosition {
  account_ids
  account_map
  active
  auto_apply
  company_country_id
  company_id
  country_group_id
  country_id
  fiscal_country_codes
  foreign_vat
  foreign_vat_header_mode
  name
  note
  sequence
  state_ids
  states_count
  tax_ids
  tax_map
  vat_required
  zip_from
  zip_to
  action_create_foreign_taxes()
  create(vals_list)
  map_account(account)
  map_tax(taxes)
  write(vals)
}
class "AccountFiscalPositionAccount" as odoo_src.odoo.addons.account.models.partner.AccountFiscalPositionAccount {
  account_dest_id
  account_src_id
  company_id
  position_id
}
class "AccountFiscalPositionTax" as odoo_src.odoo.addons.point_of_sale.models.account_fiscal_position_tax.AccountFiscalPositionTax {
}
class "AccountFiscalPositionTax" as odoo_src.odoo.addons.account.models.partner.AccountFiscalPositionTax {
  company_id
  position_id
  tax_dest_active
  tax_dest_id
  tax_src_id
}
class "AccountFullReconcile" as odoo_src.odoo.addons.account.models.account_full_reconcile.AccountFullReconcile {
  exchange_move_id
  partial_reconcile_ids
  reconciled_line_ids
  create(vals_list)
  unlink()
}
class "AccountGroup" as odoo_src.odoo.addons.account.models.account_account.AccountGroup {
  code_prefix_end
  code_prefix_start
  company_id
  name
  parent_id
  create(vals_list)
  unlink()
  write(vals)
}
class "AccountIncoterms" as odoo_src.odoo.addons.account.models.account_incoterms.AccountIncoterms {
  active
  code
  name
}
class "AccountInvoiceFinnish" as odoo_src.odoo.addons.l10n_fi.models.account_move.AccountInvoiceFinnish {
  compute_payment_reference_finnish(number)
  compute_payment_reference_finnish_rf(number)
  get_finnish_check_digit(base_number)
  get_rf_check_digits(base_number)
  number2numeric(number)
}
class "AccountInvoiceReport" as odoo_src.odoo.addons.l10n_ar.report.invoice_report.AccountInvoiceReport {
  date
  l10n_ar_state_id
}
class "AccountInvoiceReport" as odoo_src.odoo.addons.l10n_latam_invoice_document.report.invoice_report.AccountInvoiceReport {
  l10n_latam_document_type_id
}
class "AccountInvoiceReport" as odoo_src.odoo.addons.account.report.account_invoice_report.AccountInvoiceReport {
  account_id
  commercial_partner_id
  company_currency_id
  company_id
  country_id
  currency_id
  fiscal_position_id
  inventory_value
  invoice_date
  invoice_date_due
  invoice_user_id
  journal_id
  move_id
  move_type
  partner_id
  payment_state
  price_average
  price_margin
  price_subtotal
  price_subtotal_currency
  price_total
  product_categ_id
  product_id
  product_uom_id
  quantity
  state
  read_group(domain, fields, groupby, offset, limit, orderby, lazy)
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_nl.models.account_journal.AccountJournal {
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_de.models.account_journal.AccountJournal {
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_sa_edi.models.account_journal.AccountJournal {
  l10n_sa_chain_sequence_id
  l10n_sa_compliance_checks_passed
  l10n_sa_compliance_csid_certificate_id
  l10n_sa_compliance_csid_json
  l10n_sa_csr
  l10n_sa_csr_errors
  l10n_sa_latest_submission_hash
  l10n_sa_production_csid_certificate_id
  l10n_sa_production_csid_json
  l10n_sa_production_csid_validity
  l10n_sa_serial_number
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_at.models.account_journal.AccountJournal {
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_br.models.account_journal.AccountJournal {
  l10n_br_invoice_serial
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_dk.models.account_journal.AccountJournal {
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_ar.models.account_journal.AccountJournal {
  code
  company_partner
  l10n_ar_afip_pos_number
  l10n_ar_afip_pos_partner_id
  l10n_ar_afip_pos_system
  l10n_ar_is_pos
  write(vals)
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_si.models.account_journal.AccountJournal {
  invoice_reference_model
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_bg_ledger.models.account_journal.AccountJournal {
  l10n_bg_credit_notes
  l10n_bg_customer_invoice
  l10n_bg_debit_notes
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_tr.models.account_journal.AccountJournal {
  l10n_tr_default_sales_return_account_id
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_latam_invoice_document.models.account_journal.AccountJournal {
  l10n_latam_company_use_documents
  l10n_latam_use_documents
  check_use_document()
}
class "AccountJournal" as odoo_src.odoo.addons.account_check_printing.models.account_journal.AccountJournal {
  bank_check_printing_layout
  check_manual_sequencing
  check_next_number
  check_sequence_id
  action_checks_to_print()
  create(vals_list)
}
class "AccountJournal" as odoo_src.odoo.addons.account_peppol.models.account_journal.AccountJournal {
  account_peppol_proxy_state
  is_peppol_journal
  action_peppol_ready_moves()
  peppol_get_message_status()
  peppol_get_new_documents()
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_lt.models.account_journal.AccountJournal {
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_fi.models.account_journal.AccountJournal {
  invoice_reference_model
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_no.models.account_journal.AccountJournal {
  invoice_reference_model
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_be.models.account_journal.AccountJournal {
  invoice_reference_model
}
class "AccountJournal" as odoo_src.odoo.addons.point_of_sale.models.account_journal.AccountJournal {
  pos_payment_method_ids
  action_archive()
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.account_journal.AccountJournal {
  l10n_eg_activity_type_id
  l10n_eg_branch_id
  l10n_eg_branch_identifier
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_se.models.account_journal.AccountJournal {
  invoice_reference_model
  l10n_se_invoice_ocr_length
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_tr_nilvera.models.account_journal.AccountJournal {
  is_nilvera_journal
  l10n_tr_nilvera_api_key
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_latam_check.models.account_journal.AccountJournal {
  create(vals_list)
}
class "AccountJournal" as odoo_src.odoo.addons.account.models.account_journal.AccountJournal {
  account_control_ids
  accounting_date
  active
  alias_id
  autocheck_on_post
  available_payment_method_ids
  bank_acc_number
  bank_account_id
  bank_id
  bank_statements_source
  code
  company_id
  company_partner_id
  country_code
  currency_id
  default_account_id
  default_account_type
  display_alias_fields
  inbound_payment_method_line_ids
  invoice_reference_model
  invoice_reference_type
  journal_group_ids
  loss_account_id
  name
  outbound_payment_method_line_ids
  payment_sequence
  profit_account_id
  refund_sequence
  restrict_mode_hash_table
  selected_payment_method_codes
  sequence
  sequence_override_regex
  suspense_account_id
  type
  action_configure_bank_journal()
  copy_data(default)
  create(vals_list)
  create_document_from_attachment(attachment_ids)
  get_next_bank_cash_default_code(journal_type, company, cache, protected_codes)
  set_bank_account(acc_number, bank_id)
  unlink()
  write(vals)
}
class "AccountJournal" as odoo_src.odoo.addons.account_payment.models.account_journal.AccountJournal {
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_ch.models.account_journal.AccountJournal {
  invoice_reference_model
}
class "AccountJournal" as odoo_src.odoo.addons.account_edi.models.account_journal.AccountJournal {
  compatible_edi_ids
  edi_format_ids
  write(vals)
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_ec.models.account_journal.AccountJournal {
  l10n_ec_emission
  l10n_ec_emission_address_id
  l10n_ec_entity
  l10n_ec_require_emission
}
class "AccountJournal" as odoo_src.odoo.addons.account_debit_note.models.account_journal.AccountJournal {
  debit_sequence
}
class "AccountJournal" as odoo_src.odoo.addons.l10n_tr_nilvera_einvoice.models.account_journal.AccountJournal {
  l10n_tr_nilvera_get_documents()
  l10n_tr_nilvera_get_message_status()
}
class "AccountJournalGroup" as odoo_src.odoo.addons.account.models.account_journal.AccountJournalGroup {
  company_id
  excluded_journal_ids
  name
  sequence
}
class "<color:red>AccountLockException</color>" as odoo_src.odoo.addons.account.models.account_lock_exception.AccountLockException {
  active
  company_id
  company_lock_date
  end_datetime
  fiscalyear_lock_date
  lock_date
  lock_date_field
  purchase_lock_date
  reason
  sale_lock_date
  state
  tax_lock_date
  user_id
  action_revoke()
  action_show_audit_trail_during_exception()
  copy(default)
  create(vals_list)
  init()
}
class "AccountMergeWizard" as odoo_src.odoo.addons.account.wizard.account_merge_wizard.AccountMergeWizard {
  account_ids
  disable_merge_button
  is_group_by_name
  wizard_line_ids
  action_merge()
  default_get(fields)
}
class "AccountMergeWizardLine" as odoo_src.odoo.addons.account.wizard.account_merge_wizard.AccountMergeWizardLine {
  account_has_hashed_entries
  account_id
  company_ids
  display_type
  grouping_key
  info
  is_selected
  sequence
  wizard_id
}
class "AccountMove" as odoo_src.odoo.addons.l10n_hu.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.account_fleet.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_rs_edi.models.account_move.AccountMove {
  l10n_rs_edi_attachment_file
  l10n_rs_edi_attachment_id
  l10n_rs_edi_error
  l10n_rs_edi_invoice
  l10n_rs_edi_is_eligible
  l10n_rs_edi_purchase_invoice
  l10n_rs_edi_sales_invoice
  l10n_rs_edi_state
  l10n_rs_edi_uuid
  l10n_rs_tax_date_obligations_code
  button_draft()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_gr_edi.models.account_move.AccountMove {
  l10n_gr_edi_alerts
  l10n_gr_edi_attachment_id
  l10n_gr_edi_available_inv_type
  l10n_gr_edi_cls_mark
  l10n_gr_edi_correlation_id
  l10n_gr_edi_document_ids
  l10n_gr_edi_enable_send_expense_classification
  l10n_gr_edi_enable_send_invoices
  l10n_gr_edi_enable_view_mydata
  l10n_gr_edi_inv_type
  l10n_gr_edi_mark
  l10n_gr_edi_need_correlated
  l10n_gr_edi_need_payment_method
  l10n_gr_edi_payment_method
  l10n_gr_edi_state
  l10n_gr_edi_try_send_expense_classification()
  l10n_gr_edi_try_send_invoices()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_edi.models.account_move.AccountMove {
  l10n_in_edi_cancel_reason
  l10n_in_edi_cancel_remarks
  l10n_in_edi_show_cancel
  button_cancel_posted_moves()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_de.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_sa_edi.models.account_move.AccountMove {
  l10n_sa_chain_index
  l10n_sa_invoice_signature
  l10n_sa_uuid
  action_post()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_br.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es_edi_sii.models.account_move.AccountMove {
  l10n_es_edi_csv
  l10n_es_edi_is_required
  l10n_es_registration_date
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_purchase_stock.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_au.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ar.models.account_move.AccountMove {
  l10n_ar_afip_concept
  l10n_ar_afip_responsibility_type_id
  l10n_ar_afip_service_end
  l10n_ar_afip_service_start
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ph.models.account_move.AccountMove {
  action_open_l10n_ph_2307_wizard()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_sg.models.account_move.AccountMove {
  l10n_sg_permit_number
  l10n_sg_permit_number_date
}
class "AccountMove" as odoo_src.odoo.addons.l10n_uy.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_si.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_gcc_invoice.models.account_move.AccountMove {
  narration
  create(vals_list)
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_sale_stock.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_bg_ledger.models.account_move.AccountMove {
  l10n_bg_document_number
  l10n_bg_document_type
  l10n_bg_exemption_reason
}
class "AccountMove" as odoo_src.odoo.addons.l10n_dk_oioubl.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_sa.models.account_move.AccountMove {
  l10n_sa_confirmation_datetime
  l10n_sa_qr_code_str
  button_draft()
  get_l10n_sa_confirmation_datetime_sa_tz()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_latam_invoice_document.models.account_move.AccountMove {
  l10n_latam_available_document_type_ids
  l10n_latam_document_number
  l10n_latam_document_type_id
  l10n_latam_document_type_id_code
  l10n_latam_manual_document_number
  l10n_latam_use_documents
  name : bool
}
class "AccountMove" as odoo_src.odoo.addons.l10n_fr_account.models.account_move.AccountMove {
  l10n_fr_is_company_french
}
class "AccountMove" as odoo_src.odoo.addons.l10n_jo_edi_extended.models.account_move.AccountMove {
  l10n_jo_edi_invoice_type
  l10n_jo_edi_state
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it_stock_ddt.models.account_invoice.AccountMove {
  l10n_it_ddt_count
  l10n_it_ddt_ids
  get_linked_ddts()
}
class "AccountMove" as odoo_src.odoo.addons.account_peppol.models.account_move.AccountMove {
  peppol_message_uuid
  peppol_move_state
  sending_data : bool
  action_cancel_peppol_documents()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es_pos.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_th.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ar_withholding.models.account_move.AccountMove {
  l10n_ar_withholding_ids
}
class "AccountMove" as odoo_src.odoo.addons.l10n_cl.models.account_move.AccountMove {
  l10n_latam_document_type_id : bool
  l10n_latam_internal_type
  partner_id_vat
}
class "AccountMove" as odoo_src.odoo.addons.l10n_id.models.account_move.AccountMove {
  l10n_id_qris_transaction_ids
  action_l10n_id_update_payment_status()
}
class "AccountMove" as odoo_src.odoo.addons.mrp_account.models.account_move.AccountMove {
  wip_production_count
  wip_production_ids
  action_view_wip_production()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es.models.account_move.AccountMove {
  l10n_es_is_simplified
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ke.models.account_move.AccountMove {
  l10n_ke_wh_certificate_date
  l10n_ke_wh_certificate_number
}
class "AccountMove" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.account_move.AccountMove {
  l10n_vn_edi_adjustment_type
  l10n_vn_edi_agreement_document_date
  l10n_vn_edi_agreement_document_name
  l10n_vn_edi_invoice_number
  l10n_vn_edi_invoice_state
  l10n_vn_edi_invoice_symbol
  l10n_vn_edi_invoice_transaction_id
  l10n_vn_edi_issue_date
  l10n_vn_edi_replacement_origin_id
  l10n_vn_edi_reservation_code
  l10n_vn_edi_reversed_entry_invoice_number
  l10n_vn_edi_sinvoice_file
  l10n_vn_edi_sinvoice_file_id
  l10n_vn_edi_sinvoice_pdf_file
  l10n_vn_edi_sinvoice_pdf_file_id
  l10n_vn_edi_sinvoice_xml_file
  l10n_vn_edi_sinvoice_xml_file_id
  action_l10n_vn_edi_update_payment_status()
  button_draft()
  button_request_cancel()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it_edi_doi.models.account_move.AccountMove {
  l10n_it_edi_doi_amount
  l10n_it_edi_doi_date
  l10n_it_edi_doi_id
  l10n_it_edi_doi_use
  l10n_it_edi_doi_warning
  action_open_declaration_of_intent()
  copy_data(default)
}
class "AccountMove" as odoo_src.odoo.addons.l10n_nz.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_zm_account.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_withholding.models.account_move.AccountMove {
  l10n_in_display_higher_tcs_button
  l10n_in_is_withholding
  l10n_in_tcs_tds_warning
  l10n_in_total_withholding_amount
  l10n_in_withhold_move_ids
  l10n_in_withholding_line_ids
  l10n_in_withholding_ref_move_id
  action_l10n_in_apply_higher_tax()
  action_l10n_in_withholding_entries()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_no.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.hr_expense.models.account_move.AccountMove {
  expense_sheet_id
  show_commercial_partner_warning
  action_open_expense_report()
  button_cancel()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_my_edi.models.account_move.AccountMove {
  l10n_my_edi_custom_form_reference
  l10n_my_edi_display_tax_exemption_reason
  l10n_my_edi_exemption_reason
  l10n_my_edi_external_uuid
  l10n_my_edi_file
  l10n_my_edi_file_id
  l10n_my_edi_retry_at
  l10n_my_edi_state
  l10n_my_edi_submission_uid
  l10n_my_edi_validation_time
  l10n_my_error_document_hash
  action_l10n_my_edi_reject_bill()
  action_l10n_my_edi_update_status()
  action_validate_tin()
  button_draft()
  button_request_cancel()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_pos.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_be.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_pl.models.account_move.AccountMove {
  l10n_pl_vat_b_mpv_prowizja
  l10n_pl_vat_b_spv
  l10n_pl_vat_b_spv_dostawa
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_pe.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_vn.models.account_move.AccountMove {
  l10n_vn_e_invoice_number
}
class "AccountMove" as odoo_src.odoo.addons.point_of_sale.models.account_move.AccountMove {
  pos_order_ids
  pos_payment_ids
  pos_refunded_invoice_ids
  pos_session_ids
  reversed_pos_order_id
}
class "AccountMove" as odoo_src.odoo.addons.event_booth_sale.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.account_move.AccountMove {
  l10n_eg_eta_json_doc_id
  l10n_eg_is_signed
  l10n_eg_long_id
  l10n_eg_qr_code
  l10n_eg_signing_time
  l10n_eg_submission_number
  l10n_eg_uuid
  action_get_eta_invoice_pdf()
  action_post_sign_invoices()
  button_draft()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_sk.models.account_move.AccountMove {
  taxable_supply_date
}
class "AccountMove" as odoo_src.odoo.addons.l10n_sg_ubl_pint.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_se.models.account_move.AccountMove {
  payment_reference
}
class "AccountMove" as odoo_src.odoo.addons.l10n_id_efaktur.models.account_move.AccountMove {
  l10n_id_available_range_count
  l10n_id_efaktur_document
  l10n_id_efaktur_range
  l10n_id_kode_transaksi
  l10n_id_need_kode_transaksi
  l10n_id_replace_invoice_id
  l10n_id_show_kode_transaksi
  l10n_id_tax_number
  button_draft()
  download_csv()
  download_efaktur()
  reset_efaktur()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.account_move.AccountMove {
  l10n_es_edi_verifactu_available_clave_regimens
  l10n_es_edi_verifactu_clave_regimen
  l10n_es_edi_verifactu_document_ids
  l10n_es_edi_verifactu_qr_code
  l10n_es_edi_verifactu_refund_reason
  l10n_es_edi_verifactu_required
  l10n_es_edi_verifactu_show_cancel_button
  l10n_es_edi_verifactu_state
  l10n_es_edi_verifactu_substituted_entry_id
  l10n_es_edi_verifactu_substitution_move_ids
  l10n_es_edi_verifactu_warning
  l10n_es_edi_verifactu_warning_level
  l10n_es_edi_verifactu_button_cancel()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_fr_facturx_chorus_pro.models.account_move.AccountMove {
  buyer_reference
  contract_reference
  purchase_order_reference
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ke_edi_tremol.models.account_move.AccountMove {
  l10n_ke_cu_datetime
  l10n_ke_cu_invoice_number
  l10n_ke_cu_qrcode
  l10n_ke_cu_serial_number
  l10n_ke_cu_show_send_button
  l10n_ke_action_cu_post()
  l10n_ke_cu_responses(responses)
}
class "AccountMove" as odoo_src.odoo.addons.l10n_rs.models.account_move.AccountMove {
  l10n_rs_turnover_date
}
class "AccountMove" as odoo_src.odoo.addons.l10n_mu_account.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_sa_edi_pos.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_hu_edi.models.account_move.AccountMove {
  l10n_hu_edi_attachment
  l10n_hu_edi_attachment_filename
  l10n_hu_edi_batch_upload_index
  l10n_hu_edi_message_html
  l10n_hu_edi_messages
  l10n_hu_edi_send_time
  l10n_hu_edi_state
  l10n_hu_edi_transaction_code
  l10n_hu_invoice_chain_index
  l10n_hu_payment_mode
  button_request_cancel()
  l10n_hu_edi_button_hide_banner()
  l10n_hu_edi_button_update_status(from_cron)
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_purchase.models.account_move.AccountMove {
  l10n_in_gst_treatment
}
class "AccountMove" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.account_move.AccountMove {
  l10n_id_coretax_add_info_07
  l10n_id_coretax_add_info_08
  l10n_id_coretax_custom_doc
  l10n_id_coretax_document
  l10n_id_coretax_efaktur_available
  l10n_id_coretax_facility_info_07
  l10n_id_coretax_facility_info_08
  l10n_id_kode_transaksi
  l10n_id_need_kode_transaksi : bool
  download_efaktur()
  download_xml()
  prepare_efaktur_vals()
}
class "AccountMove" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_move.AccountMove {
  ubl_cii_xml_file
  ubl_cii_xml_id
  action_invoice_download_ubl()
  get_extra_print_items()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_withholding_payment.models.account_move.AccountMove {
  l10n_in_withholding_ref_payment_id
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_gstin_status.models.account_move.AccountMove {
  l10n_in_gstin_verified_date
  l10n_in_partner_gstin_status
  l10n_in_show_gstin_status
  l10n_in_verify_partner_gstin_status()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_latam_check.models.account_move.AccountMove {
  button_draft()
}
class "AccountMove" as odoo_src.odoo.addons.account.models.account_move.AccountMove {
  abnormal_amount_warning
  abnormal_date_warning
  always_tax_exigible
  amount_residual
  amount_residual_signed
  amount_tax
  amount_tax_signed
  amount_total
  amount_total_in_currency_signed
  amount_total_signed
  amount_total_words
  amount_untaxed
  amount_untaxed_in_currency_signed
  amount_untaxed_signed
  attachment_ids
  audit_trail_message_ids
  auto_post
  auto_post_origin_id
  auto_post_until
  bank_partner_id
  checked
  commercial_partner_id
  company_currency_id
  company_id
  company_price_include
  country_code
  currency_id
  date
  delivery_date
  direction_sign
  display_inactive_currency_warning
  display_qr_code
  duplicated_ref_ids
  expected_currency_rate
  fiscal_position_id
  has_reconciled_entries
  hide_post_button
  highest_name
  inalterable_hash
  incoterm_location
  invoice_cash_rounding_id
  invoice_currency_rate
  invoice_date
  invoice_date_due
  invoice_filter_type_domain
  invoice_has_outstanding
  invoice_incoterm_id
  invoice_line_ids
  invoice_origin
  invoice_outstanding_credits_debits_widget
  invoice_partner_display_name
  invoice_payment_term_id
  invoice_payments_widget
  invoice_pdf_report_file
  invoice_pdf_report_id
  invoice_source_email
  invoice_user_id
  invoice_vendor_bill_id
  is_being_sent
  is_manually_modified
  is_move_sent
  is_storno
  journal_group_id
  journal_id
  line_ids
  made_sequence_gap
  matched_payment_ids
  move_sent_values
  move_type
  name
  name_placeholder
  narration
  need_cancel_request
  needed_terms
  needed_terms_dirty
  next_payment_date
  origin_payment_id
  partner_bank_id
  partner_credit
  partner_credit_warning
  partner_id
  partner_shipping_id
  payment_count
  payment_reference
  payment_state
  payment_term_details
  posted_before
  preferred_payment_method_line_id
  qr_code_method
  quick_edit_mode
  quick_edit_total_amount
  quick_encoding_vals
  ref
  restrict_mode_hash_table
  reversal_move_ids
  reversed_entry_id
  secure_sequence_number
  secured
  sending_data
  show_delivery_date
  show_discount_details
  show_name_warning
  show_payment_term_details
  show_reset_to_draft_button
  show_update_fpos
  state
  statement_id
  statement_line_id
  status_in_payment
  suitable_journal_ids
  tax_calculation_rounding_method
  tax_cash_basis_created_move_ids
  tax_cash_basis_origin_move_id
  tax_cash_basis_rec_id
  tax_country_code
  tax_country_id
  tax_lock_date_message
  tax_totals
  taxes_legal_notes
  type_name
  user_id
  action_activate_currency()
  action_add_from_catalog()
  action_duplicate()
  action_force_register_payment()
  action_invoice_download_pdf()
  action_invoice_sent()
  action_open_business_doc()
  action_post()
  action_print_pdf()
  action_register_payment()
  action_reverse()
  action_send_and_print()
  action_switch_move_type()
  action_toggle_block_payment()
  action_update_fpos_values()
  button_cancel()
  button_draft()
  button_hash()
  button_request_cancel()
  button_set_checked()
  check_field_access_rights(operation, field_names)
  check_move_sequence_chain()
  compute_move_sent_values()
  copy(default)
  copy_data(default)
  create(vals_list)
  get_currency_rate(company_id, to_currency_id, date)
  get_extra_print_items()
  get_inbound_types(include_receipts)
  get_invoice_localisation_fields_required_to_invoice(country_id)
  get_invoice_types(include_receipts)
  get_outbound_types(include_receipts)
  get_purchase_types(include_receipts)
  get_sale_types(include_receipts)
  init()
  is_entry()
  is_inbound(include_receipts)
  is_invoice(include_receipts)
  is_outbound(include_receipts)
  is_purchase_document(include_receipts)
  is_sale_document(include_receipts)
  js_assign_outstanding_line(line_id)
  js_remove_outstanding_partial(partial_id)
  message_new(msg_dict, custom_values)
  onchange(values, field_names, fields_spec)
  open_created_caba_entries()
  open_payments()
  open_reconcile_view()
  preview_invoice()
  refresh_invoice_currency_rate()
  unlink()
  write(vals)
}
class "AccountMove" as odoo_src.odoo.addons.account.models.account_payment.AccountMove {
  payment_ids
}
class "AccountMove" as odoo_src.odoo.addons.account.models.account_bank_statement_line.AccountMove {
  statement_line_ids
}
class "AccountMove" as odoo_src.odoo.addons.l10n_my_edi_extended.models.account_move.AccountMove {
  l10n_my_edi_invoice_long_id
  l10n_my_invoice_need_edi
  action_invoice_sent()
  action_l10n_my_edi_send_invoice()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it_edi_ndd_account_dn.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ro_edi.models.account_move.AccountMove {
  l10n_ro_edi_attachment_id
  l10n_ro_edi_document_ids
  l10n_ro_edi_index
  l10n_ro_edi_state
}
class "AccountMove" as odoo_src.odoo.addons.account_payment.models.account_move.AccountMove {
  amount_paid
  authorized_transaction_ids
  transaction_count
  transaction_ids
  action_view_payment_transactions()
  get_portal_last_transaction()
  payment_action_capture()
  payment_action_void()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.account_move.AccountMove {
  l10n_es_edi_facturae_reason_code
  l10n_es_edi_facturae_xml_file
  l10n_es_edi_facturae_xml_id
  l10n_es_invoicing_period_end_date
  l10n_es_invoicing_period_start_date
  l10n_es_payment_means
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ch.models.account_invoice.AccountMove {
  l10n_ch_is_qr_valid
  get_l10n_ch_qrr_number()
  l10n_ch_action_print_qr()
  space_qrr_reference(qrr_ref)
  space_scor_reference(iso11649_ref)
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it.models.account_move.AccountMove {
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.models.account_move.AccountMove {
  l10n_in_distance
  l10n_in_edi_ewaybill_direct_api
  l10n_in_edi_ewaybill_show_send_button
  l10n_in_mode
  l10n_in_transportation_doc_date
  l10n_in_transportation_doc_no
  l10n_in_transporter_id
  l10n_in_type_id
  l10n_in_vehicle_no
  l10n_in_vehicle_type
  button_cancel_posted_moves()
  l10n_in_edi_ewaybill_send()
}
class "AccountMove" as odoo_src.odoo.addons.account_edi.models.account_move.AccountMove {
  edi_blocking_level
  edi_document_ids
  edi_error_count
  edi_error_message
  edi_show_abandon_cancel_button
  edi_show_cancel_button
  edi_show_force_cancel_button
  edi_state
  edi_web_services_to_process
  action_process_edi_web_services(with_commit)
  action_retry_edi_documents_error()
  button_abandon_cancel_posted_posted_moves()
  button_cancel()
  button_cancel_posted_moves()
  button_draft()
  button_force_cancel()
  button_process_edi_web_services()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_ec.models.account_move.AccountMove {
  l10n_ec_sri_payment_id
}
class "AccountMove" as odoo_src.odoo.addons.l10n_cz.models.account_move.AccountMove {
  taxable_supply_date
}
class "AccountMove" as odoo_src.odoo.addons.account_debit_note.models.account_move.AccountMove {
  debit_note_count
  debit_note_ids
  debit_origin_id
  action_debit_note()
  action_view_debit_notes()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it_edi_withholding.models.account_move.AccountMove {
  l10n_it_amount_before_withholding_signed
  l10n_it_amount_pension_fund_signed
  l10n_it_amount_vat_signed
  l10n_it_amount_withholding_signed
  get_tag(element, selector)
}
class "AccountMove" as odoo_src.odoo.addons.membership.models.account_move.AccountMove {
  button_cancel()
  button_draft()
  write(vals)
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it_edi_ndd.models.account_move.AccountMove {
  l10n_it_document_type
  l10n_it_payment_method
}
class "AccountMove" as odoo_src.odoo.addons.l10n_cn.models.account_move.AccountMove {
  fapiao
  check_cn2an()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_it_edi.models.account_move.AccountMove {
  is_move_sent : bool
  l10n_it_cig
  l10n_it_cup
  l10n_it_ddt_id
  l10n_it_edi_attachment_file
  l10n_it_edi_attachment_id
  l10n_it_edi_header
  l10n_it_edi_is_self_invoice
  l10n_it_edi_state
  l10n_it_edi_transaction
  l10n_it_origin_document_date
  l10n_it_origin_document_name
  l10n_it_origin_document_type
  l10n_it_partner_pa
  l10n_it_stamp_duty
  action_check_l10n_it_edi()
  action_invoice_download_fatturapa()
  action_l10n_it_edi_send()
  button_draft()
  cron_l10n_it_edi_download_and_update()
  get_extra_print_items()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_jo_edi.models.account_move.AccountMove {
  l10n_jo_edi_computed_xml
  l10n_jo_edi_error
  l10n_jo_edi_is_needed
  l10n_jo_edi_qr
  l10n_jo_edi_state
  l10n_jo_edi_uuid
  l10n_jo_edi_xml_attachment_file
  l10n_jo_edi_xml_attachment_id
  reversed_entry_id
  button_draft()
  download_l10n_jo_edi_computed_xml()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.account_move.AccountMove {
  l10n_es_tbai_cancel_document_id
  l10n_es_tbai_cancel_file
  l10n_es_tbai_cancel_file_name
  l10n_es_tbai_chain_index
  l10n_es_tbai_is_required
  l10n_es_tbai_post_document_id
  l10n_es_tbai_post_file
  l10n_es_tbai_post_file_name
  l10n_es_tbai_refund_reason
  l10n_es_tbai_reversed_ids
  l10n_es_tbai_state
  button_draft()
  l10n_es_tbai_cancel()
  l10n_es_tbai_resend_bill()
  l10n_es_tbai_send_bill()
}
class "AccountMove" as odoo_src.odoo.addons.l10n_in.models.account_invoice.AccountMove {
  l10n_in_gst_treatment
  l10n_in_gstin
  l10n_in_journal_type
  l10n_in_reseller_partner_id
  l10n_in_shipping_bill_date
  l10n_in_shipping_bill_number
  l10n_in_shipping_port_code_id
  l10n_in_state_id
  l10n_in_warning
}
class "AccountMove" as odoo_src.odoo.addons.l10n_tr_nilvera_einvoice.models.account_move.AccountMove {
  is_move_sent : bool
  l10n_tr_nilvera_send_status
  l10n_tr_nilvera_uuid
  button_draft()
}
class "AccountMoveLine" as odoo_src.odoo.addons.account_fleet.models.account_move.AccountMoveLine {
  need_vehicle
  vehicle_id
  vehicle_log_service_ids
  unlink()
  write(vals)
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_gr_edi.models.account_move_line.AccountMoveLine {
  l10n_gr_edi_available_cls_category
  l10n_gr_edi_available_cls_type
  l10n_gr_edi_available_cls_vat
  l10n_gr_edi_cls_category
  l10n_gr_edi_cls_type
  l10n_gr_edi_cls_vat
  l10n_gr_edi_detail_type
  l10n_gr_edi_need_exemption_category
  l10n_gr_edi_tax_exemption_category
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_sa_edi.models.account_move.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_ar.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_gcc_invoice.models.account_move.AccountMoveLine {
  l10n_gcc_invoice_tax_amount
  l10n_gcc_line_name
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_tr.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_latam_invoice_document.models.account_move_line.AccountMoveLine {
  l10n_latam_document_type_id
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_cl.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.mrp_account.models.account_move.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_in_withholding.models.account_move_line.AccountMoveLine {
  l10n_in_withhold_tax_amount
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_ae.models.account_move_line.AccountMoveLine {
  l10n_ae_vat_amount
}
class "AccountMoveLine" as odoo_src.odoo.addons.hr_expense.models.account_move_line.AccountMoveLine {
  expense_id
}
class "AccountMoveLine" as odoo_src.odoo.addons.mrp_subcontracting_purchase.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.point_of_sale.models.account_move.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_latam_check.models.account_move_line.AccountMoveLine {
  l10n_latam_check_ids
}
class "AccountMoveLine" as odoo_src.odoo.addons.account.models.account_move_line.AccountMoveLine {
  account_code
  account_id
  account_internal_group
  account_name
  account_root_id
  account_type
  amount_currency
  amount_residual
  amount_residual_currency
  analytic_distribution
  analytic_line_ids
  balance
  commercial_partner_country
  company_currency_id
  company_id
  credit
  cumulated_balance
  currency_id
  currency_rate
  date
  date_maturity
  debit
  discount
  discount_allocation_dirty
  discount_allocation_key
  discount_allocation_needed
  discount_amount_currency
  discount_balance
  discount_date
  display_type
  epd_dirty
  epd_key
  epd_needed
  full_reconcile_id
  group_tax_id
  invoice_date
  is_account_reconcile
  is_imported
  is_refund
  is_same_currency
  is_storno
  journal_group_id
  journal_id
  matched_credit_ids
  matched_debit_ids
  matching_number
  move_id
  move_name
  move_type
  name
  parent_state
  partner_id
  payment_date
  payment_id
  price_subtotal
  price_total
  price_unit
  product_category_id
  product_id
  product_uom_category_id
  product_uom_id
  quantity
  reconcile_model_id
  reconciled
  ref
  sequence
  statement_id
  statement_line_id
  tax_base_amount
  tax_calculation_rounding_method
  tax_group_id
  tax_ids
  tax_line_id
  tax_repartition_line_id
  tax_tag_ids
  tax_tag_invert
  term_key
  action_add_from_catalog()
  action_automatic_entry(default_action)
  action_open_business_doc()
  action_payment_items_register_payment()
  action_register_payment(ctx)
  action_unreconcile_match_entries()
  check_field_access_rights(operation, field_names)
  copy_data(default)
  create(vals_list)
  default_get(fields_list)
  flush_model(fnames)
  flush_recordset(fnames)
  get_import_templates()
  get_views(views, options)
  init()
  invalidate_model(fnames, flush)
  invalidate_recordset(fnames, flush)
  open_reconcile_view()
  read_group(domain, fields, groupby, offset, limit, orderby, lazy)
  reconcile()
  remove_move_reconcile()
  search_fetch(domain, field_names, offset, limit, order)
  unlink()
  write(vals)
}
class "AccountMoveLine" as odoo_src.odoo.addons.account.models.account_move_line_tax_details.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_my_edi_extended.models.account_move_line.AccountMoveLine {
  l10n_my_edi_classification_code
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_cz.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.membership.models.account_move.AccountMoveLine {
  create(vals_list)
  write(vals)
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.account_move_line.AccountMoveLine {
}
class "AccountMoveLine" as odoo_src.odoo.addons.l10n_in.models.account_move_line.AccountMoveLine {
  l10n_in_hsn_code
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_gr_edi.wizard.account_move_reversal.AccountMoveReversal {
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_sa_edi.wizard.account_move_reversal.AccountMoveReversal {
  reverse_moves(is_modify)
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_br.wizard.account_move_reversal.AccountMoveReversal {
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_latam_invoice_document.wizards.account_move_reversal.AccountMoveReversal {
  l10n_latam_available_document_type_ids
  l10n_latam_document_number
  l10n_latam_document_type_id
  l10n_latam_manual_document_number
  l10n_latam_use_documents
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_vn_edi_viettel.wizard.account_move_reversal.AccountMoveReversal {
  l10n_vn_edi_adjustment_type
  l10n_vn_edi_agreement_document_date
  l10n_vn_edi_agreement_document_name
  reverse_moves(is_modify)
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_id_efaktur.wizard.account_move_reversal.AccountMoveReversal {
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_es_edi_verifactu.wizard.account_move_reversal.AccountMoveReversal {
  l10n_es_edi_verifactu_refund_reason
  l10n_es_edi_verifactu_required
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_hu_edi.wizard.account_move_reversal.AccountMoveReversal {
  reverse_moves(is_modify)
}
class "AccountMoveReversal" as odoo_src.odoo.addons.account.wizard.account_move_reversal.AccountMoveReversal {
  available_journal_ids
  company_id
  country_code
  currency_id
  date
  journal_id
  move_ids
  move_type
  new_move_ids
  reason
  residual
  default_get(fields)
  modify_moves()
  refund_moves()
  reverse_moves(is_modify)
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_es_edi_facturae.wizard.account_move_reversal.AccountMoveReversal {
  l10n_es_edi_facturae_reason_code
  reverse_moves(is_modify)
}
class "AccountMoveReversal" as odoo_src.odoo.addons.l10n_es_edi_tbai.wizards.account_move_reversal.AccountMoveReversal {
  l10n_es_tbai_is_required
  l10n_es_tbai_refund_reason
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_rs_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_gr_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_sa_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_es_edi_sii.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_jo_edi_extended.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.account_peppol.models.account_move_send.AccountMoveSend {
  action_what_is_peppol_activate(moves)
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_my_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_ke_edi_tremol.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_hu_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.account.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_my_edi_extended.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_ro_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.account_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_it_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_jo_edi.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSend" as odoo_src.odoo.addons.l10n_tr_nilvera_einvoice.models.account_move_send.AccountMoveSend {
}
class "AccountMoveSendBatchWizard" as odoo_src.odoo.addons.account_peppol.wizard.account_move_send_batch_wizard.AccountMoveSendBatchWizard {
  action_send_and_print(force_synchronous, allow_fallback_pdf)
}
class "AccountMoveSendBatchWizard" as odoo_src.odoo.addons.account.wizard.account_move_send_batch_wizard.AccountMoveSendBatchWizard {
  alerts
  move_ids
  summary_data
  action_send_and_print(force_synchronous, allow_fallback_pdf)
  default_get(fields_list)
}
class "AccountMoveSendWizard" as odoo_src.odoo.addons.l10n_rs_edi.wizard.account_move_send_wizard.AccountMoveSendWizard {
  extra_edi_checkboxes
}
class "AccountMoveSendWizard" as odoo_src.odoo.addons.account_peppol.wizard.account_move_send_wizard.AccountMoveSendWizard {
  action_send_and_print(allow_fallback_pdf)
}
class "AccountMoveSendWizard" as odoo_src.odoo.addons.l10n_ke_edi_tremol.wizard.account_move_send_wizard.AccountMoveSendWizard {
  action_send_and_print(allow_fallback_pdf)
}
class "AccountMoveSendWizard" as odoo_src.odoo.addons.account.wizard.account_move_send_wizard.AccountMoveSendWizard {
  alerts
  company_id
  display_pdf_report_id
  extra_edi_checkboxes
  extra_edis
  invoice_edi_format
  is_download_only
  mail_attachments_widget
  mail_body
  mail_lang
  mail_partner_ids
  mail_subject
  mail_template_id
  move_id
  pdf_report_id
  sending_method_checkboxes
  sending_methods
  action_send_and_print(allow_fallback_pdf)
  default_get(fields_list)
}
class "AccountMoveSendWizard" as odoo_src.odoo.addons.l10n_ro_edi.wizard.account_move_send_wizard.AccountMoveSendWizard {
}
class "AccountMoveSendWizard" as odoo_src.odoo.addons.l10n_es_edi_facturae.wizard.account_move_send_wizard.AccountMoveSendWizard {
  action_send_and_print(allow_fallback_pdf)
}
class "AccountPartialReconcile" as odoo_src.odoo.addons.account.models.account_partial_reconcile.AccountPartialReconcile {
  amount
  company_currency_id
  company_id
  credit_amount_currency
  credit_currency_id
  credit_move_id
  debit_amount_currency
  debit_currency_id
  debit_move_id
  exchange_move_id
  full_reconcile_id
  max_date
  create(vals_list)
  unlink()
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_au.models.account_payment.AccountPayment {
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_ph.models.account_payment.AccountPayment {
  action_open_l10n_ph_2307_wizard()
}
class "AccountPayment" as odoo_src.odoo.addons.account_check_printing.models.account_payment.AccountPayment {
  check_amount_in_words
  check_manual_sequencing
  check_number
  payment_method_line_id
  show_check_number
  action_post()
  action_void_check()
  do_print_checks()
  fields_get(allfields, attributes)
  print_checks()
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_ar_withholding.models.account_payment.AccountPayment {
  l10n_ar_withholding_ids
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_nz.models.account_payment.AccountPayment {
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_in_withholding.models.account_payment.AccountPayment {
  l10n_in_total_withholding_amount
  l10n_in_withhold_move_ids
  action_l10n_in_withholding_entries()
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_payment.AccountPayment {
  display_withholding
  outstanding_account_id
  should_withhold_tax
  withholding_hide_tax_base_account
  withholding_line_ids
  withholding_payment_account_id
}
class "AccountPayment" as odoo_src.odoo.addons.hr_expense.models.account_payment.AccountPayment {
  expense_sheet_id
  action_open_expense_report()
  write(vals)
}
class "AccountPayment" as odoo_src.odoo.addons.point_of_sale.models.account_payment.AccountPayment {
  force_outstanding_account_id
  pos_payment_method_id
  pos_session_id
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_in_withholding_payment.models.account_payment.AccountPayment {
  l10n_in_total_withholding_amount
  l10n_in_withhold_move_ids
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_latam_check.models.account_payment.AccountPayment {
  amount
  l10n_latam_check_warning_msg
  l10n_latam_move_check_ids
  l10n_latam_new_check_ids
  action_cancel()
  action_draft()
  action_post()
}
class "AccountPayment" as odoo_src.odoo.addons.account.models.account_payment.AccountPayment {
  amount
  amount_company_currency_signed
  amount_signed
  attachment_ids
  available_journal_ids
  available_partner_bank_ids
  available_payment_method_line_ids
  company_currency_id
  company_id
  country_code
  currency_id
  date
  destination_account_id
  duplicate_payment_ids
  invoice_ids
  is_matched
  is_reconciled
  is_sent
  journal_id
  memo
  move_id
  name
  need_cancel_request
  outstanding_account_id
  paired_internal_transfer_payment_id
  partner_bank_id
  partner_id
  partner_type
  payment_method_code
  payment_method_id
  payment_method_line_id
  payment_receipt_title
  payment_reference
  payment_type
  qr_code
  reconciled_bill_ids
  reconciled_bills_count
  reconciled_invoice_ids
  reconciled_invoices_count
  reconciled_invoices_type
  reconciled_statement_line_ids
  reconciled_statement_lines_count
  require_partner_bank_account
  show_partner_bank_account
  state
  action_cancel()
  action_draft()
  action_open_business_doc()
  action_post()
  action_reject()
  action_validate()
  button_open_bills()
  button_open_invoices()
  button_open_journal_entry()
  button_open_statement_lines()
  button_request_cancel()
  copy_data(default)
  create(vals_list)
  init()
  mark_as_sent()
  unlink()
  unmark_as_sent()
  write(vals)
}
class "AccountPayment" as odoo_src.odoo.addons.account_payment.models.account_payment.AccountPayment {
  amount_available_for_refund
  payment_token_id
  payment_transaction_id
  refunds_count
  source_payment_id
  suitable_payment_token_ids
  use_electronic_payment_method
  action_post()
  action_refund_wizard()
  action_view_refunds()
}
class "AccountPayment" as odoo_src.odoo.addons.l10n_ch.models.account_payment.AccountPayment {
  l10n_ch_reference_warning_msg
}
class "AccountPaymentCommon" as odoo_src.odoo.addons.account_payment.tests.common.AccountPaymentCommon {
  enable_post_process_patcher : bool
  mocked_get_payment_method_information()
  setUp()
  setUpClass()
}
class "AccountPaymentMethod" as odoo_src.odoo.addons.account_check_printing.models.account_payment_method.AccountPaymentMethod {
}
class "AccountPaymentMethod" as odoo_src.odoo.addons.l10n_latam_check.models.account_payment_method.AccountPaymentMethod {
}
class "AccountPaymentMethod" as odoo_src.odoo.addons.account.models.account_payment_method.AccountPaymentMethod {
  code
  name
  payment_type
  create(vals_list)
  unlink()
}
class "AccountPaymentMethod" as odoo_src.odoo.addons.account_payment.models.account_payment_method.AccountPaymentMethod {
}
class "AccountPaymentMethodLine" as odoo_src.odoo.addons.account.models.account_payment_method.AccountPaymentMethodLine {
  available_payment_method_ids
  code
  company_id
  default_account_id
  journal_id
  name
  payment_account_id
  payment_method_id
  payment_type
  sequence
  create(vals_list)
  unlink()
  write(vals)
}
class "AccountPaymentMethodLine" as odoo_src.odoo.addons.account_payment.models.account_payment_method_line.AccountPaymentMethodLine {
  payment_provider_id
  payment_provider_state
  action_open_provider_form()
}
class "AccountPaymentMethodLine" as odoo_src.odoo.addons.l10n_it_edi_ndd.models.account_payment_methode_line.AccountPaymentMethodLine {
  l10n_it_payment_method
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.l10n_ar_withholding.wizards.account_payment_register.AccountPaymentRegister {
  l10n_ar_adjustment_warning
  l10n_ar_net_amount
  l10n_ar_withholding_ids
  action_create_payments()
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.l10n_account_withholding_tax.wizards.account_payment_register.AccountPaymentRegister {
  display_withholding
  should_withhold_tax
  withholding_default_account_id
  withholding_hide_tax_base_account
  withholding_line_ids
  withholding_net_amount
  withholding_outstanding_account_id
  withholding_payment_account_id
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.hr_expense.wizard.account_payment_register.AccountPaymentRegister {
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.l10n_latam_check.wizards.account_payment_register.AccountPaymentRegister {
  l10n_latam_move_check_ids
  l10n_latam_new_check_ids
  action_create_payments()
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.account.wizard.account_payment_register.AccountPaymentRegister {
  actionable_errors
  amount
  available_journal_ids
  available_partner_bank_ids
  available_payment_method_line_ids
  batches
  can_edit_wizard
  can_group_payments
  communication
  company_currency_id
  company_id
  country_code
  currency_id
  custom_user_amount
  custom_user_currency_id
  duplicate_payment_ids
  early_payment_discount_mode
  group_payment
  hide_writeoff_section
  installments_mode
  installments_switch_amount
  installments_switch_html
  is_register_payment_on_draft
  journal_id
  line_ids
  missing_account_partners
  partner_bank_id
  partner_id
  partner_type
  payment_date
  payment_difference
  payment_difference_handling
  payment_method_line_id
  payment_type
  qr_code
  require_partner_bank_account
  show_partner_bank_account
  show_payment_difference
  source_amount
  source_amount_currency
  source_currency_id
  total_payments_amount
  untrusted_bank_ids
  untrusted_payments_count
  writeoff_account_id
  writeoff_is_exchange_account
  writeoff_label
  action_create_payments()
  action_open_missing_account_partners()
  action_open_untrusted_bank_accounts()
  default_get(fields_list)
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.account_payment.wizards.account_payment_register.AccountPaymentRegister {
  payment_method_code
  payment_token_id
  suitable_payment_token_ids
  use_electronic_payment_method
}
class "AccountPaymentRegisterWithholdingLine" as odoo_src.odoo.addons.l10n_account_withholding_tax.wizards.account_payment_register_withholding_line.AccountPaymentRegisterWithholdingLine {
  payment_register_id
}
class "AccountPaymentTerm" as odoo_src.odoo.addons.account.models.account_payment_term.AccountPaymentTerm {
  active
  company_id
  currency_id
  discount_days
  discount_percentage
  display_on_invoice
  early_discount
  early_pay_discount_computation
  example_amount
  example_date
  example_invalid
  example_preview
  example_preview_discount
  fiscal_country_codes
  line_ids
  name
  note
  sequence
  copy_data(default)
}
class "AccountPaymentTermLine" as odoo_src.odoo.addons.account.models.account_payment_term.AccountPaymentTermLine {
  days_next_month
  delay_type
  display_days_next_month
  nb_days
  payment_id
  value
  value_amount
}
class "AccountPaymentWithholdingLine" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_payment_withholding_line.AccountPaymentWithholdingLine {
  payment_id
}
class "AccountReconcileModel" as odoo_src.odoo.addons.account.models.account_reconcile_model.AccountReconcileModel {
  active
  allow_payment_tolerance
  auto_reconcile
  company_id
  counterpart_type
  decimal_separator
  line_ids
  match_amount
  match_amount_max
  match_amount_min
  match_journal_ids
  match_label
  match_label_param
  match_nature
  match_note
  match_note_param
  match_partner
  match_partner_category_ids
  match_partner_ids
  match_same_currency
  match_text_location_label
  match_text_location_note
  match_text_location_reference
  match_transaction_type
  match_transaction_type_param
  matching_order
  name
  number_entries
  partner_mapping_line_ids
  past_months_limit
  payment_tolerance_param
  payment_tolerance_type
  rule_type
  sequence
  show_decimal_separator
  to_check
  action_reconcile_stat()
  copy_data(default)
}
class "AccountReconcileModelLine" as odoo_src.odoo.addons.account.models.account_reconcile_model.AccountReconcileModelLine {
  account_id
  allow_payment_tolerance
  amount
  amount_string
  amount_type
  company_id
  force_tax_included
  journal_id
  label
  model_id
  payment_tolerance_param
  rule_type
  sequence
  show_force_tax_included
  tax_ids
}
class "AccountReconcileModelPartnerMapping" as odoo_src.odoo.addons.account.models.account_reconcile_model.AccountReconcileModelPartnerMapping {
  company_id
  model_id
  narration_regex
  partner_id
  payment_ref_regex
  validate_regex()
}
class "AccountReport" as odoo_src.odoo.addons.account.models.account_report.AccountReport {
  active
  availability_condition
  chart_template
  column_ids
  country_id
  currency_translation
  default_opening_date_filter
  filter_account_type
  filter_aml_ir_filters
  filter_analytic
  filter_budgets
  filter_date_range
  filter_fiscal_position
  filter_growth_comparison
  filter_hide_0_lines
  filter_hierarchy
  filter_journals
  filter_multi_company
  filter_partner
  filter_period_comparison
  filter_show_draft
  filter_unfold_all
  filter_unreconciled
  integer_rounding
  line_ids
  load_more_limit
  name
  only_tax_exigible
  prefix_groups_threshold
  root_report_id
  search_bar
  section_main_report_ids
  section_report_ids
  sequence
  use_sections
  variant_report_ids
  copy(default)
  copy_data(default)
  write(vals)
}
class "AccountReportColumn" as odoo_src.odoo.addons.account.models.account_report.AccountReportColumn {
  blank_if_zero
  custom_audit_action_id
  expression_label
  figure_type
  name
  report_id
  sequence
  sortable
}
class "AccountReportExpression" as odoo_src.odoo.addons.account.models.account_report.AccountReportExpression {
  auditable
  blank_if_zero
  carryover_target
  date_scope
  engine
  figure_type
  formula
  green_on_positive
  label
  report_line_id
  report_line_name
  subformula
  create(vals_list)
  write(vals)
}
class "AccountReportExpression" as odoo_src.odoo.addons.l10n_it.models.account_report.AccountReportExpression {
}
class "AccountReportExternalValue" as odoo_src.odoo.addons.account.models.account_report.AccountReportExternalValue {
  carryover_origin_expression_label
  carryover_origin_report_line_id
  company_id
  date
  foreign_vat_fiscal_position_id
  name
  report_country_id
  target_report_expression_id
  target_report_expression_label
  target_report_line_id
  text_value
  value
}
class "AccountReportLine" as odoo_src.odoo.addons.account.models.account_report.AccountReportLine {
  account_codes_formula
  action_id
  aggregation_formula
  children_ids
  code
  domain_formula
  expression_ids
  external_formula
  foldable
  groupby
  hide_if_zero
  hierarchy_level
  horizontal_split_side
  name
  parent_id
  print_on_new_page
  report_id
  sequence
  tax_tags_formula
  user_groupby
}
class "AccountResequenceWizard" as odoo_src.odoo.addons.l10n_es_edi_sii.wizards.account_resequence_wizard.AccountResequenceWizard {
}
class "AccountRoot" as odoo_src.odoo.addons.account.models.account_root.AccountRoot {
  name
  parent_id
  browse(ids)
}
class "AccountSecureEntries" as odoo_src.odoo.addons.account.wizard.account_secure_entries_wizard.AccountSecureEntries {
  chains_to_hash_with_gaps
  company_id
  country_code
  hash_date
  max_hash_date
  move_to_hash_ids
  not_hashable_unlocked_move_ids
  unreconciled_bank_statement_line_ids
  warnings
  action_secure_entries()
  action_show_draft_moves_in_hashed_period()
  action_show_moves(moves)
}
class "AccountTax" as odoo_src.odoo.addons.l10n_gr_edi.models.account_tax.AccountTax {
  l10n_gr_edi_default_tax_exemption_category
}
class "AccountTax" as odoo_src.odoo.addons.l10n_de.models.datev.AccountTax {
  l10n_de_datev_code
}
class "AccountTax" as odoo_src.odoo.addons.l10n_mx.models.account_tax.AccountTax {
  l10n_mx_factor_type
  l10n_mx_tax_type
}
class "AccountTax" as odoo_src.odoo.addons.l10n_sa_edi.models.account_tax.AccountTax {
  l10n_sa_exemption_reason_code
  l10n_sa_is_retention
  onchange_amount()
}
class "AccountTax" as odoo_src.odoo.addons.l10n_br.models.account.AccountTax {
  amount_mva
  base_reduction
  tax_discount
}
class "AccountTax" as odoo_src.odoo.addons.l10n_ph.models.account_tax.AccountTax {
  l10n_ph_atc
}
class "AccountTax" as odoo_src.odoo.addons.l10n_uy.models.account_tax.AccountTax {
  l10n_uy_tax_category
}
class "AccountTax" as odoo_src.odoo.addons.l10n_my_edi_pos.models.account_tax.AccountTax {
  l10n_my_tax_exemption_reason
}
class "AccountTax" as odoo_src.odoo.addons.account_edi_ubl_cii_tax_extension.models.account_tax.AccountTax {
  ubl_cii_tax_category_code
  ubl_cii_tax_exemption_reason_code
}
class "AccountTax" as odoo_src.odoo.addons.l10n_ar_withholding.models.account_tax.AccountTax {
  l10n_ar_code
  l10n_ar_minimum_threshold
  l10n_ar_non_taxable_amount
  l10n_ar_scale_id
  l10n_ar_state_id
  l10n_ar_tax_type
  l10n_ar_type_tax_use
  l10n_ar_withholding_payment_type
  l10n_ar_withholding_sequence_id
}
class "AccountTax" as odoo_src.odoo.addons.l10n_eg.models.account_tax.AccountTax {
  l10n_eg_eta_code
}
class "AccountTax" as odoo_src.odoo.addons.l10n_cl.models.account_tax.AccountTax {
  l10n_cl_sii_code
}
class "AccountTax" as odoo_src.odoo.addons.l10n_es.models.account_tax.AccountTax {
  l10n_es_bien_inversion
  l10n_es_exempt_reason
  l10n_es_type
}
class "AccountTax" as odoo_src.odoo.addons.l10n_ke.models.account_tax.AccountTax {
  l10n_ke_item_code_id
}
class "AccountTax" as odoo_src.odoo.addons.l10n_it_edi_doi.models.account_tax.AccountTax {
}
class "AccountTax" as odoo_src.odoo.addons.l10n_in_withholding.models.account_tax.AccountTax {
  l10n_in_section_id
  l10n_in_tds_tax_type
}
class "AccountTax" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_tax.AccountTax {
  is_withholding_tax_on_payment
  price_include_override : str
  tax_exigibility : str
  withholding_sequence_id
}
class "AccountTax" as odoo_src.odoo.addons.hr_expense.models.account_tax.AccountTax {
}
class "AccountTax" as odoo_src.odoo.addons.l10n_my_edi.models.account_tax.AccountTax {
  l10n_my_tax_type
}
class "AccountTax" as odoo_src.odoo.addons.l10n_in_pos.models.account_tax.AccountTax {
}
class "AccountTax" as odoo_src.odoo.addons.l10n_be.models.account_tax.AccountTax {
  tax_scope
}
class "AccountTax" as odoo_src.odoo.addons.l10n_pe.models.account_tax.AccountTax {
  l10n_pe_edi_isc_type
  l10n_pe_edi_tax_code
  l10n_pe_edi_unece_category
}
class "AccountTax" as odoo_src.odoo.addons.point_of_sale.models.account_tax.AccountTax {
  write(vals)
}
class "AccountTax" as odoo_src.odoo.addons.l10n_account_withholding_tax_pos.models.account_tax.AccountTax {
}
class "AccountTax" as odoo_src.odoo.addons.l10n_sg_ubl_pint.models.account_tax.AccountTax {
  ubl_cii_tax_category_code
}
class "AccountTax" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.account_tax.AccountTax {
  l10n_es_applicability
}
class "AccountTax" as odoo_src.odoo.addons.l10n_hu_edi.models.account_tax.AccountTax {
  l10n_hu_tax_reason
  l10n_hu_tax_type
}
class "AccountTax" as odoo_src.odoo.addons.account.models.account_tax.AccountTax {
  active
  amount
  amount_type
  analytic
  cash_basis_transition_account_id
  children_tax_ids
  company_id
  company_price_include
  country_code
  country_id
  description
  has_negative_factor
  hide_tax_exigibility
  include_base_amount
  invoice_label
  invoice_legal_notes
  invoice_repartition_line_ids
  is_base_affected
  is_used
  name
  name_searchable
  price_include
  price_include_override
  refund_repartition_line_ids
  repartition_line_ids
  repartition_lines_str
  sequence
  tax_exigibility
  tax_group_id
  tax_scope
  type_tax_use
  compute_all(price_unit, currency, quantity, product, partner, is_refund, handle_price_include, include_caba_tags, rounding_method)
  copy_data(default)
  create(vals_list)
  flatten_taxes_hierarchy()
  get_tax_tags(is_refund, repartition_type)
  onchange_amount()
  onchange_amount_type()
  onchange_price_include()
  validate_tax_group_id()
  write(vals)
}
class "AccountTax" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.account_tax.AccountTax {
  l10n_es_edi_facturae_tax_type
}
class "AccountTax" as odoo_src.odoo.addons.l10n_it.models.account_tax.AccountTax {
  l10n_it_exempt_reason
  l10n_it_law_reference
}
class "AccountTax" as odoo_src.odoo.addons.l10n_ec.models.account_tax.AccountTax {
  l10n_ec_code_applied
  l10n_ec_code_ats
  l10n_ec_code_base
}
class "AccountTax" as odoo_src.odoo.addons.l10n_it_edi_withholding.models.account_tax.AccountTax {
  l10n_it_pension_fund_type
  l10n_it_withholding_reason
  l10n_it_withholding_type
}
class "AccountTax" as odoo_src.odoo.addons.l10n_jo_edi.models.account_tax.AccountTax {
}
class "AccountTax" as odoo_src.odoo.addons.l10n_ee.models.account_tax.AccountTax {
  l10n_ee_kmd_inf_code
}
class "AccountTax" as odoo_src.odoo.addons.l10n_in.models.account_tax.AccountTax {
  l10n_in_reverse_charge
  l10n_in_tax_type
}
class "AccountTaxGroup" as odoo_src.odoo.addons.l10n_ar.models.account_tax_group.AccountTaxGroup {
  l10n_ar_tribute_afip_code
  l10n_ar_vat_afip_code
  check_uninstall_required()
}
class "AccountTaxGroup" as odoo_src.odoo.addons.point_of_sale.models.account_tax_group.AccountTaxGroup {
}
class "AccountTaxGroup" as odoo_src.odoo.addons.account.models.account_tax.AccountTaxGroup {
  advance_tax_payment_account_id
  company_id
  country_code
  country_id
  name
  pos_receipt_label
  preceding_subtotal
  sequence
  tax_payable_account_id
  tax_receivable_account_id
}
class "AccountTaxGroup" as odoo_src.odoo.addons.l10n_ec.models.account_tax_group.AccountTaxGroup {
  l10n_ec_type
}
class "AccountTaxPython" as odoo_src.odoo.addons.account_tax_python.models.account_tax.AccountTaxPython {
  amount_type
  formula
  formula_decoded_info
}
class "AccountTaxRepartitionLine" as odoo_src.odoo.addons.account.models.account_tax.AccountTaxRepartitionLine {
  account_id
  company_id
  document_type
  factor
  factor_percent
  repartition_type
  sequence
  tag_ids
  tag_ids_domain
  tax_id
  use_in_tax_closing
}
class "AccountTestInvoicingCommon" as odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingCommon {
  chart_template : bool
  country_code : bool
  tax_number
  assertInvoiceValues(move, expected_lines_values, expected_move_values)
  assertXmlTreeEqual(xml_tree, expected_xml_tree)
  assert_invoice_outstanding_reconciled_widget(invoice, expected_amounts)
  assert_invoice_outstanding_to_reconcile_widget(invoice, expected_amounts)
  change_company_country(company, country)
  collect_company_accounting_data(company)
  copy_account(account, default)
  create_line_for_reconciliation(balance, amount_currency, currency, move_date, account_1, partner)
  division_tax(amount)
  enter_test_mode()
  fixed_tax(amount)
  get_default_groups()
  get_xml_tree_from_attachment(attachment)
  get_xml_tree_from_string(xml_tree_str)
  group_of_taxes(taxes)
  init_invoice(move_type, partner, invoice_date, post, products, amounts, taxes, company, currency, journal)
  init_payment(amount, post, date, partner, currency)
  percent_tax(amount)
  python_tax(formula)
  safe_copy(record)
  setUpClass()
  setup_armageddon_tax(tax_name, company_data)
  setup_chart_template(chart_template)
  setup_country(country_code)
  setup_independent_company()
  setup_independent_user()
  setup_other_company()
  setup_other_currency(code)
  with_applied_xpath(xml_tree, xpath)
}
class "AccountTestInvoicingHttpCommon" as odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingHttpCommon {
}
class "AccountTestMockOnlineSyncCommon" as odoo_src.odoo.addons.account.tests.common.AccountTestMockOnlineSyncCommon {
  mock_online_sync_favorite_institutions()
  start_tour(url_path, tour_name, step_delay)
}
class "AccountUpdateTaxTagsWizard" as odoo_src.odoo.addons.account_update_tax_tags.wizard.account_update_tax_tags_wizard.AccountUpdateTaxTagsWizard {
  company_id
  date_from
  display_lock_date_warning
  update_amls_tax_tags()
}
class "AccountWithholdingLine" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_withholding_line.AccountWithholdingLine {
  account_id
  amount
  base_amount
  comodel_company_currency_id
  comodel_currency_id
  comodel_date
  comodel_payment_type
  comodel_percentage_paid_factor
  company_id
  name
  original_base_amount
  original_tax_amount
  placeholder_type
  placeholder_value
  previous_placeholder_type
  source_base_amount
  source_base_amount_currency
  source_currency_id
  source_tax_amount
  source_tax_amount_currency
  source_tax_id
  tax_id
  type_tax_use
  withholding_sequence_id
}
class "AccountingAssertTest" as odoo_src.odoo.addons.account_test.models.accounting_assert_test.AccountingAssertTest {
  active
  code_exec
  desc
  name
  sequence
}
class "AccrualPlan" as odoo_src.odoo.addons.hr_holidays.models.hr_leave_accrual_plan.AccrualPlan {
  accrued_gain_time
  active
  added_value_type
  allocation_ids
  carryover_date
  carryover_day
  carryover_day_display
  carryover_month
  company_id
  employees_count
  is_based_on_worked_time
  level_count
  level_ids
  name
  show_transition_mode
  time_off_type_id
  transition_mode
  action_open_accrual_plan_employees()
  copy_data(default)
}
class "AccrualPlanLevel" as odoo_src.odoo.addons.hr_holidays_attendance.models.hr_leave_accrual_plan_level.AccrualPlanLevel {
  frequency_hourly_source
}
class "AccrualPlanLevel" as odoo_src.odoo.addons.hr_holidays.models.hr_leave_accrual_plan_level.AccrualPlanLevel {
  accrual_plan_id
  accrual_validity
  accrual_validity_count
  accrual_validity_type
  accrued_gain_time
  action_with_unused_accruals
  added_value
  added_value_type
  can_modify_value_type
  cap_accrued_time
  cap_accrued_time_yearly
  first_day
  first_day_display
  first_month
  first_month_day
  first_month_day_display
  frequency
  maximum_leave
  maximum_leave_yearly
  postpone_max_days
  second_day
  second_day_display
  second_month
  second_month_day
  second_month_day_display
  sequence
  start_count
  start_type
  week_day
  yearly_day
  yearly_day_display
  yearly_month
}
class "AccruedExpenseRevenue" as odoo_src.odoo.addons.account.wizard.accrued_orders.AccruedExpenseRevenue {
  account_id
  amount
  company_id
  currency_id
  date
  display_amount
  journal_id
  preview_data
  reversal_date
  create_entries()
}
class "ActWindowView" as odoo_src.odoo.addons.mail.models.ir_action_act_window.ActWindowView {
  view_mode
}
class "ActivityReport" as odoo_src.odoo.addons.crm.report.crm_activity_report.ActivityReport {
  active
  author_id
  body
  company_id
  country_id
  date
  date_closed
  date_conversion
  date_deadline
  lead_create_date
  lead_id
  lead_type
  mail_activity_type_id
  partner_id
  stage_id
  subtype_id
  tag_ids
  team_id
  user_id
  init()
}
class "ActivityScheduleCase" as odoo_src.odoo.addons.mail.tests.test_mail_activity.ActivityScheduleCase {
  activity_create_mocked
  assertActivitiesFromPlan(plan, record, expected_deadlines, expected_responsible)
  assertActivityCreatedOnRecord(record, activity_values)
  assertActivityDoneOnRecord(record, activity_type)
  assertMessagesFromPlan(plan, record, expected_deadlines, expected_responsible)
  assertPlanExecution(plan, records, expected_deadlines, expected_responsible)
  get_last_activities(on_record, limit)
  reverse_record_set(records)
  setUpClass()
}
class "ActivityScheduleHRCase" as odoo_src.odoo.addons.hr.tests.test_mail_activity_plan.ActivityScheduleHRCase {
  setUpClass()
}
class "AddPolicyData" as odoo_src.odoo.addons.auth_password_policy_signup.controllers.AddPolicyData {
  get_auth_signup_config()
}
class "AdyenCommon" as odoo_src.odoo.addons.payment_adyen.tests.common.AdyenCommon {
  setUpClass()
}
class "AdyenController" as odoo_src.odoo.addons.payment_adyen.controllers.main.AdyenController {
  adyen_payment_details(provider_id, reference, payment_details)
  adyen_payment_methods(provider_id, formatted_amount, partner_id)
  adyen_payments(provider_id, reference, converted_amount, currency_id, partner_id, payment_method, access_token, browser_info)
  adyen_return_from_3ds_auth()
  adyen_webhook()
}
class "AdyenTest" as odoo_src.odoo.addons.payment_adyen.tests.test_adyen.AdyenTest {
  test_accept_webhook_notification_with_valid_signature()
  test_failed_webhook_authorization_notification_leaves_transaction_in_draft()
  test_failed_webhook_cancellation_notification_leaves_transaction_authorized()
  test_failed_webhook_capture_notification_leaves_transaction_authorized()
  test_failed_webhook_refund_notification_sets_refund_transaction_in_error()
  test_get_tx_from_notification_data_creates_capture_tx_when_missing()
  test_get_tx_from_notification_data_creates_refund_tx_when_missing()
  test_get_tx_from_notification_data_creates_void_tx_when_missing()
  test_get_tx_from_notification_data_returns_partial_capture_child_tx()
  test_get_tx_from_notification_data_returns_refund_tx()
  test_get_tx_from_notification_data_returns_void_tx()
  test_no_information_missing_from_partner_address()
  test_processing_values()
  test_reject_webhook_notification_with_invalid_signature()
  test_reject_webhook_notification_with_missing_signature()
  test_send_full_capture_request_does_not_create_capture_tx()
  test_send_full_void_request_does_not_create_void_tx()
  test_send_partial_capture_request_creates_capture_tx()
  test_send_partial_void_request_creates_void_tx()
  test_send_refund_request()
  test_tx_state_after_send_full_capture_request()
  test_tx_state_after_send_partial_capture_request()
  test_tx_state_after_send_void_request()
  test_webhook_notification_authorizes_transaction()
  test_webhook_notification_cancels_transaction()
  test_webhook_notification_captures_transaction()
  test_webhook_notification_confirms_transaction()
  test_webhook_notification_refunds_transaction()
  test_webhook_notification_triggers_signature_check()
}
class "Alarm" as odoo_src.odoo.addons.calendar.models.calendar_alarm.Alarm {
  alarm_type
  body
  duration
  duration_minutes
  interval
  mail_template_id
  name
}
class "AlarmManager" as odoo_src.odoo.addons.calendar_sms.models.calendar_alarm_manager.AlarmManager {
}
class "AlarmManager" as odoo_src.odoo.addons.google_calendar.models.calendar_alarm_manager.AlarmManager {
}
class "AlarmManager" as odoo_src.odoo.addons.calendar.models.calendar_alarm_manager.AlarmManager {
  do_check_alarm_for_one_date(one_date, event, event_maxdelta, in_the_next_X_seconds, alarm_type, after, missing)
  do_notif_reminder(alert)
  get_next_notif()
}
class "AlarmManager" as odoo_src.odoo.addons.microsoft_calendar.models.calendar_alarm_manager.AlarmManager {
}
class "Algorithm" as odoo_src.odoo.addons.mail.tools.jwt.Algorithm {
  name
}
class "Alias" as odoo_src.odoo.addons.mail.models.mail_alias.Alias {
  alias_bounced_content
  alias_contact
  alias_defaults
  alias_domain
  alias_domain_id
  alias_force_thread_id
  alias_full_name
  alias_incoming_local
  alias_model_id
  alias_name
  alias_parent_model_id
  alias_parent_thread_id
  alias_status
  display_name
  create(vals_list)
  init()
  open_document()
  open_parent_document()
  write(vals)
}
class "Alias" as odoo_src.odoo.addons.hr.models.mail_alias.Alias {
  alias_contact
}
class "AliasDomain" as odoo_src.odoo.addons.mail.models.mail_alias_domain.AliasDomain {
  bounce_alias
  bounce_email
  catchall_alias
  catchall_email
  company_ids
  default_from
  default_from_email
  name
  sequence
  create(vals_list)
  write(vals)
}
class "AliasError" as odoo_src.odoo.addons.mail.tools.alias_error.AliasError {
  code : str
  is_config_error : bool
  message : str
}
class "AliasMixin" as odoo_src.odoo.addons.mail.models.mail_alias_mixin.AliasMixin {
  alias_defaults
  alias_id
  alias_name
}
class "AliasMixinOptional" as odoo_src.odoo.addons.mail.models.mail_alias_mixin_optional.AliasMixinOptional {
  ALIAS_WRITEABLE_FIELDS : list
  alias_defaults
  alias_domain
  alias_domain_id
  alias_email
  alias_id
  alias_name
  copy_data(default)
  create(vals_list)
  unlink()
  write(vals)
}
class "AnalyticCommon" as odoo_src.odoo.addons.analytic.tests.common.AnalyticCommon {
  get_default_groups()
  setUpClass()
  setup_independent_company()
  setup_independent_user()
}
class "AnalyticMixin" as odoo_src.odoo.addons.analytic.models.analytic_mixin.AnalyticMixin {
  analytic_distribution
  analytic_precision
  distribution_analytic_account_ids
  create(vals_list)
  filtered_domain(domain)
  init()
  mapped(func)
  write(vals)
}
class "AnalyticPlanFields" as odoo_src.odoo.addons.analytic.models.analytic_line.AnalyticPlanFields {
  account_id
  auto_account_id
  fields_get(allfields, attributes)
}
class "Applicant" as odoo_src.odoo.addons.hr_recruitment_survey.models.hr_applicant.Applicant {
  partner_id
  response_ids
  survey_id
  action_print_survey()
  action_send_survey()
}
class "Applicant" as odoo_src.odoo.addons.hr_recruitment.models.hr_applicant.Applicant {
  active
  applicant_notes
  applicant_properties
  application_status
  attachment_ids
  attachment_number
  availability
  campaign_id
  candidate_id
  categ_ids
  color
  company_id
  create_date
  date_closed
  date_last_stage_update
  date_open
  day_close
  day_open
  delay_close
  department_id
  email_from
  email_normalized
  emp_is_active
  employee_id
  employee_name
  interviewer_ids
  job_id
  kanban_state
  last_stage_id
  legend_blocked
  legend_done
  legend_normal
  linkedin_profile
  medium_id
  meeting_display_date
  meeting_display_text
  meeting_ids
  other_applications_count
  partner_id
  partner_name
  partner_phone
  partner_phone_sanitized
  priority
  probability
  refuse_date
  refuse_reason_id
  salary_expected
  salary_expected_extra
  salary_proposed
  salary_proposed_extra
  source_id
  stage_id
  type_id
  user_email
  user_id
  action_create_meeting()
  action_open_attachments()
  action_open_employee()
  action_open_other_applications()
  action_send_email()
  archive_applicant()
  create(vals_list)
  create_employee_from_applicant()
  get_empty_list_help(help_message)
  get_view(view_id, view_type)
  init()
  message_new(msg, custom_values)
  reset_applicant()
  toggle_active()
  write(vals)
}
class "ApplicantCategory" as odoo_src.odoo.addons.hr_recruitment.models.hr_applicant_category.ApplicantCategory {
  color
  name
}
class "ApplicantGetRefuseReason" as odoo_src.odoo.addons.hr_recruitment.wizard.applicant_refuse_reason.ApplicantGetRefuseReason {
  applicant_emails
  applicant_ids
  applicant_without_email
  duplicates
  duplicates_count
  refuse_reason_id
  send_mail
  single_applicant_email
  template_id
  action_refuse_reason_apply()
}
class "ApplicantRefuseReason" as odoo_src.odoo.addons.hr_recruitment.models.hr_applicant_refuse_reason.ApplicantRefuseReason {
  active
  name
  sequence
  template_id
}
class "ApplicantSendMail" as odoo_src.odoo.addons.hr_recruitment.wizard.applicant_send_mail.ApplicantSendMail {
  applicant_ids
  attachment_ids
  author_id
  render_model : str
  action_send()
}
class "ApplicantSurvey" as odoo_src.odoo.addons.hr_recruitment_survey.controllers.main.ApplicantSurvey {
}
class "AsiaPayCommon" as odoo_src.odoo.addons.payment_asiapay.tests.common.AsiaPayCommon {
  setUpClass()
}
class "AsiaPayController" as odoo_src.odoo.addons.payment_asiapay.controllers.main.AsiaPayController {
  asiapay_return_from_checkout()
  asiapay_webhook()
}
class "Asn1Node" as odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Asn1Node {
  children : list
  cls
  content
  end_offset
  finalized : bool
  kind
  length
  name : str
  parent : NoneType
  start_offset
  finalize(end_offset, content)
  total_length()
}
class "<color:red>AssetError</color>" as odoo_src.odoo.addons.base.models.assetsbundle.AssetError {
}
class "<color:red>AssetNotFound</color>" as odoo_src.odoo.addons.base.models.assetsbundle.AssetNotFound {
}
class "AssetPaths" as odoo_src.odoo.addons.base.models.ir_asset.AssetPaths {
  list : list
  memo : set
  append(paths, bundle)
  index(path, bundle)
  insert(paths, bundle, index)
  remove(paths_to_remove, bundle)
}
class "AssetsBundle" as odoo_src.odoo.addons.base.models.assetsbundle.AssetsBundle {
  TRACKED_BUNDLES : list
  assets_params : dict
  css_errors : list
  env : NoneType
  external_assets
  files
  has_css : bool
  has_js : bool
  is_debug_assets : bool
  javascripts : list
  name
  rtl : bool
  rx_css_import
  rx_css_split
  rx_preprocess_imports
  stylesheets : list
  templates : list
  compile_css(compiler, source)
  css()
  css_with_sourcemap(content_import_rules)
  generate_xml_bundle()
  get_asset_url(unique, extension, ignore_params)
  get_attachments(extension, ignore_version)
  get_checksum(asset_type)
  get_link(asset_type)
  get_links()
  get_preprocessor_error(stderr, source)
  get_rtlcss_error(stderr, source)
  get_version(asset_type)
  is_css(extension)
  js()
  js_with_sourcemap(template_bundle)
  preprocess_css(debug, old_attachments)
  run_rtlcss(source)
  save_attachment(extension, content)
  xml()
}
class "AsyncHTTPHandler" as odoo_src.odoo.addons.hw_drivers.server_logger.AsyncHTTPHandler {
  close()
  emit(record)
  toggle_active(is_active)
}
class "AttachmentController" as odoo_src.odoo.addons.mail.controllers.attachment.AttachmentController {
  mail_attachment_delete(attachment_id, access_token)
  mail_attachment_get_zip(file_ids, zip_name)
  mail_attachment_upload(ufile, thread_id, thread_model, is_pending)
}
class "Attendee" as odoo_src.odoo.addons.google_calendar.models.calendar_attendee.Attendee {
  do_accept()
  do_decline()
  do_tentative()
}
class "Attendee" as odoo_src.odoo.addons.calendar.models.calendar_attendee.Attendee {
  STATE_SELECTION : list
  access_token
  availability
  common_name
  email
  event_id
  mail_tz
  partner_id
  phone
  recurrence_id
  state
  copy(default)
  create(vals_list)
  do_accept()
  do_decline()
  do_tentative()
  unlink()
}
class "Attendee" as odoo_src.odoo.addons.microsoft_calendar.models.calendar_attendee.Attendee {
  do_accept()
  do_decline()
  do_tentative()
}
class "AuthBaseSetup" as odoo_src.odoo.addons.auth_signup.controllers.main.AuthBaseSetup {
  base_setup_data()
}
class "AuthOAuthProvider" as odoo_src.odoo.addons.auth_oauth.models.auth_oauth.AuthOAuthProvider {
  auth_endpoint
  body
  client_id
  css_class
  data_endpoint
  enabled
  name
  scope
  sequence
  validation_endpoint
}
class "AuthSignupHome" as odoo_src.odoo.addons.auth_signup.controllers.main.AuthSignupHome {
  do_signup(qcontext)
  get_auth_signup_config()
  get_auth_signup_qcontext()
  web_auth_reset_password()
  web_auth_signup()
  web_login()
}
class "AuthTotpDevice" as odoo_src.odoo.addons.auth_totp_mail.models.auth_totp_device.AuthTotpDevice {
  unlink()
}
class "AuthTotpDevice" as odoo_src.odoo.addons.auth_totp.models.auth_totp.AuthTotpDevice {
}
class "AuthTotpRateLimitLog" as odoo_src.odoo.addons.auth_totp_mail_enforce.models.auth_totp_rate_limit_log.AuthTotpRateLimitLog {
  ip
  limit_type
  scope
  user_id
  init()
}
class "Authenticate" as odoo_src.odoo.addons.mail_plugin.controllers.authenticate.Authenticate {
  auth()
  auth_access_token(auth_code)
  auth_confirm(scope, friendlyname, redirect, info, do)
}
class "AuthorizeAPI" as odoo_src.odoo.addons.payment_authorize.models.authorize_request.AuthorizeAPI {
  AUTH_ERROR_STATUS : str
  name
  state
  transaction_key
  url : str
  auth_and_capture(tx, token, opaque_data)
  authorize(tx, token, opaque_data)
  capture(transaction_id, amount)
  create_customer_profile(partner, transaction_id)
  delete_customer_profile(profile_id)
  get_transaction_details(transaction_id)
  merchant_details()
  refund(transaction_id, amount, tx_details)
  test_authenticate()
  void(transaction_id)
}
class "AuthorizeCommon" as odoo_src.odoo.addons.payment_authorize.tests.common.AuthorizeCommon {
  setUpClass()
}
class "AuthorizeController" as odoo_src.odoo.addons.payment_authorize.controllers.main.AuthorizeController {
  authorize_payment(reference, partner_id, access_token, opaque_data)
}
class "AuthorizeTest" as odoo_src.odoo.addons.payment_authorize.tests.test_authorize.AuthorizeTest {
  test_compatible_providers()
  test_processing_values()
  test_validation()
  test_voiding_confirmed_tx_cancels_it()
}
class "AutoPostBillsWizard" as odoo_src.odoo.addons.account.wizard.account_autopost_bills_wizard.AutoPostBillsWizard {
  nb_unmodified_bills
  partner_id
  partner_name
  action_ask_later()
  action_automate_partner()
  action_never_automate_partner()
}
class "AutoVacuum" as odoo_src.odoo.addons.base.models.ir_autovacuum.AutoVacuum {
}
class "AutomaticEntryWizard" as odoo_src.odoo.addons.account_fleet.wizard.account_automatic_entry_wizard.AutomaticEntryWizard {
}
class "AutomaticEntryWizard" as odoo_src.odoo.addons.account.wizard.account_automatic_entry_wizard.AutomaticEntryWizard {
  account_type
  action
  company_currency_id
  company_id
  date
  destination_account_id
  display_currency_helper
  expense_accrual_account
  journal_id
  lock_date_message
  move_data
  move_line_ids
  percentage
  preview_move_data
  revenue_accrual_account
  total_amount
  default_get(fields)
  do_action()
}
class "AvatarMixin" as odoo_src.odoo.addons.base.models.avatar_mixin.AvatarMixin {
  avatar_1024
  avatar_128
  avatar_1920
  avatar_256
  avatar_512
}
class "<color:red>BadModuleState</color>" as odoo_src.odoo.addons.base.models.ir_cron.BadModuleState {
}
class "<color:red>BadVersion</color>" as odoo_src.odoo.addons.base.models.ir_cron.BadVersion {
}
class "BadgeUser" as odoo_src.odoo.addons.gamification.models.gamification_badge_user.BadgeUser {
  badge_id
  badge_name
  challenge_id
  comment
  level
  sender_id
  user_id
  create(vals_list)
}
class "Bank" as odoo_src.odoo.addons.l10n_mx.models.res_bank.Bank {
  fiscal_country_codes
  l10n_mx_edi_code
}
class "Bank" as odoo_src.odoo.addons.base.models.res_bank.Bank {
  active
  bic
  city
  country
  country_code
  email
  name
  phone
  state
  street
  street2
  zip
}
class "<color:red>BarcodeCodeError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.BarcodeCodeError {
  msg : str
  resultcode : int
}
class "BarcodeConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.BarcodeConverter {
  get_available_options()
  value_to_html(value, options)
}
class "BarcodeEventsMixin" as odoo_src.odoo.addons.barcodes.models.barcode_events_mixin.BarcodeEventsMixin {
  {abstract}on_barcode_scanned(barcode)
}
class "BarcodeNomenclature" as odoo_src.odoo.addons.barcodes_gs1_nomenclature.models.barcode_nomenclature.BarcodeNomenclature {
  gs1_separator_fnc1
  is_gs1_nomenclature
  gs1_date_to_date(gs1_date)
  gs1_decompose_extanded(barcode)
  parse_gs1_rule_pattern(match, rule)
  parse_nomenclature_barcode(barcode)
}
class "BarcodeNomenclature" as odoo_src.odoo.addons.barcodes.models.barcode_nomenclature.BarcodeNomenclature {
  name
  rule_ids
  upc_ean_conv
  match_pattern(barcode, pattern)
  parse_barcode(barcode)
  parse_nomenclature_barcode(barcode)
  parse_uri(barcode)
  sanitize_ean(ean)
  sanitize_upc(upc)
}
class "BarcodeRule" as odoo_src.odoo.addons.barcodes_gs1_nomenclature.models.barcode_rule.BarcodeRule {
  associated_uom_id
  encoding
  gs1_content_type
  gs1_decimal_usage
  is_gs1_nomenclature
  type
}
class "BarcodeRule" as odoo_src.odoo.addons.point_of_sale.models.barcode_rule.BarcodeRule {
  type
}
class "BarcodeRule" as odoo_src.odoo.addons.barcodes.models.barcode_rule.BarcodeRule {
  alias
  barcode_nomenclature_id
  encoding
  name
  pattern
  sequence
  type
}
class "<color:red>BarcodeSizeError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.BarcodeSizeError {
  msg : str
  resultcode : int
}
class "<color:red>BarcodeTypeError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.BarcodeTypeError {
  msg : str
  resultcode : int
}
class "Base" as odoo_src.odoo.addons.base_import.models.base_import.Base {
  get_import_templates()
}
class "Base" as odoo_src.odoo.addons.base_sparse_field.models.models.Base {
}
class "Base" as odoo_src.odoo.addons.base.models.ir_model.Base {
}
class "BaseAutomation" as odoo_src.odoo.addons.base_automation.models.base_automation.BaseAutomation {
  CRITICAL_FIELDS : list
  RANGE_FIELDS : list
  action_server_ids
  active
  description
  filter_domain
  filter_pre_domain
  last_run
  least_delay_msg
  log_webhook_calls
  model_id
  model_is_mail_thread
  model_name
  name
  on_change_field_ids
  record_getter
  trg_date_calendar_id
  trg_date_id
  trg_date_range
  trg_date_range_type
  trg_field_ref
  trg_field_ref_model_name
  trg_selection_field_id
  trigger
  trigger_field_ids
  url
  webhook_uuid
  action_rotate_webhook_uuid()
  action_view_webhook_logs()
  copy(default)
  create(vals_list)
  unlink()
  write(vals: dict)
}
class "BaseAutomationController" as odoo_src.odoo.addons.base_automation.controllers.main.BaseAutomationController {
  call_webhook_http(rule_uuid)
}
class "BaseCommon" as odoo_src.odoo.addons.base.tests.common.BaseCommon {
  default_env_context()
  get_default_groups()
  setUpClass()
  setup_independent_company()
  setup_independent_user()
  setup_main_company(currency_code)
  setup_other_currency(code)
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_din5008.models.base_document_layout.BaseDocumentLayout {
  account_fiscal_country_id
  bank_ids
  city
  company_details
  company_registry
  l10n_din5008_delivery_date
  l10n_din5008_due_date
  l10n_din5008_invoice_date
  report_footer
  street
  street2
  zip
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_ma.models.base_document_layout.BaseDocumentLayout {
  company_details
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_sk.models.res_company.BaseDocumentLayout {
  account_fiscal_country_id
  company_registry
  income_tax_id
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_my_ubl_pint.models.res_company.BaseDocumentLayout {
  account_fiscal_country_id
  sst_registration_number
  ttx_registration_number
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_mu_account.models.base_document_layout.BaseDocumentLayout {
  company_details
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.account.wizard.base_document_layout.BaseDocumentLayout {
  account_number
  from_invoice
  qr_code
  vat
  document_layout_save()
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_ca.models.res_company.BaseDocumentLayout {
  account_fiscal_country_id
  l10n_ca_pst
}
class "BaseDocumentLayout" as odoo_src.odoo.addons.l10n_cz.models.res_company.BaseDocumentLayout {
  account_fiscal_country_id
  company_registry
}
class "BaseImportModule" as odoo_src.odoo.addons.base_import_module.models.base_import_module.BaseImportModule {
  force
  import_message
  module_file
  modules_dependencies
  state
  with_demo
  action_module_open()
  get_dependencies_to_install_names()
  import_module()
}
class "BaseLanguageExport" as odoo_src.odoo.addons.base.wizard.base_export_language.BaseLanguageExport {
  data
  domain
  export_type
  format
  lang
  model_id
  model_name
  modules
  name
  state
  act_getfile()
}
class "BaseLanguageImport" as odoo_src.odoo.addons.base.wizard.base_import_language.BaseLanguageImport {
  code
  data
  filename
  name
  overwrite
  import_lang()
}
class "BaseLanguageInstall" as odoo_src.odoo.addons.base.wizard.base_language_install.BaseLanguageInstall {
  first_lang_id
  lang_ids
  overwrite
  lang_install()
  reload()
  switch_lang()
}
class "BaseModel" as odoo_src.odoo.addons.mail.models.models.BaseModel {
  mail_allowed_qweb_expressions()
}
class "BaseModel" as odoo_src.odoo.addons.phone_validation.models.models.BaseModel {
}
class "BaseModel" as odoo_src.odoo.addons.hr.models.models.BaseModel {
}
class "BaseModuleInstallRequest" as odoo_src.odoo.addons.base_install_request.wizard.base_module_install_request.BaseModuleInstallRequest {
  body_html
  module_id
  user_id
  user_ids
  action_send_request()
}
class "BaseModuleInstallReview" as odoo_src.odoo.addons.base_install_request.wizard.base_module_install_request.BaseModuleInstallReview {
  module_id
  module_ids
  modules_description
  action_install_module()
}
class "BaseModuleUninstall" as odoo_src.odoo.addons.mail.wizard.base_module_uninstall.BaseModuleUninstall {
}
class "BaseModuleUninstall" as odoo_src.odoo.addons.base_import_module.wizard.base_module_uninstall.BaseModuleUninstall {
}
class "BaseModuleUninstall" as odoo_src.odoo.addons.base.wizard.base_module_uninstall.BaseModuleUninstall {
  model_ids
  module_id
  module_ids
  show_all
  action_uninstall()
}
class "BaseModuleUpdate" as odoo_src.odoo.addons.base.wizard.base_module_update.BaseModuleUpdate {
  added
  state
  updated
  action_module_open()
  update_module()
}
class "BaseModuleUpgrade" as odoo_src.odoo.addons.base.wizard.base_module_upgrade.BaseModuleUpgrade {
  module_info
  config()
  get_module_list()
  get_view(view_id, view_type)
  upgrade_module()
  upgrade_module_cancel()
}
class "BaseSetup" as odoo_src.odoo.addons.base_setup.controllers.main.BaseSetup {
  base_setup_data()
  base_setup_is_demo()
}
class "BaseURL" as odoo_src.odoo._monkeypatches.werkzeug_urls.BaseURL {
  ascii_host
  auth
  host
  password
  port
  raw_password
  raw_username
  username
  decode_netloc() -> str
  decode_query() -> ds.MultiDict[str, str]
  encode_netloc() -> str
  get_file_location(pathformat: str | None) -> tuple[str | None, str | None]
  join() -> BaseURL
  replace() -> BaseURL
  to_url() -> str
}
class "BaseUsersCommon" as odoo_src.odoo.addons.base.tests.common.BaseUsersCommon {
  setUpClass()
}
class "Bill" as odoo_src.odoo.addons.point_of_sale.models.pos_bill.Bill {
  for_all_config
  name
  pos_config_ids
  value
  name_create(name)
}
class "BinaryController" as odoo_src.odoo.addons.mail.controllers.discuss.binary.BinaryController {
  content_image()
  discuss_channel_attachment(channel_id, attachment_id, download)
  fetch_image(channel_id, attachment_id, width, height)
}
class "BlobQueryStringConstants" as odoo_src.odoo.addons.cloud_storage_azure.utils.cloud_storage_azure_utils.BlobQueryStringConstants {
  SIGNED_TIMESTAMP : str
}
class "Board" as odoo_src.odoo.addons.board.models.board.Board {
  id
  create(vals_list)
  get_view(view_id, view_type)
}
class "Board" as odoo_src.odoo.addons.board.controllers.main.Board {
  add_to_dashboard(action_id, context_to_save, domain, view_mode, name)
}
class "Box" as odoo_src.odoo.addons.base.tests.test_reports.Box {
  bottom
  end_left
  end_top
  height
  left
  page_height
  page_width
  right
  top
  width
  x1
  x2
  y1
  y2
}
class "Browser" as odoo_src.odoo.addons.hw_drivers.browser.Browser {
  browser : str
  browser_process_name : str
  env
  state : NORMAL
  url
  close_browser()
  disable_kiosk_mode()
  open_browser(url, state)
  open_new_tab(url)
  refresh()
  xdotool_keystroke(keystroke)
  xdotool_type(text)
}
class "BrowserState" as odoo_src.odoo.addons.hw_drivers.browser.BrowserState {
  name
}
class "BuckarooCommon" as odoo_src.odoo.addons.payment_buckaroo.tests.common.BuckarooCommon {
  setUpClass()
}
class "BuckarooController" as odoo_src.odoo.addons.payment_buckaroo.controllers.main.BuckarooController {
  buckaroo_return_from_checkout()
  buckaroo_webhook()
}
class "BuckarooTest" as odoo_src.odoo.addons.payment_buckaroo.tests.test_buckaroo.BuckarooTest {
  reference : str
  test_accept_notification_with_valid_signature()
  test_feedback_processing()
  test_redirect_form_values()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_signature_is_computed_based_on_lower_case_data_keys()
  test_webhook_notification_confirms_transaction()
  test_webhook_notification_triggers_signature_check()
}
class "BusController" as odoo_src.odoo.addons.bus.controllers.main.BusController {
  get_autovacuum_info()
  get_model_definitions(model_names_to_fetch)
  has_missed_notifications(last_notification_id)
}
class "BusListenerMixin" as odoo_src.odoo.addons.mail.models.bus_listener_mixin.BusListenerMixin {
}
class "BusListenerMixin" as odoo_src.odoo.addons.mail.models.discuss.bus_listener_mixin.BusListenerMixin {
}
class "BusListenerMixin" as odoo_src.odoo.addons.bus.models.bus_listener_mixin.BusListenerMixin {
}
class "BusPresence" as odoo_src.odoo.addons.mail.models.bus_presence.BusPresence {
  guest_id
  init()
}
class "BusPresence" as odoo_src.odoo.addons.bus.models.bus_presence.BusPresence {
  last_poll
  last_presence
  status
  user_id
  create(values)
  init()
  unlink()
  update_presence(inactivity_period, identity_field, identity_value)
  write(values)
}
class "BusSubscription" as odoo_src.odoo.addons.bus.models.bus.BusSubscription {
  channels
  last_notification_id
}
class "BusWebTests" as odoo_src.odoo.addons.bus.tests.test_assetsbundle.BusWebTests {
  test_bundle_sends_bus()
}
class "BytesURL" as odoo_src.odoo._monkeypatches.werkzeug_urls.BytesURL {
  decode(charset: str, errors: str) -> URL
  encode_netloc() -> bytes
}
class "CRMHelpers" as odoo_src.odoo.addons.crm_iap_mine.models.crm_iap_lead_helpers.CRMHelpers {
  lead_vals_from_response(lead_type, team_id, tag_ids, user_id, company_data, people_data)
  notify_no_more_credit(service_name, model_name, notification_parameter)
}
class "CRMLeadMiningRequest" as odoo_src.odoo.addons.crm_iap_mine.models.crm_iap_lead_mining_request.CRMLeadMiningRequest {
  available_state_ids
  company_size_max
  company_size_min
  contact_filter_type
  contact_number
  country_ids
  error_type
  filter_on_size
  industry_ids
  lead_contacts_credits
  lead_count
  lead_credits
  lead_ids
  lead_number
  lead_total_credits
  lead_type
  name
  preferred_role_id
  role_ids
  search_type
  seniority_id
  state
  state_ids
  tag_ids
  team_id
  user_id
  action_buy_credits()
  action_draft()
  action_get_lead_action()
  action_get_opportunity_action()
  action_submit()
  get_empty_list_help(help_message)
}
class "CalendarAlarm" as odoo_src.odoo.addons.calendar_sms.models.calendar_alarm.CalendarAlarm {
  alarm_type
  name
  sms_notify_responsible
  sms_template_id
}
class "CalendarController" as odoo_src.odoo.addons.calendar.controllers.main.CalendarController {
  accept_meeting(token, id)
  accept_recurrence(token, id)
  calendar_join_meeting(token)
  calendar_join_videocall(access_token)
  check_calendar_credentials()
  decline_meeting(token, id)
  decline_recurrence(token, id)
  notify()
  notify_ack()
  view_meeting(token, id)
}
class "CalendarEvent" as odoo_src.odoo.addons.calendar_sms.models.calendar_event.CalendarEvent {
  action_send_sms()
}
class "CalendarEvent" as odoo_src.odoo.addons.hr_recruitment.models.calendar.CalendarEvent {
  applicant_id
  candidate_id
  create(vals_list)
  default_get(fields)
}
class "CalendarEvent" as odoo_src.odoo.addons.crm.models.calendar.CalendarEvent {
  opportunity_id
  create(vals)
  default_get(fields)
}
class "CalendarEvent" as odoo_src.odoo.addons.hr_holidays.models.calendar_event.CalendarEvent {
}
class "CalendarEvent" as odoo_src.odoo.addons.hr_calendar.models.calendar_event.CalendarEvent {
  unavailable_partner_ids
  get_unusual_days(date_from, date_to)
}
class "CalendarLeaves" as odoo_src.odoo.addons.hr_holidays.models.resource.CalendarLeaves {
  holiday_id
  create(vals_list)
  unlink()
  write(vals)
}
class "CalendarProviderConfig" as odoo_src.odoo.addons.calendar.wizard.calendar_provider_config.CalendarProviderConfig {
  cal_client_id
  cal_client_secret
  cal_sync_paused
  external_calendar_provider
  microsoft_outlook_client_identifier
  microsoft_outlook_client_secret
  microsoft_outlook_sync_paused
  action_calendar_prepare_external_provider_sync()
}
class "CalendarProviderConfig" as odoo_src.odoo.addons.calendar.wizard.calendar_popover_delete_wizard.CalendarProviderConfig {
  delete
  record
  close()
}
class "CandidateSendMail" as odoo_src.odoo.addons.hr_recruitment.wizard.candidate_send_mail.CandidateSendMail {
  attachment_ids
  author_id
  candidate_ids
  render_model : str
  action_send()
}
class "CandidateSkill" as odoo_src.odoo.addons.hr_recruitment_skills.models.hr_candidate_skill.CandidateSkill {
  candidate_id
  level_progress
  skill_id
  skill_level_id
  skill_type_id
}
class "CardCampaign" as odoo_src.odoo.addons.marketing_card.models.card_campaign.CardCampaign {
  active
  body_html
  card_click_count
  card_count
  card_ids
  card_share_count
  card_template_id
  content_background
  content_button
  content_header
  content_header_color
  content_header_dyn
  content_header_path
  content_image1_path
  content_image2_path
  content_section
  content_section_dyn
  content_section_path
  content_sub_header
  content_sub_header_color
  content_sub_header_dyn
  content_sub_header_path
  content_sub_section1
  content_sub_section1_dyn
  content_sub_section1_path
  content_sub_section2
  content_sub_section2_dyn
  content_sub_section2_path
  image_preview
  link_tracker_id
  mailing_count
  mailing_ids
  name
  post_suggestion
  preview_record_ref
  request_description
  request_title
  res_model
  reward_message
  reward_target_url
  tag_ids
  target_url
  target_url_click_count
  user_id
  action_preview()
  action_share()
  action_view_cards()
  action_view_cards_clicked()
  action_view_cards_shared()
  action_view_mailings()
  create(create_vals)
  write(vals)
}
class "CardCampaignTag" as odoo_src.odoo.addons.marketing_card.models.card_campaign_tag.CardCampaignTag {
  color
  name
}
class "CardCampaignTemplate" as odoo_src.odoo.addons.marketing_card.models.card_template.CardCampaignTemplate {
  body
  default_background
  name
  primary_color
  primary_text_color
  secondary_color
  secondary_text_color
}
class "<color:red>CashDrawerError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.CashDrawerError {
  msg : str
  resultcode : int
}
class "CashmoveReport" as odoo_src.odoo.addons.lunch.report.lunch_cashmove_report.CashmoveReport {
  amount
  currency_id
  date
  description
  id
  user_id
  init()
}
class "Certificate" as odoo_src.odoo.addons.l10n_sa_edi.models.certificate.Certificate {
}
class "Certificate" as odoo_src.odoo.addons.l10n_es_edi_sii.models.certificate.Certificate {
  scope
}
class "Certificate" as odoo_src.odoo.addons.certificate.models.certificate.Certificate {
  active
  company_id
  content
  content_format
  country_code
  date_end
  date_start
  is_valid
  loading_error
  name
  pem_certificate
  pkcs12_password
  private_key_id
  public_key_id
  scope
  serial_number
  subject_common_name
}
class "Certificate" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.certificate.Certificate {
  scope
}
class "Certificate" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.certificate.Certificate {
  scope
}
class "Certificate" as odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.Certificate {
  cert : Path
  key
}
class "Certificate" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.certificate.Certificate {
  scope
}
class "CertificateAdapter" as odoo_src.odoo.addons.certificate.tools.certificate_adapter.CertificateAdapter {
  cert_verify(conn, url, verify, cert)
  get_connection(url, proxies)
  init_poolmanager()
}
class "Challenge" as odoo_src.odoo.addons.gamification.models.gamification_challenge.Challenge {
  REPORT_OFFSETS : dict
  challenge_category
  description
  end_date
  invited_user_ids
  last_report_date
  line_ids
  manager_id
  name
  next_report_date
  period
  remind_update_delay
  report_message_frequency
  report_message_group_id
  report_template_id
  reward_failure
  reward_first_id
  reward_id
  reward_realtime
  reward_second_id
  reward_third_id
  start_date
  state
  user_count
  user_domain
  user_ids
  visibility_mode
  accept_challenge()
  action_check()
  action_report_progress()
  action_start()
  action_view_users()
  create(vals_list)
  default_get(fields_list)
  discard_challenge()
  report_progress(users, subset_goals)
  write(vals)
}
class "ChallengeLine" as odoo_src.odoo.addons.gamification.models.gamification_challenge_line.ChallengeLine {
  challenge_id
  condition
  definition_full_suffix
  definition_id
  definition_monetary
  definition_suffix
  name
  sequence
  target_goal
}
class "ChangePasswordOwn" as odoo_src.odoo.addons.base.models.res_users.ChangePasswordOwn {
  confirm_password
  new_password
  change_password()
}
class "ChangePasswordUser" as odoo_src.odoo.addons.base.models.res_users.ChangePasswordUser {
  new_passwd
  user_id
  user_login
  wizard_id
  change_password_button()
}
class "ChangePasswordWizard" as odoo_src.odoo.addons.base.models.res_users.ChangePasswordWizard {
  user_ids
  change_password_button()
}
class "ChangeProductionQty" as odoo_src.odoo.addons.mrp_subcontracting.wizard.change_production_qty.ChangeProductionQty {
}
class "ChangeProductionQty" as odoo_src.odoo.addons.mrp.wizard.change_production_qty.ChangeProductionQty {
  mo_id
  product_qty
  change_prod_qty()
  default_get(fields)
}
class "Channel" as odoo_src.odoo.addons.mail_bot.models.discuss_channel.Channel {
  execute_command_help()
}
class "Channel" as odoo_src.odoo.addons.mail.models.discuss.discuss_channel.Channel {
  MAX_BOUNCE_LIMIT : int
  active
  allow_public_upload
  avatar_128
  avatar_cache_key
  channel_member_ids
  channel_partner_ids
  channel_type
  default_display_mode
  description
  from_message_id
  group_ids
  group_public_id
  image_128
  invitation_url
  is_editable
  is_member
  last_interest_dt
  member_count
  name
  parent_channel_id
  pinned_message_ids
  rtc_session_ids
  sfu_channel_uuid
  sfu_server_url
  sub_channel_ids
  uuid
  action_unfollow()
  add_members(partner_ids, guest_ids, invite_to_rtc_call, open_chat_window, post_joined_message)
  channel_change_description(description)
  channel_create(name, group_id)
  channel_fetched()
  channel_get(partners_to, pin, force_open)
  channel_join()
  channel_pin(pinned)
  channel_rename(name)
  channel_set_custom_name(name)
  create(vals_list)
  create_group(partners_to, default_display_mode, name)
  execute_command_help()
  execute_command_leave()
  execute_command_who()
  get_mention_suggestions(search, limit)
  init()
  message_post()
  set_message_pin(message_id, pinned)
  write(vals)
}
class "Channel" as odoo_src.odoo.addons.hr_skills_slides.models.slide_channel.Channel {
}
class "Channel" as odoo_src.odoo.addons.hr.models.discuss_channel.Channel {
  subscription_department_ids
  write(vals)
}
class "ChannelController" as odoo_src.odoo.addons.mail.controllers.discuss.channel.ChannelController {
  discuss_channel_avatar_update(channel_id, data)
  discuss_channel_fold(channel_id, state, state_count)
  discuss_channel_info(channel_id)
  discuss_channel_join(channel_id)
  discuss_channel_mark_as_read(channel_id, last_message_id, sync)
  discuss_channel_mark_as_unread(channel_id, message_id)
  discuss_channel_members(channel_id, known_member_ids)
  discuss_channel_messages(channel_id, search_term, before, after, limit, around)
  discuss_channel_notify_typing(channel_id, is_typing)
  discuss_channel_pins(channel_id)
  discuss_channel_sub_channel_create(parent_channel_id, from_message_id, name)
  discuss_channel_sub_channel_fetch(parent_channel_id, search_term, before, limit)
  load_attachments(channel_id, limit, before)
}
class "ChannelMember" as odoo_src.odoo.addons.im_livechat.models.discuss_channel_member.ChannelMember {
}
class "ChannelMember" as odoo_src.odoo.addons.mail.models.discuss.discuss_channel_member.ChannelMember {
  channel_id
  custom_channel_name
  custom_notifications
  fetched_message_id
  fold_state
  guest_id
  is_pinned
  is_self
  last_interest_dt
  last_seen_dt
  message_unread_counter
  mute_until_dt
  new_message_separator
  partner_id
  rtc_inviting_session_id
  rtc_session_ids
  seen_message_id
  unpin_dt
  create(vals_list)
  init()
  set_custom_notifications(custom_notifications)
  unlink()
  write(vals)
}
class "ChatbotCase" as odoo_src.odoo.addons.im_livechat.tests.chatbot_common.ChatbotCase {
  setUpClass()
}
class "ChatbotCase" as odoo_src.odoo.addons.im_livechat.tests.test_chatbot_internals.ChatbotCase {
  test_chatbot_clear_answers_on_step_type_change()
  test_chatbot_duplicate()
  test_chatbot_is_forward_operator_child()
  test_chatbot_multiple_rules_on_same_url()
  test_chatbot_not_invited_to_rtc_calls()
  test_chatbot_steps()
  test_chatbot_steps_sequence()
  test_chatbot_welcome_steps()
}
class "ChatbotMailMessage" as odoo_src.odoo.addons.im_livechat.models.chatbot_message.ChatbotMailMessage {
  discuss_channel_id
  mail_message_id
  script_step_id
  user_raw_answer
  user_script_answer_id
}
class "ChatbotScript" as odoo_src.odoo.addons.im_livechat.models.chatbot_script.ChatbotScript {
  active
  first_step_warning
  image_1920
  livechat_channel_count
  operator_partner_id
  script_step_ids
  title
  action_view_livechat_channels()
  copy(default)
  copy_data(default)
  create(vals_list)
  write(vals)
}
class "ChatbotScript" as odoo_src.odoo.addons.crm_livechat.models.chatbot_script.ChatbotScript {
  lead_count
  action_view_leads()
}
class "ChatbotScriptAnswer" as odoo_src.odoo.addons.im_livechat.models.chatbot_script_answer.ChatbotScriptAnswer {
  chatbot_script_id
  name
  redirect_link
  script_step_id
  sequence
}
class "ChatbotScriptStep" as odoo_src.odoo.addons.im_livechat.models.chatbot_script_step.ChatbotScriptStep {
  answer_ids
  chatbot_script_id
  is_forward_operator_child
  message
  sequence
  step_type
  triggering_answer_ids
  create(vals_list)
}
class "ChatbotScriptStep" as odoo_src.odoo.addons.crm_livechat.models.chatbot_script_step.ChatbotScriptStep {
  crm_team_id
  step_type
}
class "CheckIdentity" as odoo_src.odoo.addons.base.models.res_users.CheckIdentity {
  auth_method
  password
  request
  run_check()
}
class "CheckIdentityPasskeys" as odoo_src.odoo.addons.auth_passkey.models.res_users_identitycheck.CheckIdentityPasskeys {
  auth_method
  password : str
  action_use_password()
}
class "CheckUyVat" as odoo_src.odoo.addons.l10n_uy.tests.test_check_vat.CheckUyVat {
  setUpClass()
  test_invalid_ci()
  test_invalid_nie()
  test_invalid_rut()
  test_valid_ci()
  test_valid_nie()
  test_valid_rut()
}
class "ChooseDeliveryCarrier" as odoo_src.odoo.addons.delivery_mondialrelay.wizard.choose_delivery_carrier.ChooseDeliveryCarrier {
  is_mondialrelay
  mondialrelay_allowed_countries
  mondialrelay_brand
  mondialrelay_colLivMod
  mondialrelay_last_selected
  mondialrelay_last_selected_id
  shipping_country_code
  shipping_zip
  button_confirm()
}
class "ChooseDeliveryCarrier" as odoo_src.odoo.addons.delivery.wizard.choose_delivery_carrier.ChooseDeliveryCarrier {
  available_carrier_ids
  carrier_id
  company_id
  currency_id
  delivery_message
  delivery_price
  delivery_type
  display_price
  invoicing_message
  order_id
  partner_id
  total_weight
  weight_uom_name
  button_confirm()
  update_price()
}
class "City" as odoo_src.odoo.addons.base_address_extended.models.res_city.City {
  country_id
  name
  state_id
  zipcode
}
class "City" as odoo_src.odoo.addons.l10n_pe.models.res_city.City {
  l10n_pe_code
}
class "<color:red>ClientAuthenticationError</color>" as odoo_src.odoo.addons.cloud_storage_azure.utils.cloud_storage_azure_utils.ClientAuthenticationError {
}
class "CloseCode" as odoo_src.odoo.addons.bus.websocket.CloseCode {
  name
}
class "CloseFrame" as odoo_src.odoo.addons.bus.websocket.CloseFrame {
  code
  reason
}
class "CloudAttachmentController" as odoo_src.odoo.addons.cloud_storage.controllers.attachment.CloudAttachmentController {
  mail_attachment_upload(ufile, thread_id, thread_model, is_pending)
}
class "CloudStorageAttachment" as odoo_src.odoo.addons.cloud_storage.models.ir_attachment.CloudStorageAttachment {
  type
}
class "CloudStorageSettings" as odoo_src.odoo.addons.cloud_storage_google.models.res_config_settings.CloudStorageSettings {
  cloud_storage_google_account_info
  cloud_storage_google_bucket_name
  cloud_storage_google_service_account_key
  cloud_storage_provider
  get_values()
}
class "CloudStorageSettings" as odoo_src.odoo.addons.cloud_storage_azure.models.res_config_settings.CloudStorageSettings {
  cloud_storage_azure_account_name
  cloud_storage_azure_client_id
  cloud_storage_azure_client_secret
  cloud_storage_azure_container_name
  cloud_storage_azure_invalidate_user_delegation_key
  cloud_storage_azure_tenant_id
  cloud_storage_provider
  set_values()
}
class "CloudStorageSettings" as odoo_src.odoo.addons.cloud_storage.models.res_config_settings.CloudStorageSettings {
  cloud_storage_min_file_size
  cloud_storage_provider
  set_values()
}
class "CompRegexTest" as odoo_src.odoo.addons.base.tests.test_views.CompRegexTest {
  test_comp_regex()
}
class "Company" as odoo_src.odoo.addons.l10n_eu_oss.models.res_company.Company {
}
class "Company" as odoo_src.odoo.addons.mail.models.res_company.Company {
  alias_domain_id
  alias_domain_name
  bounce_email
  bounce_formatted
  catchall_email
  catchall_formatted
  default_from_email
  email_formatted
  email_primary_color
  email_secondary_color
}
class "Company" as odoo_src.odoo.addons.mrp.models.res_company.Company {
  manufacturing_lead
  create_missing_unbuild_sequences()
}
class "Company" as odoo_src.odoo.addons.lunch.models.res_company.Company {
  lunch_minimum_threshold
  lunch_notify_message
}
class "Company" as odoo_src.odoo.addons.l10n_pl.models.res_company.Company {
  l10n_pl_reports_tax_office_id
}
class "Company" as odoo_src.odoo.addons.hr.models.res_company.Company {
  employee_properties_definition
  hr_presence_control_attendance
  hr_presence_control_email
  hr_presence_control_email_amount
  hr_presence_control_ip
  hr_presence_control_ip_list
  hr_presence_control_login
}
class "Company" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.res_company.Company {
  l10n_es_edi_facturae_certificate_ids
  l10n_es_edi_facturae_residence_type
}
class "Company" as odoo_src.odoo.addons.base.models.res_company.Company {
  active
  all_child_ids
  bank_ids
  child_ids
  city
  color
  company_details
  company_registry
  country_code
  country_id
  currency_id
  email
  external_report_layout_id
  font
  is_company_details_empty
  layout_background
  layout_background_image
  logo
  logo_web
  mobile
  name
  paperformat_id
  parent_id
  parent_ids
  parent_path
  partner_id
  phone
  primary_color
  report_footer
  report_header
  root_id
  secondary_color
  sequence
  state_id
  street
  street2
  uninstalled_l10n_module_ids
  user_ids
  uses_default_logo
  vat
  website
  zip
  action_all_company_branches()
  cache_invalidation_fields()
  copy(default)
  create(vals_list)
  init()
  install_l10n_modules()
  unlink()
  write(values)
}
class "CompanyLDAP" as odoo_src.odoo.addons.auth_ldap.models.res_company_ldap.CompanyLDAP {
  company
  create_user
  ldap_base
  ldap_binddn
  ldap_filter
  ldap_password
  ldap_server
  ldap_server_port
  ldap_tls
  sequence
  user
}
class "<color:red>CompileError</color>" as odoo_src.odoo.addons.base.models.assetsbundle.CompileError {
}
class "CompletionStatus" as odoo_src.odoo.addons.base.models.ir_cron.CompletionStatus {
  FAILED : str
  FULLY_DONE : str
  PARTIALLY_DONE : str
}
class "ComplianceLetter" as odoo_src.odoo.addons.l10n_mt_pos.wizards.compliance_letter.ComplianceLetter {
  company_id
  generate_letter()
}
class "ConfirmExpiry" as odoo_src.odoo.addons.mrp_product_expiry.wizard.confirm_expiry.ConfirmExpiry {
  description
  production_ids
  show_lots
  workorder_id
  confirm_produce()
  confirm_workorder()
}
class "<color:red>ConnectionClosed</color>" as odoo_src.odoo.addons.bus.websocket.ConnectionClosed {
}
class "ConnectionManager" as odoo_src.odoo.addons.hw_drivers.connection_manager.ConnectionManager {
  daemon : bool
  pairing_code : bool
  pairing_uuid : bool
  run()
}
class "ConnectionState" as odoo_src.odoo.addons.bus.websocket.ConnectionState {
  name
}
class "Contact" as odoo_src.odoo.addons.base.models.ir_qweb_fields.Contact {
  get_available_options()
  value_to_html(value, options)
}
class "Contacts" as odoo_src.odoo.addons.hr_work_entry.models.hr_work_entry.Contacts {
  active
  employee_id
  user_id
}
class "Contacts" as odoo_src.odoo.addons.calendar.models.calendar_filter.Contacts {
  active
  partner_checked
  partner_id
  user_id
  unlink_from_partner_id(partner_id)
}
class "Contract" as odoo_src.odoo.addons.hr_contract.models.hr_contract.Contract {
  active
  active_employee
  calendar_mismatch
  company_country_id
  company_id
  contract_type_id
  contract_wage
  contracts_count
  country_code
  currency_id
  date_end
  date_start
  department_id
  employee_id
  first_contract_date
  hr_responsible_id
  job_id
  kanban_state
  name
  notes
  permit_no
  resource_calendar_id
  state
  structure_type_id
  trial_date_end
  visa_no
  wage
  action_open_contract_form()
  action_open_contract_history()
  action_open_contract_list()
  create(vals_list)
  update_state()
  write(vals)
}
class "ContractHistory" as odoo_src.odoo.addons.hr_contract.report.hr_contract_history.ContractHistory {
  active_employee
  activity_state
  company_country_id
  company_id
  contract_count
  contract_id
  contract_ids
  contract_type_id
  country_code
  currency_id
  date_end
  date_hired
  date_start
  department_id
  employee_id
  hr_responsible_id
  is_under_contract
  job_id
  name
  resource_calendar_id
  state
  structure_type_id
  under_contract_state
  wage
  hr_contract_view_form_new_action()
  init()
}
class "ContractType" as odoo_src.odoo.addons.hr.models.hr_contract_type.ContractType {
  code
  country_id
  name
  sequence
}
class "<color:red>ConversionNotFound</color>" as odoo_src.odoo.addons.base.models.ir_fields.ConversionNotFound {
}
class "CorsLivechatChatbotScriptController" as odoo_src.odoo.addons.im_livechat.controllers.cors.chatbot.CorsLivechatChatbotScriptController {
  cors_chatbot_restart(guest_token, channel_id, chatbot_script_id)
  cors_chatbot_save_answer(guest_token, channel_id, message_id, selected_answer_id)
  cors_chatbot_trigger_step(guest_token, channel_id, chatbot_script_id)
  cors_chatbot_validate_email(guest_token, channel_id)
}
class "CorsLivechatController" as odoo_src.odoo.addons.im_livechat.controllers.cors.main.CorsLivechatController {
  cors_email_livechat_transcript(guest_token, channel_id, email)
  cors_feedback(guest_token, channel_id, rate, reason)
  cors_get_session(channel_id, anonymous_name, previous_operator_id, chatbot_script_id, persisted)
  cors_history_pages(guest_token, pid, channel_id, page_history)
  cors_livechat_init(channel_id, guest_token)
  cors_visitor_leave_session(guest_token, channel_id)
}
class "Country" as odoo_src.odoo.addons.base_address_extended.models.res_country.Country {
  enforce_cities
}
class "Country" as odoo_src.odoo.addons.base.models.res_country.Country {
  address_format
  address_view_id
  code
  country_group_ids
  currency_id
  image_url
  name
  name_position
  phone_code
  state_ids
  state_required
  vat_label
  zip_required
  create(vals_list)
  get_address_fields()
  name_search(name, args, operator, limit)
  write(vals)
}
class "CountryGroup" as odoo_src.odoo.addons.base.models.res_country.CountryGroup {
  country_ids
  name
}
class "CountryState" as odoo_src.odoo.addons.base.models.res_country.CountryState {
  code
  country_id
  name
  name_search(name, args, operator, limit)
}
class "CountryState" as odoo_src.odoo.addons.l10n_in.models.res_country_state.CountryState {
  l10n_in_tin
}
class "Course" as odoo_src.odoo.addons.mass_mailing_slides.models.slide_channel.Course {
  action_mass_mailing_attendees()
}
class "CrmChatbotCase" as odoo_src.odoo.addons.crm_livechat.tests.test_chatbot_lead.CrmChatbotCase {
  test_chatbot_lead_portal_user()
  test_chatbot_lead_public_user()
}
class "CrmChatbotCase" as odoo_src.odoo.addons.crm_livechat.tests.chatbot_common.CrmChatbotCase {
  setUpClass()
}
class "CrmClient" as odoo_src.odoo.addons.crm_mail_plugin.controllers.crm_client.CrmClient {
  crm_lead_create(partner_id, email_body, email_subject)
  crm_lead_get_by_partner_id(partner, limit, offset)
  crm_lead_open(lead_id)
  crm_lead_redirect_create_form_view(partner_id)
  log_single_mail_content(lead, message)
}
class "CrmController" as odoo_src.odoo.addons.crm.controllers.main.CrmController {
  crm_lead_case_mark_lost(res_id, token)
  crm_lead_case_mark_won(res_id, token)
  crm_lead_convert(res_id, token)
}
class "CrmIapLeadIndustry" as odoo_src.odoo.addons.crm_iap_mine.models.crm_iap_lead_industry.CrmIapLeadIndustry {
  color
  name
  reveal_ids
  sequence
}
class "CrmLead" as odoo_src.odoo.addons.mass_mailing_crm.models.crm_lead.CrmLead {
}
class "CrmLeadLost" as odoo_src.odoo.addons.crm.wizard.crm_lead_lost.CrmLeadLost {
  lead_ids
  lost_feedback
  lost_reason_id
  action_lost_reason_apply()
}
class "CrmUpdateProbabilities" as odoo_src.odoo.addons.crm.wizard.crm_lead_pls_update.CrmUpdateProbabilities {
  pls_fields
  pls_start_date
  action_update_crm_lead_probabilities()
}
class "CronMixinCase" as odoo_src.odoo.addons.base.tests.test_ir_cron.CronMixinCase {
  capture_triggers(cron_id)
}
class "CryptContext" as odoo_src.odoo.addons.base.models.res_users.CryptContext {
  hash
  identify
  verify
  verify_and_update
  copy()
  schemes()
  update()
}
class "Currency" as odoo_src.odoo.addons.base.models.res_currency.Currency {
  active
  currency_subunit_label
  currency_unit_label
  date
  decimal_places
  full_name
  inverse_rate
  is_current_company_currency
  iso_numeric
  name
  position
  rate
  rate_ids
  rate_string
  rounding
  symbol
  amount_to_text(amount)
  compare_amounts(amount1, amount2)
  create(vals_list)
  format(amount)
  is_zero(amount)
  round(amount)
  unlink()
  write(vals)
}
class "CurrencyRate" as odoo_src.odoo.addons.base.models.res_currency.CurrencyRate {
  company_id
  company_rate
  currency_id
  inverse_company_rate
  name
  rate
  create(vals_list)
  write(vals)
}
class "CustomController" as odoo_src.odoo.addons.payment_custom.controllers.main.CustomController {
  custom_process_transaction()
}
class "CustomFilter" as odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.TestIrMailServerSMTPD.setUpClass.CustomFilter {
  filter(record)
}
class "CustomModel" as odoo_src.odoo.addons.base.models.ir_model.IrModel._instanciate.CustomModel {
}
class "CustomerPortal" as odoo_src.odoo.addons.l10n_mx.controllers.portal.CustomerPortal {
}
class "CustomerPortal" as odoo_src.odoo.addons.mrp_subcontracting.controllers.portal.CustomerPortal {
  portal_my_production(picking_id)
  portal_my_productions(page, date_begin, date_end, sortby, filterby)
  render_production_backend_view(picking_id)
}
class "CustomerPortalBr" as odoo_src.odoo.addons.l10n_br_website_sale.controllers.portal.CustomerPortalBr {
  details_form_validate(data, partner_creation)
}
class "CustomerPortalEcuador" as odoo_src.odoo.addons.l10n_ec_website_sale.controllers.portal.CustomerPortalEcuador {
  details_form_validate(data, partner_creation)
}
class "CustomerPortalLoyalty" as odoo_src.odoo.addons.loyalty.controllers.portal.CustomerPortalLoyalty {
  portal_get_card_history_values(card_id)
  portal_my_loyalty_card_history(card_id, page, sortby)
}
class "CustomerPortalPasswordPolicy" as odoo_src.odoo.addons.auth_password_policy_portal.controllers.CustomerPortalPasswordPolicy {
}
class "CustomerPortalUruguay" as odoo_src.odoo.addons.l10n_uy_website_sale.controllers.portal.CustomerPortalUruguay {
  details_form_validate(data, partner_creation)
}
class "DataRecycleModel" as odoo_src.odoo.addons.data_recycle.models.data_recycle_model.DataRecycleModel {
  active
  domain
  include_archived
  last_notification
  name
  notify_frequency
  notify_frequency_period
  notify_user_ids
  records_to_recycle_count
  recycle_action
  recycle_mode
  recycle_record_ids
  res_model_id
  res_model_name
  time_field_delta
  time_field_delta_unit
  time_field_id
  action_recycle_records()
  open_records()
  write(vals)
}
class "DataRecycleRecord" as odoo_src.odoo.addons.data_recycle.models.data_recycle_record.DataRecycleRecord {
  active
  company_id
  name
  recycle_model_id
  res_id
  res_model_id
  res_model_name
  action_discard()
  action_validate()
}
class "DateConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.DateConverter {
  get_available_options()
  value_to_html(value, options)
}
class "DateTimeConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.DateTimeConverter {
  get_available_options()
  value_to_html(value, options)
}
class "DecimalPrecision" as odoo_src.odoo.addons.point_of_sale.models.decimal_precision.DecimalPrecision {
}
class "DecimalPrecision" as odoo_src.odoo.addons.account.models.decimal_precision.DecimalPrecision {
  precision_get(application)
}
class "DecimalPrecision" as odoo_src.odoo.addons.base.models.decimal_precision.DecimalPrecision {
  digits
  name
  create(vals_list)
  precision_get(application)
  unlink()
  write(data)
}
class "DeliveryCarrier" as odoo_src.odoo.addons.l10n_ro_edi_stock.models.delivery_carrier.DeliveryCarrier {
  l10n_ro_edi_stock_partner_id
}
class "DeliveryCarrier" as odoo_src.odoo.addons.delivery.models.delivery_carrier.DeliveryCarrier {
  active
  amount
  can_generate_return
  carrier_description
  company_id
  country_ids
  currency_id
  debug_logging
  delivery_type
  excluded_tag_ids
  fixed_margin
  fixed_price
  free_over
  get_return_label_from_portal
  integration_level
  invoice_policy
  margin
  max_volume
  max_weight
  must_have_tag_ids
  name
  price_rule_ids
  prod_environment
  product_id
  return_label_on_delivery
  sequence
  shipping_insurance
  state_ids
  supports_shipping_insurance
  tracking_url
  volume_uom_name
  weight_uom_name
  zip_prefix_ids
  available_carriers(partner, order)
  base_on_rule_rate_shipment(order)
  copy_data(default)
  fixed_rate_shipment(order)
  install_more_provider()
  log_xml(xml_string, func)
  rate_shipment(order)
  toggle_debug()
  toggle_prod_environment()
}
class "DeliveryCarrierMondialRelay" as odoo_src.odoo.addons.delivery_mondialrelay.models.delivery_carrier.DeliveryCarrierMondialRelay {
  is_mondialrelay
  mondialrelay_brand
  mondialrelay_packagetype
  base_on_rule_get_tracking_link(picking)
  fixed_get_tracking_link(picking)
}
class "DeliveryCommon" as odoo_src.odoo.addons.delivery.tests.common.DeliveryCommon {
  setUpClass()
}
class "DeliveryZipPrefix" as odoo_src.odoo.addons.delivery.models.delivery_zip_prefix.DeliveryZipPrefix {
  name
  create(vals_list)
  write(vals)
}
class "DemoFailure" as odoo_src.odoo.addons.base.models.ir_demo_failure.DemoFailure {
  error
  module_id
  wizard_id
}
class "DemoFailureWizard" as odoo_src.odoo.addons.base.models.ir_demo_failure.DemoFailureWizard {
  failure_ids
  failures_count
  done()
}
class "Department" as odoo_src.odoo.addons.hr_holidays.models.hr_department.Department {
  absence_of_today
  allocation_to_approve_count
  leave_to_approve_count
  action_open_allocation_department()
  action_open_leave_department()
}
class "Department" as odoo_src.odoo.addons.hr.models.hr_department.Department {
  active
  child_ids
  color
  company_id
  complete_name
  has_read_access
  jobs_ids
  manager_id
  master_department_id
  member_ids
  name
  note
  parent_id
  parent_path
  plan_ids
  plans_count
  total_employee
  action_employee_from_department()
  action_open_view_child_departments()
  action_plan_from_department()
  create(vals_list)
  get_children_department_ids()
  get_department_hierarchy()
  get_formview_action(access_uid)
  name_create(name)
  write(vals)
}
class "DepartureReason" as odoo_src.odoo.addons.hr.models.hr_departure_reason.DepartureReason {
  name
  reason_code
  sequence
}
class "<color:red>DeviceUnreachableError</color>" as odoo_src.odoo.addons.mail.tools.web_push.DeviceUnreachableError {
}
class "Digest" as odoo_src.odoo.addons.im_livechat.models.digest.Digest {
  kpi_livechat_conversations
  kpi_livechat_conversations_value
  kpi_livechat_rating
  kpi_livechat_rating_value
  kpi_livechat_response
  kpi_livechat_response_value
}
class "Digest" as odoo_src.odoo.addons.hr_recruitment.models.digest.Digest {
  kpi_hr_recruitment_new_colleagues
  kpi_hr_recruitment_new_colleagues_value
}
class "Digest" as odoo_src.odoo.addons.digest.models.digest.Digest {
  available_fields
  company_id
  currency_id
  is_subscribed
  kpi_mail_message_total
  kpi_mail_message_total_value
  kpi_res_users_connected
  kpi_res_users_connected_value
  name
  next_run_date
  periodicity
  state
  user_ids
  action_activate()
  action_deactivate()
  action_send()
  action_send_manual()
  action_set_periodicity(periodicity)
  action_subscribe()
  action_unsubscribe()
  create(vals_list)
}
class "Digest" as odoo_src.odoo.addons.crm.models.digest.Digest {
  kpi_crm_lead_created
  kpi_crm_lead_created_value
  kpi_crm_opportunities_won
  kpi_crm_opportunities_won_value
}
class "Digest" as odoo_src.odoo.addons.point_of_sale.models.digest.Digest {
  kpi_pos_total
  kpi_pos_total_value
}
class "Digest" as odoo_src.odoo.addons.account.models.digest.Digest {
  kpi_account_total_revenue
  kpi_account_total_revenue_value
}
class "DigestController" as odoo_src.odoo.addons.digest.controllers.portal.DigestController {
  digest_set_periodicity(digest_id, periodicity)
  digest_unsubscribe(digest_id, token, user_id, one_click)
  digest_unsubscribe_oneclick(digest_id, token, user_id)
}
class "DigestTip" as odoo_src.odoo.addons.digest.models.digest_tip.DigestTip {
  group_id
  name
  sequence
  tip_description
  user_ids
}
class "DiscussChannel" as odoo_src.odoo.addons.im_livechat.models.discuss_channel.DiscussChannel {
  anonymous_name
  channel_type
  chatbot_current_step_id
  chatbot_message_ids
  country_id
  duration
  livechat_active
  livechat_channel_id
  livechat_operator_id
  execute_command_history()
}
class "DiscussChannel" as odoo_src.odoo.addons.crm_livechat.models.discuss_channel.DiscussChannel {
  execute_command_lead()
}
class "DiscussChannelWebclientController" as odoo_src.odoo.addons.mail.controllers.discuss.channel.DiscussChannelWebclientController {
}
class "DiscussGifController" as odoo_src.odoo.addons.mail.controllers.discuss.gif.DiscussGifController {
  add_favorite(tenor_gif_id)
  categories(locale, country)
  get_favorites(offset)
  remove_favorite(tenor_gif_id)
  search(search_term, locale, country, position, readonly)
}
class "DiscussSettingsController" as odoo_src.odoo.addons.mail.controllers.discuss.settings.DiscussSettingsController {
  discuss_custom_notifications(custom_notifications, channel_id)
  discuss_mute(minutes, channel_id)
}
class "DiscussThreadController" as odoo_src.odoo.addons.mail.controllers.discuss.thread.DiscussThreadController {
}
class "DiscussVoiceMetadata" as odoo_src.odoo.addons.mail.models.discuss.discuss_voice_metadata.DiscussVoiceMetadata {
  attachment_id
}
class "Driver" as odoo_src.odoo.addons.hw_drivers.driver.Driver {
  connection_type : str
  data : dict
  dev
  device_connection : str
  device_identifier
  device_manufacturer : str
  device_name : str
  device_type : str
  action(data)
  disconnect()
  supported(device)
}
class "DriverController" as odoo_src.odoo.addons.hw_drivers.controllers.driver.DriverController {
  action(session_id, device_identifier, data)
  check_certificate()
  download_logs()
  event(listener)
}
class "DriverMetaClass" as odoo_src.odoo.addons.hw_drivers.driver.DriverMetaClass {
  priority : int
}
class "Dummycontroller" as odoo_src.odoo.addons.base.tests.test_http_case.TestRequestRemaining.test_requests_a.Dummycontroller {
  wait()
}
class "DurationConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.DurationConverter {
  get_available_options()
  value_to_html(value, options)
}
class "ETransportAPI" as odoo_src.odoo.addons.l10n_ro_edi_stock.models.etransport_api.ETransportAPI {
  get_status(company_id, document_load_id, session)
  upload_data(company_id, data)
}
class "EWayBillApi" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.tools.ewaybill_api.EWayBillApi {
  DEFAULT_HELP_MESSAGE
  company
  env
}
class "<color:red>EWayBillError</color>" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.tools.ewaybill_api.EWayBillError {
  error_codes
  error_json
  get_all_error_message()
  get_error_codes()
}
class "EWayBillType" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.models.ewaybill_type.EWayBillType {
  active
  allowed_supply_type
  code
  name
  sub_type
  sub_type_code
}
class "Efaktur" as odoo_src.odoo.addons.l10n_id_efaktur.models.efaktur.Efaktur {
  available
  company_id
  max
  min
  next_num
  create(vals_list)
  pop_number()
  push_number(company_id, number)
  write(vals)
}
class "EfakturDocument" as odoo_src.odoo.addons.l10n_id_efaktur.models.efaktur_document.EfakturDocument {
  active
  attachment_id
  company_id
  invoice_ids
  name
  action_download()
  action_regenerate()
}
class "EfakturDocument" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.efaktur_document.EfakturDocument {
  active
  attachment_id
  company_id
  invoice_ids
  name
  action_download()
  action_regenerate()
}
class "EfakturDownloadController" as odoo_src.odoo.addons.l10n_id_efaktur.controllers.download_efaktur.EfakturDownloadController {
  download_invoice_attachments(attachments)
}
class "EfakturDownloadController" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.controllers.download_efaktur.EfakturDownloadController {
  download_invoice_attachments(attachments)
}
class "EfakturProductCode" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.product_code.EfakturProductCode {
  code
  description
}
class "EfakturUomCode" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.uom_code.EfakturUomCode {
  code
  name
}
class "EmailConfigCase" as odoo_src.odoo.addons.base.tests.test_ir_mail_server.EmailConfigCase {
  test_default_email_from()
}
class "Employee" as odoo_src.odoo.addons.hr_org_chart.models.hr_employee.Employee {
  is_subordinate
  subordinate_ids
}
class "Employee" as odoo_src.odoo.addons.l10n_mx_hr.models.hr_employee.Employee {
  l10n_mx_curp
  l10n_mx_rfc
}
class "Employee" as odoo_src.odoo.addons.hr_presence.models.hr_employee.Employee {
  email_sent
  hr_presence_state_display
  ip_connected
  manually_set_presence
  manually_set_present
  action_open_leave_request()
  action_send_log()
  action_send_sms()
  action_set_absent()
  action_set_present()
  get_presence_server_action_data()
  write(vals)
}
class "Employee" as odoo_src.odoo.addons.hr_expense.models.hr_employee.Employee {
  expense_manager_id
}
class "Employee" as odoo_src.odoo.addons.hr_skills_slides.models.hr_employee.Employee {
  courses_completion_text
  has_subscribed_courses
  subscribed_courses
  action_open_courses()
}
class "Employee" as odoo_src.odoo.addons.hr_maintenance.models.res_users.Employee {
  equipment_count
  equipment_ids
}
class "Employee" as odoo_src.odoo.addons.hr_fleet.models.employee.Employee {
  car_ids
  employee_cars_count
  license_plate
  mobility_card
  action_open_employee_cars()
  write(vals)
}
class "Employee" as odoo_src.odoo.addons.hr_skills.models.hr_employee.Employee {
  employee_skill_ids
  resume_line_ids
  skill_ids
  create(vals_list)
  write(vals)
}
class "Employee" as odoo_src.odoo.addons.hr_contract.models.hr_employee.Employee {
  calendar_mismatch
  contract_id
  contract_ids
  contract_warning
  contracts_count
  first_contract_date
  legal_name
  vehicle
  action_open_contract()
  write(vals)
}
class "EmployeeBase" as odoo_src.odoo.addons.hr_expense.models.hr_employee.EmployeeBase {
  filter_for_expense
}
class "EmployeeBase" as odoo_src.odoo.addons.hr_contract.models.hr_employee.EmployeeBase {
}
class "EmployeeCategory" as odoo_src.odoo.addons.hr.models.hr_employee_category.EmployeeCategory {
  color
  employee_ids
  name
}
class "EmployeePublic" as odoo_src.odoo.addons.hr_expense.models.hr_employee.EmployeePublic {
  expense_manager_id
}
class "EmployeePublic" as odoo_src.odoo.addons.hr_fleet.models.employee.EmployeePublic {
  mobility_card
}
class "EmployeePublic" as odoo_src.odoo.addons.hr_skills.models.hr_employee_public.EmployeePublic {
  employee_skill_ids
  resume_line_ids
}
class "EmployeePublic" as odoo_src.odoo.addons.hr_contract.models.hr_employee.EmployeePublic {
  first_contract_date
}
class "EmployeeResumeReport" as odoo_src.odoo.addons.hr_skills.report.hr_employee_cv_report.EmployeeResumeReport {
}
class "EmployeeSkill" as odoo_src.odoo.addons.hr_skills.models.hr_employee_skill.EmployeeSkill {
  color
  employee_id
  level_progress
  skill_id
  skill_level_id
  skill_type_id
  create(vals_list)
  write(vals)
}
class "EnableProfilingWizard" as odoo_src.odoo.addons.base.models.ir_profile.EnableProfilingWizard {
  duration
  expiration
  submit()
}
class "<color:red>Error</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error {
  msg
  resultcode : int
}
class "EscLabelCommand" as odoo_src.odoo.addons.event.tools.esc_label_tools.EscLabelCommand {
  concat(other_command)
  delete_files(file_pattern: str)
  load_canvas()
  print_box(position: tuple[int, int], size: tuple[int, int], thickness: int)
  print_complete()
  print_image(filename: str, position: tuple[int, int])
  print_text(text: str, position: tuple[int, int], font_size: tuple[int, int], wrap_width: Optional[int], max_lines: int, align: Literal['L', 'C', 'R', 'J'], rotation: Literal['N', 'R', 'I', 'B'])
  save_canvas()
  set_color(color: tuple[int, int, int] | str, alpha: int, bg_color: tuple[int, int, int] | str, bg_alpha: int)
  set_edge_detection(detection_type: Literal['M', 'W', 'N'])
  set_label_gap(gap: int)
  set_left_gap(gap: int)
  set_media_coating(coating: Literal['P1', 'M1', 'S1', 'G1', 'GS1', 'PG1', 'T1', 'WB1'])
  set_media_shape(shape: Literal['RP', 'FP'])
  set_media_source(source: Literal['IR', 'ER'])
  set_media_type(media_type: Literal['CP', 'DL', 'CL', 'WB'])
  set_print_quality(quality: Literal['D', 'S', 'N', 'Q', 'M'])
  set_printable_area(width: int, length: int)
  set_printing_offset(left_offset: int, top_offset: int)
  set_resolution(dots_per_inch: Literal[200, 300, 600])
  set_utf8_encoding()
  to_string()
  upload_image(filename: str, image_field: str, size: Optional[tuple[int, int]], crop_mode: Literal['contain', 'cover'], flip)
  wrap_command()
}
class "Escpos" as odoo_src.odoo.addons.hw_escpos.escpos.escpos.Escpos {
  device : NoneType
  encoding : NoneType
  extra_chars : int
  img_cache : dict
  barcode(code, bc, width, height, pos, font)
  cashdraw(pin)
  control(ctl)
  cut(mode)
  hw(hw)
  image(path_img)
  print_base64_image(img)
  qr(text)
  receipt(xml)
  set(align, font, type, width, height)
  text(txt)
}
class "EscposDriver" as odoo_src.odoo.addons.hw_escpos.controllers.main.EscposDriver {
  daemon : bool
  lock : lock
  queue : Queue
  status : dict
  connected_usb_devices()
  get_escpos_printer()
  get_status()
  lockedstart()
  open_cashbox(printer)
  print_receipt_body(eprint, receipt)
  push_task(task, data)
  run()
  set_status(status, message)
}
class "EscposProxy" as odoo_src.odoo.addons.hw_escpos.controllers.main.EscposProxy {
  open_cashbox()
  print_receipt(receipt)
  print_xml_receipt(receipt)
}
class "EtaActivityType" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.eta_activity_type.EtaActivityType {
  code
  name
}
class "EtaThumbDrive" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.eta_thumb_drive.EtaThumbDrive {
  access_token
  certificate
  company_id
  pin
  user_id
  action_set_certificate_from_usb()
  action_sign_invoices(invoice_ids)
  set_certificate(certificate)
  set_signature_data(invoices)
}
class "Event" as odoo_src.odoo.addons.mass_mailing_event_track.models.event_event.Event {
  action_mass_mailing_track_speakers()
}
class "Event" as odoo_src.odoo.addons.event_booth.models.event_event.Event {
  event_booth_category_available_ids
  event_booth_category_ids
  event_booth_count
  event_booth_count_available
  event_booth_ids
}
class "Event" as odoo_src.odoo.addons.event_product.models.event_event.Event {
  currency_id
}
class "Event" as odoo_src.odoo.addons.mass_mailing_event.models.event_event.Event {
  action_invite_contacts()
  action_mass_mailing_attendees()
}
class "Event" as odoo_src.odoo.addons.event_sale.models.event_event.Event {
  sale_order_lines_ids
  sale_price_subtotal
  action_view_linked_orders()
}
class "Event" as odoo_src.odoo.addons.mass_mailing_event_track_sms.models.event.Event {
  action_mass_mailing_track_speakers()
}
class "Event" as odoo_src.odoo.addons.mass_mailing_event_sms.models.event.Event {
  action_invite_contacts()
  action_mass_mailing_attendees()
}
class "EventBooth" as odoo_src.odoo.addons.event_booth.models.event_type_booth.EventBooth {
  booth_category_id
  event_type_id
  name
}
class "EventBooth" as odoo_src.odoo.addons.event_booth.models.event_booth.EventBooth {
  contact_email
  contact_name
  contact_phone
  event_id
  event_type_id
  is_available
  partner_id
  state
  action_confirm(additional_values)
  create(vals_list)
  write(vals)
}
class "EventBooth" as odoo_src.odoo.addons.event_booth_sale.models.event_booth.EventBooth {
  event_booth_registration_ids
  is_paid
  sale_order_id
  sale_order_line_id
  sale_order_line_registration_ids
  action_set_paid()
  action_view_sale_order()
}
class "EventBoothCategory" as odoo_src.odoo.addons.event_booth.models.event_booth_category.EventBoothCategory {
  active
  booth_ids
  description
  name
  sequence
}
class "EventBoothCategory" as odoo_src.odoo.addons.event_booth_sale.models.event_booth_category.EventBoothCategory {
  currency_id
  image_1920
  price
  price_incl
  price_reduce
  price_reduce_taxinc
  product_id
}
class "EventBoothConfigurator" as odoo_src.odoo.addons.event_booth_sale.wizard.event_booth_configurator.EventBoothConfigurator {
  event_booth_category_available_ids
  event_booth_category_id
  event_booth_ids
  event_id
  product_id
  sale_order_line_id
}
class "EventBoothRegistration" as odoo_src.odoo.addons.event_booth_sale.models.event_booth_registration.EventBoothRegistration {
  contact_email
  contact_name
  contact_phone
  event_booth_id
  partner_id
  sale_order_line_id
  action_confirm()
}
class "EventCase" as odoo_src.odoo.addons.event.tests.common.EventCase {
  assertSchedulerCronTriggers(capture, call_at_list)
  setUpClass()
}
class "EventConfigurator" as odoo_src.odoo.addons.event_sale.wizard.event_configurator.EventConfigurator {
  event_id
  event_ticket_id
  has_available_tickets
  product_id
  check_event_id()
}
class "EventController" as odoo_src.odoo.addons.event.controllers.main.EventController {
  event_ics_file(event)
  event_my_tickets(event_id, registration_ids, tickets_hash, badge_mode, responsive_html)
  init_barcode_interface(event_id)
}
class "EventCrmCase" as odoo_src.odoo.addons.event_crm.tests.common.EventCrmCase {
  assertLeadConvertion(rule, registrations, partner)
  setUpClass()
}
class "EventEvent" as odoo_src.odoo.addons.event_crm.models.event_event.EventEvent {
  has_lead_request
  lead_count
  lead_ids
  action_generate_leads()
}
class "EventEvent" as odoo_src.odoo.addons.event.models.event_event.EventEvent {
  active
  address_id
  address_inline
  address_search
  badge_format
  badge_image
  company_id
  country_id
  date_begin
  date_begin_located
  date_end
  date_end_located
  date_tz
  description
  event_mail_ids
  event_registrations_open
  event_registrations_sold_out
  event_registrations_started
  event_ticket_ids
  event_type_id
  general_question_ids
  is_finished
  is_one_day
  is_ongoing
  kanban_state
  kanban_state_label
  lang
  legend_blocked
  legend_done
  legend_normal
  name
  note
  organizer_id
  question_ids
  registration_ids
  registration_properties_definition
  seats_available
  seats_limited
  seats_max
  seats_reserved
  seats_taken
  seats_used
  specific_question_ids
  stage_id
  start_sale_datetime
  tag_ids
  ticket_instructions
  use_barcode
  user_id
  action_set_done()
  copy_data(default)
  create(vals_list)
  default_get(fields_list)
  get_kiosk_url()
  mail_attendees(template_id, force_send, filter_func)
  write(vals)
}
class "EventLeadRequest" as odoo_src.odoo.addons.event_crm.models.event_lead_request.EventLeadRequest {
  event_id
  processed_registration_id
}
class "EventLeadRule" as odoo_src.odoo.addons.event_crm.models.event_lead_rule.EventLeadRule {
  active
  company_id
  event_id
  event_registration_filter
  event_type_ids
  lead_creation_basis
  lead_creation_trigger
  lead_ids
  lead_sales_team_id
  lead_tag_ids
  lead_type
  lead_user_id
  name
}
class "EventMailRegistration" as odoo_src.odoo.addons.event_sms.models.event_mail_registration.EventMailRegistration {
}
class "EventMailRegistration" as odoo_src.odoo.addons.event.models.event_mail_registration.EventMailRegistration {
  mail_sent
  registration_id
  scheduled_date
  scheduler_id
  execute()
}
class "EventMailScheduler" as odoo_src.odoo.addons.event_sms.models.event_mail.EventMailScheduler {
  notification_type
  template_ref
}
class "EventMailScheduler" as odoo_src.odoo.addons.event.models.event_mail.EventMailScheduler {
  event_id
  interval_nbr
  interval_type
  interval_unit
  last_registration_id
  mail_count_done
  mail_done
  mail_registration_ids
  mail_state
  notification_type
  scheduled_date
  sequence
  template_ref
  execute()
  run(autocommit)
  schedule_communications(autocommit)
}
class "EventManager" as odoo_src.odoo.addons.hw_drivers.event_manager.EventManager {
  events : list
  session : dict
  sessions : dict
  add_request(listener)
  device_changed(device)
}
class "EventQuestion" as odoo_src.odoo.addons.event.models.event_question.EventQuestion {
  answer_ids
  event_id
  event_type_id
  is_mandatory_answer
  once_per_order
  question_type
  sequence
  title
  action_view_question_answers()
  write(vals)
}
class "EventQuestionAnswer" as odoo_src.odoo.addons.event.models.event_question_answer.EventQuestionAnswer {
  name
  question_id
  sequence
}
class "EventRegistration" as odoo_src.odoo.addons.mass_mailing_event.models.event_registration.EventRegistration {
}
class "EventRegistration" as odoo_src.odoo.addons.event_sale.models.event_registration.EventRegistration {
  sale_order_id
  sale_order_line_id
  sale_status
  state
  utm_campaign_id
  utm_medium_id
  utm_source_id
  action_view_sale_order()
  create(vals_list)
  write(vals)
}
class "EventRegistration" as odoo_src.odoo.addons.event_crm.models.event_registration.EventRegistration {
  lead_count
  lead_ids
  create(vals_list)
  write(vals)
}
class "EventRegistration" as odoo_src.odoo.addons.event.models.event_registration.EventRegistration {
  active
  barcode
  company_id
  company_name
  date_closed
  email
  event_begin_date
  event_date_range
  event_end_date
  event_id
  event_organizer_id
  event_ticket_id
  event_user_id
  mail_registration_ids
  name
  partner_id
  phone
  registration_answer_choice_ids
  registration_answer_ids
  registration_properties
  state
  utm_campaign_id
  utm_medium_id
  utm_source_id
  action_cancel()
  action_confirm()
  action_send_badge_email()
  action_set_done()
  action_set_draft()
  create(vals_list)
  default_get(fields)
  register_attendee(barcode, event_id)
  toggle_active()
  write(vals)
}
class "EventRegistration" as odoo_src.odoo.addons.event_crm_sale.models.event_registration.EventRegistration {
}
class "EventRegistrationAnswer" as odoo_src.odoo.addons.event.models.event_registration_answer.EventRegistrationAnswer {
  event_id
  partner_id
  question_id
  question_type
  registration_id
  value_answer_id
  value_text_box
}
class "EventSaleReport" as odoo_src.odoo.addons.event_sale.report.event_sale_report.EventSaleReport {
  active
  company_id
  event_date_begin
  event_date_end
  event_id
  event_registration_create_date
  event_registration_id
  event_registration_name
  event_registration_state
  event_ticket_id
  event_ticket_price
  event_type_id
  invoice_partner_id
  product_id
  sale_order_date
  sale_order_id
  sale_order_line_id
  sale_order_partner_id
  sale_order_state
  sale_order_user_id
  sale_price
  sale_price_untaxed
  sale_status
  init()
}
class "EventStage" as odoo_src.odoo.addons.event.models.event_stage.EventStage {
  description
  fold
  legend_blocked
  legend_done
  legend_normal
  name
  pipe_end
  sequence
}
class "EventTag" as odoo_src.odoo.addons.event.models.event_tag.EventTag {
  category_id
  category_sequence
  color
  name
  sequence
}
class "EventTagCategory" as odoo_src.odoo.addons.event.models.event_tag.EventTagCategory {
  name
  sequence
  tag_ids
}
class "EventTemplateTicket" as odoo_src.odoo.addons.event_product.models.event_type_ticket.EventTemplateTicket {
  currency_id
  description
  price
  price_reduce
  product_id
}
class "EventTemplateTicket" as odoo_src.odoo.addons.event.models.event_ticket.EventTemplateTicket {
  description
  event_type_id
  name
  seats_limited
  seats_max
  sequence
}
class "EventTicket" as odoo_src.odoo.addons.event_product.models.event_event_ticket.EventTicket {
  price_incl
  price_reduce_taxinc
}
class "EventTicket" as odoo_src.odoo.addons.event_sale.models.event_ticket.EventTicket {
}
class "EventTicket" as odoo_src.odoo.addons.event.models.event_ticket.EventTicket {
  color
  company_id
  end_sale_datetime
  event_id
  event_type_id
  is_expired
  is_launched
  is_sold_out
  registration_ids
  sale_available
  seats_available
  seats_reserved
  seats_taken
  seats_used
  start_sale_datetime
  default_get(fields)
}
class "EventTrack" as odoo_src.odoo.addons.mass_mailing_event_track.models.event_track.EventTrack {
}
class "EventType" as odoo_src.odoo.addons.event_booth.models.event_type.EventType {
  event_type_booth_ids
}
class "EventType" as odoo_src.odoo.addons.event.models.event_event.EventType {
  default_timezone
  event_type_mail_ids
  event_type_ticket_ids
  has_seats_limitation
  name
  note
  question_ids
  seats_max
  sequence
  tag_ids
  ticket_instructions
}
class "EventTypeBooth" as odoo_src.odoo.addons.event_booth_sale.models.event_type_booth.EventTypeBooth {
  currency_id
  price
  product_id
}
class "EventTypeMail" as odoo_src.odoo.addons.event_sms.models.event_mail.EventTypeMail {
  notification_type
  template_ref
}
class "EventTypeMail" as odoo_src.odoo.addons.event.models.event_mail.EventTypeMail {
  event_type_id
  interval_nbr
  interval_type
  interval_unit
  notification_type
  template_ref
}
class "Ewaybill" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.models.l10n_in_ewaybill.Ewaybill {
  blocking_level
  cancel_reason
  cancel_remarks
  company_currency_id
  company_id
  content
  distance
  document_date
  document_number
  error_message
  ewaybill_date
  ewaybill_expiry_date
  fiscal_position_id
  is_bill_from_editable
  is_bill_to_editable
  is_ship_from_editable
  is_ship_to_editable
  mode
  move_ids
  name
  partner_bill_from_id
  partner_bill_to_id
  partner_ship_from_id
  partner_ship_to_id
  picking_id
  picking_type_code
  state
  sub_type_code
  supply_type
  transportation_doc_date
  transportation_doc_no
  transporter_id
  type_description
  type_id
  vehicle_no
  vehicle_type
  action_export_json()
  action_print()
  action_set_to_challan()
  cancel_ewaybill()
  generate_ewaybill()
  reset_to_pending()
}
class "EwaybillCancel" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.wizard.l10n_in_ewaybill_cancel.EwaybillCancel {
  cancel_reason
  cancel_remarks
  l10n_in_ewaybill_id
  cancel_ewaybill()
}
class "ExceptionLogger" as odoo_src.odoo.addons.hw_drivers.exception_logger.ExceptionLogger {
  close()
  flush()
  write(message)
}
class "ExternalTestSuite" as odoo_src.odoo.addons.im_livechat.tests.test_js.ExternalTestSuite {
  test_external_livechat()
}
class "FakeClass" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_set_tags_empty.FakeClass {
}
class "FakeClass" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_set_tags_not_decorated.FakeClass {
}
class "FakeClass" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_set_tags_single_tag.FakeClass {
}
class "FakeClass" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_set_tags_multiple_tags.FakeClass {
}
class "FakeClassA" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassA {
}
class "FakeClassA" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_untagging.FakeClassA {
}
class "FakeClassA" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_parental_advisory.FakeClassA {
}
class "FakeClassA" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection.test_selector_parser_parameters.FakeClassA {
}
class "FakeClassB" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_untagging.FakeClassB {
}
class "FakeClassB" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_parental_advisory.FakeClassB {
  test_tags : set
}
class "FakeClassC" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassC {
}
class "FakeClassC" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_untagging.FakeClassC {
}
class "FakeClassD" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassD {
}
class "FakeField" as odoo_src.odoo.addons.base.models.ir_fields.FakeField {
  comodel_name : str
  name : str
}
class "FasterRule" as odoo_src.odoo.addons.base.models.ir_http.FasterRule {
  merge_slashes : bool
}
class "FecExportWizard" as odoo_src.odoo.addons.l10n_fr_account.wizard.account_fr_fec_export_wizard.FecExportWizard {
  date_from
  date_to
  exclude_zero
  excluded_journal_ids
  export_type
  filename
  test_file
  create_fec_report_action()
  generate_fec()
}
class "FetchmailServer" as odoo_src.odoo.addons.mail.models.fetchmail.FetchmailServer {
  active
  attach
  configuration
  date
  is_ssl
  message_ids
  name
  object_id
  original
  password
  port
  priority
  script
  server
  server_type
  server_type_info
  state
  user
  button_confirm_login()
  connect(allow_archived)
  create(vals_list)
  fetch_mail(raise_exception)
  onchange_server_type()
  set_draft()
  unlink()
  write(values)
}
class "FetchmailServer" as odoo_src.odoo.addons.microsoft_outlook.models.fetchmail_server.FetchmailServer {
  is_ssl : bool
  microsoft_outlook_access_token : bool
  microsoft_outlook_access_token_expiration : bool
  microsoft_outlook_refresh_token : bool
  port : int
  server : str
  server_type
  onchange_server_type()
}
class "FetchmailServer" as odoo_src.odoo.addons.google_gmail.models.fetchmail_server.FetchmailServer {
  google_gmail_access_token : bool
  google_gmail_access_token_expiration : bool
  google_gmail_authorization_code : bool
  google_gmail_refresh_token : bool
  is_ssl : bool
  port : int
  server : str
  server_type
  onchange_server_type()
}
class "FieldConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.FieldConverter {
  attributes(record, field_name, options, values)
  get_available_options()
  record_to_html(record, field_name, options)
  user_lang()
  value_to_html(value, options)
}
class "FiltersCase" as odoo_src.odoo.addons.base.tests.test_ir_filters.FiltersCase {
  USER_ID
  USER_NG
  build(model)
  setUp()
}
class "FinancialYearOpeningWizard" as odoo_src.odoo.addons.account.wizard.setup_wizards.FinancialYearOpeningWizard {
  company_id
  fiscalyear_last_day
  fiscalyear_last_month
  opening_date
  opening_move_posted
  action_save_onboarding_fiscal_year()
  write(vals)
}
class "FindUsbClass" as odoo_src.odoo.addons.hw_escpos.controllers.main.EscposDriver.connected_usb_devices.FindUsbClass {
}
class "FleetReport" as odoo_src.odoo.addons.fleet.report.fleet_report.FleetReport {
  company_id
  cost
  cost_type
  date_start
  driver_id
  fuel_type
  name
  vehicle_id
  vehicle_type
  init()
}
class "FleetServiceType" as odoo_src.odoo.addons.fleet.models.fleet_service_type.FleetServiceType {
  category
  name
}
class "FleetVehicle" as odoo_src.odoo.addons.account_fleet.models.fleet_vehicle.FleetVehicle {
  account_move_ids
  bill_count
  action_view_bills()
}
class "FleetVehicle" as odoo_src.odoo.addons.fleet.models.fleet_vehicle.FleetVehicle {
  acquisition_date
  active
  brand_id
  car_value
  category_id
  co2
  co2_standard
  color
  company_id
  contract_count
  contract_renewal_due_soon
  contract_renewal_overdue
  contract_state
  country_code
  country_id
  currency_id
  description
  doors
  driver_id
  electric_assistance
  first_contract_date
  frame_size
  frame_type
  fuel_type
  future_driver_id
  history_count
  horsepower
  horsepower_tax
  image_128
  license_plate
  location
  log_contracts
  log_drivers
  log_services
  manager_id
  model_id
  model_year
  name
  net_car_value
  next_assignation_date
  odometer
  odometer_count
  odometer_unit
  order_date
  plan_to_change_bike
  plan_to_change_car
  power
  power_unit
  residual_value
  seats
  service_activity
  service_count
  state_id
  tag_ids
  trailer_hook
  transmission
  vehicle_properties
  vehicle_range
  vehicle_type
  vin_sn
  write_off_date
  act_show_log_cost()
  action_accept_driver_change()
  action_send_email()
  create(vals_list)
  create_driver_history(vals)
  open_assignation_logs()
  return_action_to_open()
  write(vals)
}
class "FleetVehicle" as odoo_src.odoo.addons.hr_fleet.models.fleet_vehicle.FleetVehicle {
  driver_employee_id
  driver_employee_name
  future_driver_employee_id
  mobility_card
  action_open_employee()
  create(vals_list)
  open_assignation_logs()
  write(vals)
}
class "FleetVehicleAssignationLog" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_assignation_log.FleetVehicleAssignationLog {
  date_end
  date_start
  driver_id
  vehicle_id
}
class "FleetVehicleAssignationLog" as odoo_src.odoo.addons.hr_fleet.models.fleet_vehicle_assignation_log.FleetVehicleAssignationLog {
  attachment_number
  driver_employee_id
  action_get_attachment_view()
}
class "FleetVehicleLogContract" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_log_contract.FleetVehicleLogContract {
  active
  amount
  company_id
  cost_frequency
  cost_generated
  cost_subtype_id
  currency_id
  date
  days_left
  expiration_date
  expires_today
  has_open_contract
  ins_ref
  insurer_id
  name
  notes
  purchaser_id
  service_ids
  start_date
  state
  user_id
  vehicle_id
  action_close()
  action_draft()
  action_expire()
  action_open()
  compute_next_year_date(strdate)
  run_scheduler()
  scheduler_manage_contract_expiration()
  write(vals)
}
class "FleetVehicleLogContract" as odoo_src.odoo.addons.hr_fleet.models.fleet_vehicle_log_contract.FleetVehicleLogContract {
  purchaser_employee_id
  action_open_employee()
}
class "FleetVehicleLogServices" as odoo_src.odoo.addons.account_fleet.models.fleet_vehicle_log_services.FleetVehicleLogServices {
  account_move_line_id
  account_move_state
  amount
  vehicle_id
  action_open_account_move()
}
class "FleetVehicleLogServices" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_log_services.FleetVehicleLogServices {
  active
  amount
  company_id
  currency_id
  date
  description
  inv_ref
  manager_id
  notes
  odometer
  odometer_id
  odometer_unit
  purchaser_id
  service_type_id
  state
  vehicle_id
  vendor_id
  create(vals_list)
}
class "FleetVehicleLogServices" as odoo_src.odoo.addons.hr_fleet.models.fleet_vehicle_log_services.FleetVehicleLogServices {
  purchaser_employee_id
}
class "FleetVehicleModel" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_model.FleetVehicleModel {
  active
  brand_id
  category_id
  co2_standard
  color
  default_co2
  default_fuel_type
  doors
  electric_assistance
  horsepower
  horsepower_tax
  image_128
  model_year
  name
  power
  power_unit
  seats
  trailer_hook
  transmission
  vehicle_count
  vehicle_properties_definition
  vehicle_range
  vehicle_type
  vendors
  action_model_vehicle()
}
class "FleetVehicleModelBrand" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_model_brand.FleetVehicleModelBrand {
  active
  image_128
  model_count
  model_ids
  name
  action_brand_model()
}
class "FleetVehicleModelCategory" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_model_category.FleetVehicleModelCategory {
  name
  sequence
}
class "FleetVehicleOdometer" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_odometer.FleetVehicleOdometer {
  date
  driver_id
  name
  unit
  value
  vehicle_id
}
class "FleetVehicleOdometer" as odoo_src.odoo.addons.hr_fleet.models.fleet_vehicle_odometer.FleetVehicleOdometer {
  driver_employee_id
}
class "FleetVehicleSendMail" as odoo_src.odoo.addons.fleet.wizard.fleet_vehicle_send_mail.FleetVehicleSendMail {
  attachment_ids
  author_id
  render_model : str
  template_id
  vehicle_ids
  action_save_as_template()
  action_send()
}
class "FleetVehicleState" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_state.FleetVehicleState {
  name
  sequence
}
class "FleetVehicleTag" as odoo_src.odoo.addons.fleet.models.fleet_vehicle_tag.FleetVehicleTag {
  color
  name
}
class "FloatConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.FloatConverter {
  get_available_options()
  record_to_html(record, field_name, options)
  value_to_html(value, options)
}
class "FloatFmt" as odoo_src.odoo.addons.account_edi_ubl_cii.models.account_edi_xml_ubl_20.FloatFmt {
  max_dp : NoneType
  min_dp : int
}
class "FloatTimeConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.FloatTimeConverter {
  value_to_html(value, options)
}
class "FlutterwaveCommon" as odoo_src.odoo.addons.payment_flutterwave.tests.common.FlutterwaveCommon {
  setUpClass()
}
class "FlutterwaveController" as odoo_src.odoo.addons.payment_flutterwave.controllers.main.FlutterwaveController {
  flutterwave_return_from_authorization(response)
  flutterwave_return_from_checkout()
  flutterwave_webhook()
}
class "Followers" as odoo_src.odoo.addons.mail.models.mail_followers.Followers {
  email
  is_active
  name
  partner_id
  res_id
  res_model
  subtype_ids
  create(vals_list)
  unlink()
  write(vals)
}
class "FormatAddressCase" as odoo_src.odoo.addons.base.tests.test_format_address_mixin.FormatAddressCase {
  assertAddressView(model)
}
class "FormatAddressMixin" as odoo_src.odoo.addons.base.models.res_partner.FormatAddressMixin {
}
class "FormatVATLabelMixin" as odoo_src.odoo.addons.base.models.res_partner.FormatVATLabelMixin {
}
class "Frame" as odoo_src.odoo.addons.bus.websocket.Frame {
  fin : bool
  opcode
  payload : bytes
  rsv1 : bool
  rsv2 : bool
  rsv3 : bool
}
class "FrequencyField" as odoo_src.odoo.addons.crm.models.crm_lead_scoring_frequency.FrequencyField {
  field_id
  name
}
class "GamificationBadge" as odoo_src.odoo.addons.gamification.models.gamification_badge.GamificationBadge {
  BADGE_REQUIRED : int
  CAN_GRANT : int
  NOBODY_CAN_GRANT : int
  TOO_MANY : int
  USER_NOT_VIP : int
  active
  challenge_ids
  description
  goal_definition_ids
  granted_count
  granted_users_count
  level
  name
  owner_ids
  remaining_sending
  rule_auth
  rule_auth_badge_ids
  rule_auth_user_ids
  rule_max
  rule_max_number
  stat_my
  stat_my_monthly_sending
  stat_my_this_month
  stat_this_month
  unique_owner_ids
  check_granting()
}
class "GamificationBadge" as odoo_src.odoo.addons.hr_gamification.models.gamification.GamificationBadge {
  granted_employees_count
  get_granted_employees()
}
class "GamificationBadgeUser" as odoo_src.odoo.addons.hr_gamification.models.gamification.GamificationBadgeUser {
  employee_id
  action_open_badge()
}
class "GamificationBadgeUserWizard" as odoo_src.odoo.addons.hr_gamification.wizard.gamification_badge_user_wizard.GamificationBadgeUserWizard {
  employee_id
  user_id
  action_grant_badge()
}
class "Generate2307Wizard" as odoo_src.odoo.addons.l10n_ph.wizard.generate_2307_wizard.Generate2307Wizard {
  moves_to_export
  xls_file
  action_generate()
}
class "GeoCoder" as odoo_src.odoo.addons.base_geolocalize.models.base_geocoder.GeoCoder {
  geo_find(addr)
  geo_query_address(street, zip, city, state, country)
}
class "GeoProvider" as odoo_src.odoo.addons.base_geolocalize.models.base_geocoder.GeoProvider {
  name
  tech_name
}
class "GifFavorite" as odoo_src.odoo.addons.mail.models.discuss.discuss_gif_favorite.GifFavorite {
  tenor_gif_id
}
class "Goal" as odoo_src.odoo.addons.gamification.models.gamification_goal.Goal {
  challenge_id
  closed
  color
  completeness
  computation_mode
  current
  definition_condition
  definition_description
  definition_display
  definition_id
  definition_suffix
  end_date
  last_update
  line_id
  remind_update_delay
  start_date
  state
  target_goal
  to_update
  user_id
  action_cancel()
  action_fail()
  action_reach()
  action_start()
  create(vals_list)
  get_action()
  update_goal()
  write(vals)
}
class "GoalDefinition" as odoo_src.odoo.addons.gamification.models.gamification_goal_definition.GoalDefinition {
  action_id
  batch_distinctive_field
  batch_mode
  batch_user_expression
  computation_mode
  compute_code
  condition
  description
  display_mode
  domain
  field_date_id
  field_id
  full_suffix
  model_id
  model_inherited_ids
  monetary
  name
  res_id_field
  suffix
  create(vals_list)
  write(vals)
}
class "GoogleAuth" as odoo_src.odoo.addons.google_account.controllers.main.GoogleAuth {
  oauth2callback()
}
class "GoogleCalendarController" as odoo_src.odoo.addons.google_calendar.controllers.main.GoogleCalendarController {
  check_calendar_credentials()
  google_calendar_sync_data(model)
}
class "GoogleCalendarService" as odoo_src.odoo.addons.google_calendar.utils.google_calendar.GoogleCalendarService {
  google_service
  delete(event_id, token, timeout)
  get_events(sync_token, token, event_id, timeout)
  insert(values, token, timeout, need_video_call)
  is_authorized(user)
  patch(event_id, values, token, timeout)
}
class "GoogleEvent" as odoo_src.odoo.addons.google_calendar.utils.google_event.GoogleEvent {
  ids
  rrule
  cancelled()
  clear_type_ambiguity(env)
  exists(env) -> 'GoogleEvent'
  filter(func) -> 'GoogleEvent'
  full_recurring_event_id()
  get_meeting_url()
  get_odoo_event(env)
  is_available()
  is_cancelled()
  is_recurrence()
  is_recurrence_follower()
  is_recurrent()
  odoo_id(env)
  odoo_ids(env)
  owner(env)
}
class "GoogleGmailController" as odoo_src.odoo.addons.google_gmail.controllers.main.GoogleGmailController {
  google_gmail_callback(code, state, error)
}
class "GoogleGmailMixin" as odoo_src.odoo.addons.google_gmail.models.google_gmail_mixin.GoogleGmailMixin {
  google_gmail_access_token
  google_gmail_access_token_expiration
  google_gmail_authorization_code
  google_gmail_refresh_token
  google_gmail_uri
  open_google_gmail_uri()
}
class "GoogleService" as odoo_src.odoo.addons.google_account.models.google_service.GoogleService {
}
class "GoogleSync" as odoo_src.odoo.addons.google_calendar.models.google_sync.GoogleSync {
  active
  google_id
  need_sync
  create(vals_list)
  unlink()
  write(vals)
}
class "GoogleTranslateController" as odoo_src.odoo.addons.mail.controllers.google_translate.GoogleTranslateController {
  translate(message_id)
}
class "GreeceEDIDocument" as odoo_src.odoo.addons.l10n_gr_edi.models.l10n_gr_edi_document.GreeceEDIDocument {
  attachment_id
  datetime
  message
  move_id
  mydata_cls_mark
  mydata_mark
  mydata_url
  state
  action_download()
}
class "Groups" as odoo_src.odoo.addons.base.models.res_users.Groups {
  api_key_duration
  category_id
  color
  comment
  full_name
  menu_access
  model_access
  name
  rule_groups
  share
  users
  view_access
  copy_data(default)
  write(vals)
}
class "GroupsImplied" as odoo_src.odoo.addons.base.models.res_users.GroupsImplied {
  implied_ids
  trans_implied_ids
  create(vals_list)
  unlink()
  write(values)
}
class "GroupsView" as odoo_src.odoo.addons.account.models.res_users.GroupsView {
  get_application_groups(domain)
}
class "GroupsView" as odoo_src.odoo.addons.base.models.res_users.GroupsView {
  create(vals_list)
  get_application_groups(domain)
  get_groups_by_application()
  unlink()
  write(values)
}
class "GuestController" as odoo_src.odoo.addons.mail.controllers.guest.GuestController {
  mail_guest_update_name(guest_id, name)
}
class "HRLeave" as odoo_src.odoo.addons.hr_holidays_attendance.models.hr_leave.HRLeave {
  employee_overtime
  overtime_deductible
  overtime_id
  action_confirm()
  action_refuse()
  action_reset_confirm()
  create(vals_list)
  unlink()
  write(vals)
}
class "HRLeaveType" as odoo_src.odoo.addons.hr_holidays_attendance.models.hr_leave_type.HRLeaveType {
  overtime_deductible
  get_allocation_data(employees, date)
}
class "HTMLConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.HTMLConverter {
  value_to_html(value, options)
}
class "HTML_Editor" as odoo_src.odoo.addons.html_editor.controllers.main.HTML_Editor {
  add_data(name, data, is_image, quality, width, height, res_id, res_model)
  add_url(url, res_id, res_model)
  bus_broadcast(model_name, field_name, res_id, bus_data)
  generate_text(prompt, conversation_history)
  get_ice_servers()
  get_image_info(src)
  link_preview_metadata(preview_url)
  link_preview_metadata_internal(preview_url)
  modify_image(attachment, res_model, res_id, name, data, original_id, mimetype, alt_data)
  replace_animation_duration(shape_animation_speed: float, svg: str)
  save_library_media(media)
  shape(module, filename)
  video_url_data(video_url, autoplay, loop, hide_controls, hide_fullscreen, hide_dm_logo, hide_dm_share)
}
class "<color:red>HandleDeviceError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.HandleDeviceError {
  msg : str
  resultcode : int
}
class "HolidaysAllocation" as odoo_src.odoo.addons.hr_holidays_attendance.models.hr_leave_allocation.HolidaysAllocation {
  employee_overtime
  overtime_deductible
  overtime_id
  action_refuse()
  create(vals_list)
  default_get(fields)
  write(vals)
}
class "HolidaysAllocation" as odoo_src.odoo.addons.hr_holidays.models.hr_leave_allocation.HolidaysAllocation {
  accrual_plan_id
  active_employee
  actual_lastcall
  allocation_type
  already_accrued
  approver_id
  can_approve
  carried_over_days_expiration_date
  date_from
  date_to
  department_id
  duration_display
  employee_company_id
  employee_id
  expiring_carryover_days
  holiday_status_id
  is_name_custom
  is_officer
  last_executed_carryover_date
  lastcall
  leaves_taken
  manager_id
  max_leaves
  name
  name_validity
  nextcall
  notes
  number_of_days
  number_of_days_display
  number_of_hours_display
  second_approver_id
  state
  type_request_unit
  validation_type
  yearly_accrued_amount
  action_approve()
  action_refuse()
  action_set_to_confirm()
  action_validate()
  activity_update()
  add_follower(employee_id)
  copy(default)
  create(vals_list)
  message_subscribe(partner_ids, subtype_ids)
  onchange(values, field_names, fields_spec)
  write(values)
}
class "HolidaysRequest" as odoo_src.odoo.addons.l10n_in_hr_holidays.models.hr_leave.HolidaysRequest {
  l10n_in_contains_sandwich_leaves
}
class "HolidaysRequest" as odoo_src.odoo.addons.hr_holidays.models.hr_leave.HolidaysRequest {
  active_employee
  attachment_ids
  can_approve
  can_cancel
  can_reset
  color
  company_id
  date_from
  date_to
  department_id
  duration_display
  employee_company_id
  employee_id
  first_approver_id
  has_mandatory_day
  holiday_status_id
  is_hatched
  is_striked
  last_several_days
  leave_type_increases_duration
  leave_type_request_unit
  leave_type_support_document
  manager_id
  meeting_id
  name
  notes
  number_of_days
  number_of_hours
  private_name
  request_date_from
  request_date_from_period
  request_date_to
  request_hour_from
  request_hour_to
  request_unit_half
  request_unit_hours
  resource_calendar_id
  second_approver_id
  state
  supported_attachment_ids
  supported_attachment_ids_count
  tz
  tz_mismatch
  user_id
  validation_type
  action_approve(check_state)
  action_cancel()
  action_documents()
  action_open_records(leave_ids)
  action_refuse()
  action_reset_confirm()
  action_validate(check_state)
  activity_update()
  add_follower(employee_id)
  copy_data(default)
  create(vals_list)
  default_get(fields_list)
  get_unusual_days(date_from, date_to)
  message_subscribe(partner_ids, subtype_ids)
  onchange(values, field_names, fields_spec)
  open_pending_requests()
  unlink()
  write(values)
}
class "HolidaysSummaryEmployee" as odoo_src.odoo.addons.hr_holidays.wizard.hr_holidays_summary_employees.HolidaysSummaryEmployee {
  date_from
  emp
  holiday_type
  print_report()
}
class "HolidaysType" as odoo_src.odoo.addons.l10n_in_hr_holidays.models.hr_leave_type.HolidaysType {
  l10n_in_is_sandwich_leave
}
class "HolidaysType" as odoo_src.odoo.addons.hr_holidays.models.hr_leave_type.HolidaysType {
  accrual_count
  accruals_ids
  active
  allocation_count
  allocation_notif_subtype_id
  allocation_validation_type
  allows_negative
  color
  company_id
  country_code
  country_id
  create_calendar_meeting
  employee_requests
  group_days_leave
  has_valid_allocation
  icon_id
  include_public_holidays_in_duration
  leave_notif_subtype_id
  leave_validation_type
  leaves_taken
  max_allowed_negative
  max_leaves
  name
  request_unit
  requires_allocation
  responsible_ids
  sequence
  show_on_dashboard
  support_document
  time_type
  unpaid
  virtual_remaining_leaves
  action_see_accrual_plans()
  action_see_days_allocated()
  action_see_group_leaves()
  check_allocation_requirement_edit_validity()
  copy_data(default)
  get_allocation_data(employees, target_date)
  get_allocation_data_request(target_date, hidden_allocations)
  has_accrual_allocation()
  requested_display_name()
}
class "Home" as odoo_src.odoo.addons.bus.controllers.home.Home {
}
class "Home" as odoo_src.odoo.addons.auth_totp_mail_enforce.controllers.home.Home {
  web_totp(redirect)
}
class "Home" as odoo_src.odoo.addons.auth_totp.controllers.home.Home {
  web_totp(redirect)
}
class "HomeworkLocationWizard" as odoo_src.odoo.addons.hr_homeworking_calendar.wizard.homework_location_wizard.HomeworkLocationWizard {
  date
  day_week_string
  employee_id
  employee_name
  user_can_edit
  weekly
  work_location_id
  work_location_name
  work_location_type
  set_employee_location()
}
class "HrApplicant" as odoo_src.odoo.addons.hr_recruitment_skills.models.hr_applicant.HrApplicant {
  candidate_skill_ids
  skill_ids
}
class "HrAttendance" as odoo_src.odoo.addons.hr_holidays_attendance.models.hr_attendance.HrAttendance {
}
class "HrAttendance" as odoo_src.odoo.addons.hr_attendance.models.hr_attendance.HrAttendance {
  check_in
  check_out
  color
  department_id
  employee_id
  expected_hours
  in_browser
  in_city
  in_country_name
  in_ip_address
  in_latitude
  in_longitude
  in_mode
  manager_id
  no_validated_overtime_hours
  out_browser
  out_city
  out_country_name
  out_ip_address
  out_latitude
  out_longitude
  out_mode
  overtime_hours
  overtime_status
  validated_overtime_hours
  worked_hours
  action_approve_overtime()
  action_in_attendance_maps()
  action_out_attendance_maps()
  action_refuse_overtime()
  action_try_kiosk()
  copy(default)
  create(vals_list)
  get_kiosk_url()
  has_demo_data()
  unlink()
  write(vals)
}
class "HrAttendance" as odoo_src.odoo.addons.hr_attendance.controllers.main.HrAttendance {
  employee_attendance_data(token, employee_id)
  employees_infos(token, limit, offset, domain)
  has_password()
  is_fresh_db(token)
  kiosk_keepalive()
  kiosk_menu_item_action(company_id)
  manual_selection(token, employee_id, pin_code)
  manual_selection_with_geolocation(token, employee_id, pin_code, latitude, longitude)
  open_kiosk_mode(token, from_trial_mode)
  scan_barcode(token, barcode)
  set_attendance_settings(token, mode)
  set_user_barcode(token, barcode)
  systray_attendance(latitude, longitude)
  user_attendance_data()
}
class "HrAttendanceOvertime" as odoo_src.odoo.addons.hr_attendance.models.hr_attendance_overtime.HrAttendanceOvertime {
  adjustment
  company_id
  date
  duration
  duration_real
  employee_id
  init()
}
class "HrCandidate" as odoo_src.odoo.addons.hr_recruitment_skills.models.hr_candidate.HrCandidate {
  candidate_skill_ids
  matching_score
  matching_skill_ids
  missing_skill_ids
  skill_ids
  action_create_application()
}
class "HrCandidate" as odoo_src.odoo.addons.hr_recruitment.models.hr_candidate.HrCandidate {
  accepted_applications_count
  active
  applicant_ids
  application_count
  applications_count
  attachment_count
  attachment_ids
  availability
  candidate_properties
  categ_ids
  color
  company_id
  email_from
  email_normalized
  emp_is_active
  employee_id
  employee_name
  linkedin_profile
  meeting_display_date
  meeting_display_text
  meeting_ids
  partner_id
  partner_name
  partner_phone
  partner_phone_sanitized
  priority
  refused_applications_count
  similar_candidates_count
  type_id
  user_id
  action_create_meeting()
  action_open_applications()
  action_open_attachments()
  action_open_employee()
  action_open_similar_candidates()
  action_send_email()
  create_employee_from_candidate()
  init()
  write(vals)
}
class "HrContract" as odoo_src.odoo.addons.hr_work_entry_contract.models.hr_contract.HrContract {
  date_generated_from
  date_generated_to
  last_generation_date
  work_entry_source
  work_entry_source_calendar_invalid
  generate_work_entries(date_start, date_stop, force)
  has_static_work_entries()
  write(vals)
}
class "HrContract" as odoo_src.odoo.addons.l10n_fr_hr_work_entry_holidays.models.hr_contract.HrContract {
}
class "HrContract" as odoo_src.odoo.addons.hr_work_entry_holidays.models.hr_contract.HrContract {
}
class "HrContract" as odoo_src.odoo.addons.hr_holidays_contract.models.hr_contract.HrContract {
  write(vals)
}
class "HrDepartment" as odoo_src.odoo.addons.hr_recruitment.models.hr_department.HrDepartment {
  expected_employee
  new_applicant_count
  new_hired_employee
}
class "HrDepartment" as odoo_src.odoo.addons.hr_expense.models.hr_department.HrDepartment {
  expense_sheets_to_approve_count
}
class "HrDepartureWizard" as odoo_src.odoo.addons.hr_holidays.wizard.hr_departure_wizard.HrDepartureWizard {
  action_register_departure()
}
class "HrDepartureWizard" as odoo_src.odoo.addons.hr.wizard.hr_departure_wizard.HrDepartureWizard {
  departure_date
  departure_description
  departure_reason_id
  employee_id
  action_register_departure()
}
class "HrDepartureWizard" as odoo_src.odoo.addons.hr_maintenance.wizard.hr_departure_wizard.HrDepartureWizard {
  unassign_equipment
  action_register_departure()
}
class "HrDepartureWizard" as odoo_src.odoo.addons.hr_fleet.wizard.hr_departure_wizard.HrDepartureWizard {
  release_campany_car
  action_register_departure()
}
class "HrDepartureWizard" as odoo_src.odoo.addons.hr_contract.wizard.hr_departure_wizard.HrDepartureWizard {
  set_date_end
  action_register_departure()
}
class "HrEmployeDeleteWizard" as odoo_src.odoo.addons.hr_timesheet.wizard.hr_employee_delete_wizard.HrEmployeDeleteWizard {
  employee_ids
  has_active_employee
  has_timesheet
  action_archive()
  action_confirm_delete()
  action_open_timesheets()
}
class "HrEmployee" as odoo_src.odoo.addons.hr_work_entry.models.hr_employee.HrEmployee {
  has_work_entries
  action_open_work_entries(initial_date)
}
class "HrEmployee" as odoo_src.odoo.addons.hr_work_entry_contract.models.hr_employee.HrEmployee {
  generate_work_entries(date_start, date_stop, force)
}
class "HrEmployee" as odoo_src.odoo.addons.hr_attendance.models.hr_employee.HrEmployee {
  attendance_ids
  attendance_manager_id
  attendance_state
  hours_last_month
  hours_last_month_display
  hours_previously_today
  hours_today
  last_attendance_id
  last_attendance_worked_hours
  last_check_in
  last_check_out
  overtime_ids
  total_overtime
  action_open_last_month_attendances()
  action_open_last_month_overtime()
  create(vals_list)
  write(values)
}
class "HrEmployee" as odoo_src.odoo.addons.hr_hourly_cost.models.hr_employee.HrEmployee {
  hourly_cost
}
class "HrEmployee" as odoo_src.odoo.addons.hr_recruitment.models.hr_employee.HrEmployee {
  candidate_id
  create(vals_list)
}
class "HrEmployee" as odoo_src.odoo.addons.hr_timesheet.models.hr_employee.HrEmployee {
  has_timesheet
  action_timesheet_from_employee()
  action_unlink_wizard()
}
class "HrEmployee" as odoo_src.odoo.addons.hr_holidays.models.hr_employee.HrEmployee {
  current_leave_id
  action_time_off_dashboard()
  get_allocation_requests_amount()
  get_mandatory_days(start_date, end_date)
  get_mandatory_days_data(date_start, date_end)
  get_public_holidays_data(date_start, date_end)
  get_special_days_data(date_start, date_end)
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_org_chart.models.hr_org_chart_mixin.HrEmployeeBase {
  child_all_count
  child_count
  department_color
  is_subordinate : bool
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_attendance.models.hr_employee_base.HrEmployeeBase {
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_presence.models.hr_employee_base.HrEmployeeBase {
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_homeworking_calendar.models.hr_employee.HrEmployeeBase {
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_gamification.models.hr_employee.HrEmployeeBase {
  badge_ids
  direct_badge_ids
  goal_ids
  has_badges
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_holidays.models.hr_employee_base.HrEmployeeBase {
  allocation_count
  allocation_display
  allocation_remaining_display
  allocations_count
  current_leave_state
  hr_icon_display
  is_absent
  leave_date_from
  leave_date_to
  leave_manager_id
  leaves_count
  remaining_leaves
  show_leaves
  create(vals_list)
  write(values)
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr.models.hr_employee_base.HrEmployeeBase {
  active
  address_id
  coach_id
  color
  company_id
  department_id
  email
  hr_icon_display
  hr_presence_state
  im_status
  is_flexible
  is_fully_flexible
  job_id
  job_title
  last_activity
  last_activity_time
  member_of_department
  mobile_phone
  name
  newly_hired
  parent_id
  phone
  resource_calendar_id
  resource_id
  share
  show_hr_icon_display
  tz
  user_id
  work_contact_id
  work_email
  work_location_id
  work_location_name
  work_location_type
  work_phone
  get_avatar_card_data(fields)
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_homeworking.models.hr_employee.HrEmployeeBase {
  exceptional_location_id
  friday_location_id
  hr_icon_display
  monday_location_id
  saturday_location_id
  sunday_location_id
  thursday_location_id
  today_location_name
  tuesday_location_id
  wednesday_location_id
  get_views(views, options)
}
class "HrEmployeeBase" as odoo_src.odoo.addons.hr_holidays_contract.models.hr_employee_base.HrEmployeeBase {
  write(vals)
}
class "HrEmployeeCV" as odoo_src.odoo.addons.hr_skills.controllers.main.HrEmployeeCV {
  print_employee_cv(employee_ids, color_primary, color_secondary)
}
class "HrEmployeeCVWizard" as odoo_src.odoo.addons.hr_skills.wizard.hr_employee_cv_wizard.HrEmployeeCVWizard {
  can_show_others
  can_show_skills
  color_primary
  color_secondary
  employee_ids
  show_contact
  show_others
  show_skills
  action_validate()
}
class "HrEmployeeLocation" as odoo_src.odoo.addons.hr_homeworking.models.hr_homeworking.HrEmployeeLocation {
  date
  day_week_string
  employee_id
  employee_name
  work_location_id
  work_location_name
  work_location_type
}
class "HrEmployeePrivate" as odoo_src.odoo.addons.hr.models.hr_employee.HrEmployeePrivate {
  active
  activity_date_deadline
  activity_exception_decoration
  activity_exception_icon
  activity_ids
  activity_state
  activity_summary
  activity_type_icon
  activity_type_id
  activity_user_id
  additional_note
  bank_account_id
  barcode
  birthday
  category_ids
  certificate
  child_ids
  children
  color
  company_country_code
  company_country_id
  company_id
  country_id
  country_of_birth
  currency_id
  department_id
  departure_date
  departure_description
  departure_reason_id
  distance_home_work
  distance_home_work_unit
  driving_license
  emergency_contact
  emergency_phone
  employee_properties
  employee_type
  gender
  has_message
  has_work_permit
  id_card
  identification_id
  job_id
  km_home_work
  lang
  marital
  message_attachment_count
  message_follower_ids
  message_has_error
  message_has_error_counter
  message_ids
  message_is_follower
  message_main_attachment_id
  message_needaction
  message_needaction_counter
  message_partner_ids
  my_activity_date_deadline
  name
  notes
  passport_id
  permit_no
  pin
  place_of_birth
  private_car_plate
  private_city
  private_country_id
  private_email
  private_phone
  private_state_id
  private_street
  private_street2
  private_zip
  related_partners_count
  resource_calendar_id
  sinid
  spouse_birthdate
  spouse_complete_name
  ssnid
  study_field
  study_school
  tz
  user_id
  user_partner_id
  visa_expire
  visa_no
  work_permit_expiration_date
  work_permit_name
  work_permit_scheduled_activity
  action_create_user()
  action_related_contacts()
  check_field_access_rights(operation, field_names)
  create(vals_list)
  fetch(field_names)
  generate_random_barcode()
  get_formview_action(access_uid)
  get_formview_id(access_uid)
  get_import_templates()
  get_view(view_id, view_type)
  get_views(views, options)
  search_fetch(domain, field_names, offset, limit, order)
  toggle_active()
  unlink()
  write(vals)
}
class "HrEmployeePublic" as odoo_src.odoo.addons.hr_org_chart.models.hr_employee.HrEmployeePublic {
  is_subordinate
  subordinate_ids
}
class "HrEmployeePublic" as odoo_src.odoo.addons.hr_attendance.models.hr_employee_public.HrEmployeePublic {
  attendance_manager_id
  attendance_state
  hours_today
  last_attendance_id
  last_check_in
  last_check_out
  total_overtime
}
class "HrEmployeePublic" as odoo_src.odoo.addons.hr.models.hr_employee_public.HrEmployeePublic {
  active
  address_id
  avatar_1024
  avatar_128
  avatar_1920
  avatar_256
  avatar_512
  child_ids
  coach_id
  color
  company_id
  create_date
  department_id
  employee_id
  image_1024
  image_128
  image_1920
  image_256
  image_512
  is_manager
  job_id
  job_title
  mobile_phone
  name
  parent_id
  resource_id
  tz
  user_id
  user_partner_id
  work_contact_id
  work_email
  work_location_id
  work_phone
  init()
}
class "HrEmployeeSkillLog" as odoo_src.odoo.addons.hr_skills.models.hr_employee_skill_log.HrEmployeeSkillLog {
  date
  department_id
  employee_id
  level_progress
  skill_id
  skill_level_id
  skill_type_id
}
class "HrEmployeeSkillReport" as odoo_src.odoo.addons.hr_skills.report.hr_employee_skill_report.HrEmployeeSkillReport {
  active
  company_id
  department_id
  display_name
  id
  level_progress
  skill_id
  skill_level
  skill_type_id
  init()
}
class "HrExpense" as odoo_src.odoo.addons.hr_expense.models.hr_expense.HrExpense {
  account_id
  accounting_date
  approved_by
  approved_on
  attachment_ids
  company_currency_id
  company_id
  currency_id
  currency_rate
  date
  description
  duplicate_expense_ids
  employee_id
  is_editable
  is_multiple_currency
  label_currency_rate
  message_main_attachment_checksum
  name
  nb_attachment
  payment_mode
  price_unit
  product_description
  product_has_cost
  product_has_tax
  product_id
  product_uom_category_id
  product_uom_id
  quantity
  same_receipt_expense_ids
  sheet_id
  state
  tax_amount
  tax_amount_currency
  tax_ids
  total_amount
  total_amount_currency
  untaxed_amount_currency
  vendor_id
  action_approve_duplicates()
  action_get_attachment_view()
  action_show_same_receipt_expense_ids()
  action_split_wizard()
  action_submit_expenses()
  action_view_sheet()
  attach_document()
  check_amount_not_zero(vals)
  create(vals_list)
  create_expense_from_attachments(attachment_ids, view_type)
  get_empty_list_help(help_message)
  get_expense_attachments()
  get_expense_dashboard()
  get_expenses_to_submit()
  message_new(msg_dict, custom_values)
  unlink()
  write(vals)
}
class "HrExpenseApproveDuplicate" as odoo_src.odoo.addons.hr_expense.wizard.hr_expense_approve_duplicate.HrExpenseApproveDuplicate {
  expense_ids
  sheet_ids
  action_approve()
  action_refuse()
  default_get(fields)
}
class "HrExpenseRefuseWizard" as odoo_src.odoo.addons.hr_expense.wizard.hr_expense_refuse_reason.HrExpenseRefuseWizard {
  reason
  sheet_ids
  action_refuse()
  default_get(fields)
}
class "HrExpenseSheet" as odoo_src.odoo.addons.hr_expense.models.hr_expense_sheet.HrExpenseSheet {
  account_move_ids
  accounting_date
  amount_residual
  approval_date
  approval_state
  attachment_ids
  can_approve
  can_reset
  cannot_approve_reason
  company_currency_id
  company_id
  currency_id
  department_id
  employee_id
  employee_journal_id
  expense_line_ids
  is_editable
  is_multiple_currency
  journal_id
  message_main_attachment_id
  name
  nb_account_move
  nb_expense
  payment_method_line_id
  payment_mode
  payment_state
  product_ids
  selectable_payment_method_line_ids
  state
  total_amount
  total_tax_amount
  untaxed_amount
  user_id
  action_approve_expense_sheets()
  action_open_account_moves()
  action_open_expense_view()
  action_refuse_expense_sheets()
  action_register_payment()
  action_reset_expense_sheets()
  action_sheet_move_post()
  action_submit_sheet()
  activity_update()
  create(vals_list)
  set_to_paid()
  set_to_posted()
  write(values)
}
class "HrExpenseSplit" as odoo_src.odoo.addons.hr_expense.wizard.hr_expense_split.HrExpenseSplit {
  company_id
  currency_id
  employee_id
  expense_id
  name
  product_has_cost
  product_has_tax
  product_id
  tax_amount_currency
  tax_ids
  total_amount_currency
  wizard_id
  default_get(fields)
}
class "HrExpenseSplitWizard" as odoo_src.odoo.addons.hr_expense.wizard.hr_expense_split_wizard.HrExpenseSplitWizard {
  currency_id
  expense_id
  expense_split_line_ids
  split_possible
  tax_amount_currency
  total_amount_currency
  total_amount_currency_original
  action_split_expense()
}
class "HrHolidaySummaryReport" as odoo_src.odoo.addons.hr_holidays.report.holidays_summary_report.HrHolidaySummaryReport {
}
class "HrHolidaysCancelLeave" as odoo_src.odoo.addons.hr_holidays.wizard.hr_holidays_cancel_leave.HrHolidaysCancelLeave {
  leave_id
  reason
  action_cancel_leave()
}
class "HrHolidaysController" as odoo_src.odoo.addons.hr_holidays.controllers.main.HrHolidaysController {
  hr_holidays_allocation_refuse(res_id, token)
  hr_holidays_allocation_validate(res_id, token)
  hr_holidays_request_approve(res_id, token)
  hr_holidays_request_refuse(res_id, token)
  hr_holidays_request_validate(res_id, token)
}
class "HrJob" as odoo_src.odoo.addons.hr_recruitment_skills.models.hr_job.HrJob {
  skill_ids
  action_search_matching_candidates()
}
class "HrLeave" as odoo_src.odoo.addons.hr_work_entry_holidays.models.hr_leave.HrLeave {
  action_refuse()
  action_reset_confirm()
  create(vals_list)
  write(vals)
}
class "HrLeave" as odoo_src.odoo.addons.hr_holidays_contract.models.hr_leave.HrLeave {
}
class "HrLeave" as odoo_src.odoo.addons.l10n_fr_hr_holidays.models.hr_leave.HrLeave {
  l10n_fr_date_to_changed
}
class "HrLeaveAllocationGenerateMultiWizard" as odoo_src.odoo.addons.hr_holidays.wizard.hr_leave_allocation_generate_multi_wizard.HrLeaveAllocationGenerateMultiWizard {
  accrual_plan_id
  allocation_mode
  allocation_type
  category_id
  company_id
  date_from
  date_to
  department_id
  duration
  employee_ids
  holiday_status_id
  name
  notes
  request_unit
  action_generate_allocations()
}
class "HrLeaveGenerateMultiWizard" as odoo_src.odoo.addons.hr_holidays.wizard.hr_leave_generate_multi_wizard.HrLeaveGenerateMultiWizard {
  allocation_mode
  category_id
  company_id
  date_from
  date_to
  department_id
  employee_ids
  holiday_status_id
  name
  action_generate_time_off()
}
class "HrLeaveType" as odoo_src.odoo.addons.hr_work_entry_holidays.models.hr_leave.HrLeaveType {
  work_entry_type_id
}
class "HrManagerDepartmentReport" as odoo_src.odoo.addons.hr.report.hr_manager_department_report.HrManagerDepartmentReport {
  employee_id
  has_department_manager_access
}
class "HrOrgChartController" as odoo_src.odoo.addons.hr_org_chart.controllers.hr_org_chart.HrOrgChartController {
  get_org_chart(employee_id)
  get_redirect_model()
  get_subordinates(employee_id, subordinates_type)
}
class "HrPayrollStructureType" as odoo_src.odoo.addons.hr_contract.models.hr_payroll_structure_type.HrPayrollStructureType {
  country_code
  country_id
  default_resource_calendar_id
  name
}
class "HrWorkEntry" as odoo_src.odoo.addons.hr_work_entry.models.hr_work_entry.HrWorkEntry {
  active
  code
  color
  company_id
  conflict
  country_id
  date_start
  date_stop
  department_id
  duration
  employee_id
  external_code
  name
  state
  work_entry_type_id
  action_validate()
  create(vals_list)
  init()
  unlink()
  write(vals)
}
class "HrWorkEntry" as odoo_src.odoo.addons.hr_work_entry_contract.models.hr_work_entry.HrWorkEntry {
  contract_id
  employee_id
  work_entry_source
  create(vals_list)
  init()
}
class "HrWorkEntry" as odoo_src.odoo.addons.l10n_fr_hr_work_entry_holidays.models.hr_work_entry.HrWorkEntry {
}
class "HrWorkEntry" as odoo_src.odoo.addons.hr_work_entry_holidays.models.hr_work_entry.HrWorkEntry {
  leave_id
  leave_state
  action_approve_leave()
  action_refuse_leave()
  write(vals)
}
class "HrWorkEntryRegenerationWizard" as odoo_src.odoo.addons.hr_work_entry_contract.wizard.hr_work_entry_regeneration_wizard.HrWorkEntryRegenerationWizard {
  date_from
  date_to
  earliest_available_date
  earliest_available_date_message
  employee_ids
  latest_available_date
  latest_available_date_message
  search_criteria_completed
  valid
  validated_work_entry_ids
  regenerate_work_entries()
}
class "HrWorkEntryType" as odoo_src.odoo.addons.hr_work_entry.models.hr_work_entry.HrWorkEntryType {
  active
  code
  color
  country_code
  country_id
  external_code
  name
  sequence
}
class "HrWorkEntryType" as odoo_src.odoo.addons.hr_work_entry_contract.models.hr_work_entry.HrWorkEntryType {
  is_leave
}
class "HrWorkEntryType" as odoo_src.odoo.addons.hr_work_entry_holidays.models.hr_work_entry.HrWorkEntryType {
  leave_type_ids
}
class "Http" as odoo_src.odoo.addons.auth_signup.models.ir_http.Http {
}
class "Http" as odoo_src.odoo.addons.google_recaptcha.models.ir_http.Http {
  get_frontend_session_info()
  session_info()
}
class "Http" as odoo_src.odoo.addons.partner_autocomplete.models.ir_http.Http {
  session_info()
}
class "Http" as odoo_src.odoo.addons.bus.models.ir_http.Http {
  get_frontend_session_info()
  session_info()
}
class "Http" as odoo_src.odoo.addons.hr_timesheet.models.ir_http.Http {
  get_timesheet_uoms()
  session_info()
}
class "HttpCaseGamification" as odoo_src.odoo.addons.gamification.tests.common.HttpCaseGamification {
  setUp()
}
class "HttpCaseWithUserDemo" as odoo_src.odoo.addons.base.tests.common.HttpCaseWithUserDemo {
  setUpClass()
}
class "HttpCaseWithUserPortal" as odoo_src.odoo.addons.base.tests.common.HttpCaseWithUserPortal {
  setUpClass()
}
class "I18nTest" as odoo_src.odoo.addons.base.tests.test_i18n.I18nTest {
  test_format_list()
  test_py_to_js_locale()
}
class "<color:red>IAPServerError</color>" as odoo_src.odoo.addons.iap.tools.iap_tools.IAPServerError {
}
class "IMAP4Connection" as odoo_src.odoo.addons.mail.models.fetchmail.IMAP4Connection {
}
class "IapAccount" as odoo_src.odoo.addons.iap_mail.models.iap_account.IapAccount {
  company_ids
  warning_threshold
  warning_user_ids
}
class "IapAccount" as odoo_src.odoo.addons.iap.models.iap_account.IapAccount {
  account_token
  balance
  company_ids
  description
  name
  service_id
  service_locked
  service_name
  state
  warning_threshold
  warning_user_ids
  action_buy_credits()
  create(vals_list)
  get(service_name, force_create)
  get_account_id(service_name)
  get_config_account_url()
  get_credits(service_name)
  get_credits_url(service_name, base_url, credit, trial, account_token)
  is_running_test_suite()
  validate_warning_alerts()
  web_read()
  web_save()
  write(values)
}
class "IapAccount" as odoo_src.odoo.addons.l10n_in.models.iap_account.IapAccount {
}
class "IapAutocompleteEnrichAPI" as odoo_src.odoo.addons.partner_autocomplete.models.iap_autocomplete_api.IapAutocompleteEnrichAPI {
}
class "IapEnrichAPI" as odoo_src.odoo.addons.iap.models.iap_enrich_api.IapEnrichAPI {
}
class "IapService" as odoo_src.odoo.addons.iap.models.iap_service.IapService {
  description
  integer_balance
  name
  technical_name
  unit_name
}
class "IapTransaction" as odoo_src.odoo.addons.iap.tools.iap_tools.IapTransaction {
  credit : NoneType
}
class "IdentificationFieldsNoFoldPolicy" as odoo_src.odoo.addons.base.models.ir_mail_server.IdentificationFieldsNoFoldPolicy {
}
class "ImBus" as odoo_src.odoo.addons.bus.models.bus.ImBus {
  channel
  message
}
class "ImDispatch" as odoo_src.odoo.addons.bus.models.bus.ImDispatch {
  loop()
  run()
  subscribe(channels, last, db, websocket)
  unsubscribe(websocket)
}
class "ImLivechatChannel" as odoo_src.odoo.addons.im_livechat.models.im_livechat_channel.ImLivechatChannel {
  are_you_inside
  available_operator_ids
  button_background_color
  button_text
  button_text_color
  channel_ids
  chatbot_script_count
  default_message
  header_background_color
  image_128
  input_placeholder
  name
  nbr_channel
  rule_ids
  script_external
  title_color
  user_ids
  web_page
  action_join()
  action_quit()
  action_view_chatbot_scripts()
  action_view_rating()
  get_livechat_info(username)
}
class "ImLivechatChannelRule" as odoo_src.odoo.addons.im_livechat.models.im_livechat_channel.ImLivechatChannelRule {
  action
  auto_popup_timer
  channel_id
  chatbot_only_if_no_operator
  chatbot_script_id
  country_ids
  regex_url
  sequence
  match_rule(channel_id, url, country_id)
}
class "ImLivechatReportChannel" as odoo_src.odoo.addons.im_livechat.report.im_livechat_report_channel.ImLivechatReportChannel {
  channel_id
  channel_name
  country_id
  day_number
  days_of_activity
  duration
  is_anonymous
  is_happy
  is_unrated
  is_without_answer
  livechat_channel_id
  nbr_message
  nbr_speaker
  partner_id
  rating
  rating_text
  start_date
  start_date_hour
  start_hour
  technical_name
  time_to_answer
  uuid
  init()
}
class "ImLivechatReportOperator" as odoo_src.odoo.addons.im_livechat.report.im_livechat_report_operator.ImLivechatReportOperator {
  channel_id
  duration
  livechat_channel_id
  nbr_channel
  partner_id
  rating
  start_date
  time_to_answer
  init()
}
class "ImageConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.ImageConverter {
  value_to_html(value, options)
}
class "ImageMixin" as odoo_src.odoo.addons.base.models.image_mixin.ImageMixin {
  image_1024
  image_128
  image_1920
  image_256
  image_512
}
class "<color:red>ImageSizeError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.ImageSizeError {
  msg : str
  resultcode : int
}
class "ImageUrlConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.ImageUrlConverter {
  value_to_html(value, options)
}
class "Import" as odoo_src.odoo.addons.base_import.models.base_import.Import {
  FUZZY_MATCH_DISTANCE : float
  file
  file_name
  file_type
  res_model
  execute_import(fields, columns, options, dryrun)
  get_fields_tree(model, depth)
  parse_preview(options, count)
}
class "ImportController" as odoo_src.odoo.addons.base_import.controllers.main.ImportController {
  set_file(id)
}
class "ImportMapping" as odoo_src.odoo.addons.base_import.models.base_import.ImportMapping {
  column_name
  field_name
  res_model
}
class "ImportModule" as odoo_src.odoo.addons.base_import_module.controllers.main.ImportModule {
  login_upload(login, password, force, mod_file)
}
class "<color:red>ImportValidationError</color>" as odoo_src.odoo.addons.base_import.models.base_import.ImportValidationError {
  field_path : bool, list
  field_type
  message
  not_matching_error : bool
  record : bool
  type
}
class "<color:red>ImportWarning</color>" as odoo_src.odoo.addons.base.models.ir_fields.ImportWarning {
}
class "<color:red>InsufficientCreditError</color>" as odoo_src.odoo.addons.iap.tools.iap_tools.InsufficientCreditError {
  args : tuple
  data
}
class "IntegerConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.IntegerConverter {
  get_available_options()
  value_to_html(value, options)
}
class "Interface" as odoo_src.odoo.addons.hw_drivers.interface.Interface {
  connection_type : str
  drivers
  {abstract}get_devices()
  run()
  update_iot_devices(devices)
}
class "InterfaceMetaClass" as odoo_src.odoo.addons.hw_drivers.interface.InterfaceMetaClass {
}
class "<color:red>InvalidCloseCodeException</color>" as odoo_src.odoo.addons.bus.websocket.InvalidCloseCodeException {
}
class "<color:red>InvalidDatabaseException</color>" as odoo_src.odoo.addons.bus.websocket.InvalidDatabaseException {
}
class "<color:red>InvalidStateException</color>" as odoo_src.odoo.addons.bus.websocket.InvalidStateException {
}
class "<color:red>InvalidSyncToken</color>" as odoo_src.odoo.addons.google_calendar.utils.google_calendar.InvalidSyncToken {
}
class "<color:red>InvalidSyncToken</color>" as odoo_src.odoo.addons.microsoft_calendar.utils.microsoft_calendar.InvalidSyncToken {
}
class "<color:red>InvalidVapidError</color>" as odoo_src.odoo.addons.mail.tools.jwt.InvalidVapidError {
}
class "<color:red>InvalidWebsocketRequest</color>" as odoo_src.odoo.addons.bus.websocket.InvalidWebsocketRequest {
}
class "Invite" as odoo_src.odoo.addons.mail.wizard.mail_wizard_invite.Invite {
  message
  notify
  partner_ids
  res_id
  res_model
  add_followers()
}
class "InvoiceGetReferenceTest" as odoo_src.odoo.addons.l10n_fi.tests.test_get_reference.InvoiceGetReferenceTest {
  setUpClass()
  test_get_reference_finnish_invoice()
  test_get_reference_finnish_partner()
  test_get_reference_finnish_rf_invoice()
  test_get_reference_finnish_rf_partner()
}
class "IoTboxHomepage" as odoo_src.odoo.addons.hw_posbox_homepage.controllers.main.IoTboxHomepage {
  updating : lock
  check_version()
  clean_partition()
  perform_flashing_copy_raspios()
  perform_flashing_create_partition()
  perform_flashing_download_raspios()
  perform_upgrade()
}
class "IotBoxOwlHomePage" as odoo_src.odoo.addons.hw_posbox_homepage.controllers.homepage.IotBoxOwlHomePage {
  updating : lock
  add_six_terminal(terminal_id)
  clear_credential()
  clear_iot_handlers()
  clear_server_configuration()
  clear_six_terminal()
  clear_wifi_configuration()
  connect_to_odoo_server(token, iotname)
  enable_remote_connection(auth_token)
  generate_password()
  get_available_wifi()
  get_homepage_data()
  get_iot_logs()
  get_version_info()
  index()
  load_iot_log_level()
  log_levels()
  logs_page()
  odoo_service_restart()
  ping()
  save_credential(db_uuid, enterprise_code)
  update_git_tree()
  update_log_level(name, value)
  update_wifi(essid, password, persistent)
}
class "IrActions" as odoo_src.odoo.addons.base.models.ir_actions.IrActions {
  binding_model_id
  binding_type
  binding_view_types
  help
  name
  path
  type
  xml_id
  create(vals_list)
  get_bindings(model_name)
  unlink()
  write(vals)
}
class "IrActionsActClient" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsActClient {
  context
  params
  params_store
  res_model
  tag
  target
  type
}
class "IrActionsActUrl" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsActUrl {
  target
  type
  url
}
class "IrActionsActWindow" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsActWindow {
  context
  domain
  embedded_action_ids
  filter
  groups_id
  limit
  mobile_view_mode
  res_id
  res_model
  search_view_id
  target
  type
  usage
  view_id
  view_ids
  view_mode
  views
  create(vals_list)
  exists()
  read(fields, load)
  unlink()
}
class "IrActionsActWindowView" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsActWindowView {
  act_window_id
  multi
  sequence
  view_id
  view_mode
}
class "IrActionsActWindowclose" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsActWindowclose {
  type
}
class "IrActionsReport" as odoo_src.odoo.addons.l10n_de.models.ir_actions_report.IrActionsReport {
}
class "IrActionsReport" as odoo_src.odoo.addons.l10n_th.models.ir_actions_report.IrActionsReport {
}
class "IrActionsReport" as odoo_src.odoo.addons.hr_expense.models.ir_actions_report.IrActionsReport {
}
class "IrActionsReport" as odoo_src.odoo.addons.account_edi_ubl_cii.models.ir_actions_report.IrActionsReport {
}
class "IrActionsReport" as odoo_src.odoo.addons.account.models.ir_actions_report.IrActionsReport {
  is_invoice_report
}
class "IrActionsReport" as odoo_src.odoo.addons.l10n_ch.models.ir_actions_report.IrActionsReport {
  apply_qr_code_ch_cross_mask(width, height, barcode_drawing)
  get_available_barcode_masks()
  get_paperformat()
}
class "IrActionsReport" as odoo_src.odoo.addons.account_edi.models.ir_actions_report.IrActionsReport {
}
class "IrActionsReport" as odoo_src.odoo.addons.base.models.ir_actions_report.IrActionsReport {
  attachment
  attachment_use
  binding_type
  domain
  groups_id
  model
  model_id
  multi
  paperformat_id
  print_report_name
  report_file
  report_name
  report_type
  type
  associated_view()
  barcode(barcode_type, value)
  create_action()
  get_available_barcode_masks()
  get_paperformat()
  get_paperformat_by_xmlid(xml_id)
  get_valid_action_reports(model, record_ids)
  get_wkhtmltopdf_state()
  report_action(docids, data, config)
  retrieve_attachment(record)
  unlink_action()
}
class "IrActionsServer" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsServer {
  DEFAULT_PYTHON_CODE : str
  available_model_ids
  child_ids
  code
  crud_model_id
  crud_model_name
  evaluation_type
  groups_id
  link_field_id
  model_id
  model_name
  name
  resource_ref
  selection_value
  sequence
  state
  type
  update_boolean_value
  update_field_id
  update_field_type
  update_m2m_operation
  update_path
  update_related_model_id
  usage
  value
  value_field_to_show
  webhook_field_ids
  webhook_sample_payload
  webhook_url
  copy_data(default)
  create_action()
  run()
  unlink_action()
}
class "IrActionsTodo" as odoo_src.odoo.addons.base.models.ir_actions.IrActionsTodo {
  action_id
  name
  sequence
  state
  action_launch()
  action_open()
  create(vals_list)
  ensure_one_open_todo()
  unlink()
  write(vals)
}
class "IrAsset" as odoo_src.odoo.addons.base.models.ir_asset.IrAsset {
  active
  bundle
  directive
  name
  path
  sequence
  target
  create(vals_list)
  unlink()
  write(values)
}
class "IrAttachment" as odoo_src.odoo.addons.l10n_de.models.ir_attachment.IrAttachment {
  unlink()
  write(vals)
}
class "IrAttachment" as odoo_src.odoo.addons.l10n_sa_edi.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.attachment_indexation.models.ir_attachment.IrAttachment {
  copy(default)
}
class "IrAttachment" as odoo_src.odoo.addons.cloud_storage_google.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.l10n_sa.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.mail.models.ir_attachment.IrAttachment {
  register_as_main_attachment(force)
}
class "IrAttachment" as odoo_src.odoo.addons.mail.models.discuss.ir_attachment.IrAttachment {
  voice_ids
}
class "IrAttachment" as odoo_src.odoo.addons.bus.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.cloud_storage_azure.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.html_editor.models.ir_attachment.IrAttachment {
  image_height
  image_src
  image_width
  local_url
  original_id
}
class "IrAttachment" as odoo_src.odoo.addons.hr_expense.models.ir_attachment.IrAttachment {
  create(vals_list)
  unlink()
}
class "IrAttachment" as odoo_src.odoo.addons.account.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.account_edi.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.base.models.ir_attachment.IrAttachment {
  access_token
  checksum
  company_id
  datas
  db_datas
  description
  file_size
  index_content
  mimetype
  name
  public
  raw
  res_field
  res_id
  res_model
  res_name
  store_fname
  type
  url
  action_get()
  check(mode, values)
  copy_data(default)
  create(vals_list)
  create_unique(values_list)
  force_storage()
  generate_access_token()
  get_serving_groups()
  regenerate_assets_bundles()
  unlink()
  validate_access(access_token)
  write(vals)
}
class "IrAttachment" as odoo_src.odoo.addons.l10n_it_edi.models.ir_attachment.IrAttachment {
}
class "IrAttachment" as odoo_src.odoo.addons.l10n_jo_edi.models.ir_attachment.IrAttachment {
}
class "IrBinary" as odoo_src.odoo.addons.point_of_sale.models.ir_binary.IrBinary {
}
class "IrBinary" as odoo_src.odoo.addons.base.models.ir_binary.IrBinary {
}
class "IrConfigParameter" as odoo_src.odoo.addons.mail.models.ir_config_parameter.IrConfigParameter {
  set_param(key, value)
}
class "IrConfigParameter" as odoo_src.odoo.addons.crm.models.ir_config_parameter.IrConfigParameter {
  create(vals_list)
  unlink()
  write(vals)
}
class "IrConfigParameter" as odoo_src.odoo.addons.auth_oauth.models.ir_config_parameter.IrConfigParameter {
  init(force)
}
class "IrConfigParameter" as odoo_src.odoo.addons.base.models.ir_config_parameter.IrConfigParameter {
  key
  value
  create(vals_list)
  get_param(key, default)
  init(force)
  set_param(key, value)
  unlink()
  unlink_default_parameters()
  write(vals)
}
class "IrCron" as odoo_src.odoo.addons.mail.models.ir_cron.IrCron {
}
class "IrDefault" as odoo_src.odoo.addons.base.models.ir_default.IrDefault {
  company_id
  condition
  field_id
  json_value
  user_id
  create(vals_list)
  discard_records(records)
  discard_values(model_name, field_name, values)
  set(model_name, field_name, value, user_id, company_id, condition)
  unlink()
  write(vals)
}
class "IrDemo" as odoo_src.odoo.addons.base.models.ir_demo.IrDemo {
  install_demo()
}
class "IrEmbeddedActions" as odoo_src.odoo.addons.base.models.ir_embedded_actions.IrEmbeddedActions {
  action_id
  context
  default_view_mode
  domain
  filter_ids
  groups_ids
  is_deletable
  is_visible
  name
  parent_action_id
  parent_res_id
  parent_res_model
  python_method
  sequence
  user_id
  create(vals_list)
}
class "IrExports" as odoo_src.odoo.addons.base.models.ir_exports.IrExports {
  export_fields
  name
  resource
}
class "IrExportsLine" as odoo_src.odoo.addons.base.models.ir_exports.IrExportsLine {
  export_id
  name
}
class "IrFieldsConverter" as odoo_src.odoo.addons.base.models.ir_fields.IrFieldsConverter {
  db_id_for(model, field, subfield, value)
  for_model(model, fromtype)
  to_field(model, field, fromtype)
}
class "IrFilters" as odoo_src.odoo.addons.base.models.ir_filters.IrFilters {
  action_id
  active
  context
  domain
  embedded_action_id
  embedded_parent_res_id
  is_default
  model_id
  name
  sort
  user_id
  copy_data(default)
  create_or_replace(vals)
  get_filters(model, action_id, embedded_action_id, embedded_parent_res_id)
  write(vals)
}
class "IrHttp" as odoo_src.odoo.addons.mail_plugin.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.calendar.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.barcodes_gs1_nomenclature.models.ir_http.IrHttp {
  session_info()
}
class "IrHttp" as odoo_src.odoo.addons.mail.models.ir_http.IrHttp {
  session_info()
}
class "IrHttp" as odoo_src.odoo.addons.payment.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.mass_mailing.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.point_of_sale.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.auth_password_policy_portal.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.http_routing.models.ir_http.IrHttp {
  rerouting_limit : int
  get_frontend_session_info() -> dict
  get_nearest_lang(lang_code: str) -> str
  get_translation_frontend_modules() -> list[str]
  url_rewrite(path, query_args)
}
class "IrHttp" as odoo_src.odoo.addons.barcodes.models.ir_http.IrHttp {
  session_info()
}
class "IrHttp" as odoo_src.odoo.addons.auth_password_policy_signup.models.ir_http.IrHttp {
}
class "IrHttp" as odoo_src.odoo.addons.base.models.ir_http.IrHttp {
  get_translations_for_webclient(modules, lang)
  get_web_translations_hash(modules, lang)
  routing_map(key)
}
class "IrHttp" as odoo_src.odoo.addons.cloud_storage.models.ir_http.IrHttp {
  session_info()
}
class "IrHttp" as odoo_src.odoo.addons.base_setup.models.ir_http.IrHttp {
  session_info()
}
class "IrLogging" as odoo_src.odoo.addons.base.models.ir_logging.IrLogging {
  create_date
  create_uid
  dbname
  func
  level
  line
  message
  name
  path
  type
  write_date
  write_uid
  init()
}
class "IrMailServer" as odoo_src.odoo.addons.mail.models.ir_mail_server.IrMailServer {
  mail_template_ids
}
class "IrMailServer" as odoo_src.odoo.addons.mass_mailing.models.ir_mail_server.IrMailServer {
  active_mailing_ids
}
class "IrMailServer" as odoo_src.odoo.addons.microsoft_outlook.models.ir_mail_server.IrMailServer {
  from_filter
  microsoft_outlook_access_token : bool
  microsoft_outlook_access_token_expiration : bool
  microsoft_outlook_refresh_token : bool
  smtp_authentication
  smtp_encryption : str
  smtp_host : str
  smtp_port : int
}
class "IrMailServer" as odoo_src.odoo.addons.google_gmail.models.ir_mail_server.IrMailServer {
  from_filter
  google_gmail_access_token : bool
  google_gmail_access_token_expiration : bool
  google_gmail_authorization_code : bool
  google_gmail_refresh_token : bool
  smtp_authentication
  smtp_encryption : str
  smtp_host : str
  smtp_port : int
}
class "IrMailServer" as odoo_src.odoo.addons.base.models.ir_mail_server.IrMailServer {
  NO_FOUND_FROM : str
  NO_FOUND_SMTP_FROM : str
  NO_VALID_FROM : str
  NO_VALID_RECIPIENT : str
  active
  from_filter
  max_email_size
  name
  sequence
  smtp_authentication
  smtp_authentication_info
  smtp_debug
  smtp_encryption
  smtp_host
  smtp_pass
  smtp_port
  smtp_ssl_certificate
  smtp_ssl_private_key
  smtp_user
  action_retrieve_max_email_size()
  build_email(email_from, email_to, subject, body, email_cc, email_bcc, reply_to, attachments, message_id, references, object_id, subtype, headers, body_alternative, subtype_alternative)
  connect(host, port, user, password, encryption, smtp_from, ssl_certificate, ssl_private_key, smtp_debug, mail_server_id, allow_archived)
  send_email(message, mail_server_id, smtp_server, smtp_port, smtp_user, smtp_password, smtp_encryption, smtp_ssl_certificate, smtp_ssl_private_key, smtp_debug, smtp_session)
  test_smtp_connection(autodetect_max_email_size)
  write(vals)
}
class "IrModel" as odoo_src.odoo.addons.mail.models.ir_model.IrModel {
  is_mail_activity
  is_mail_blacklist
  is_mail_thread
  unlink()
  write(vals)
}
class "IrModel" as odoo_src.odoo.addons.bus.models.ir_model.IrModel {
}
class "IrModel" as odoo_src.odoo.addons.mass_mailing.models.ir_model.IrModel {
  is_mailing_enabled
}
class "IrModel" as odoo_src.odoo.addons.marketing_card.models.ir_model.IrModel {
}
class "IrModel" as odoo_src.odoo.addons.base.models.ir_model.IrModel {
  access_ids
  count
  field_id
  info
  inherited_model_ids
  model
  modules
  name
  order
  rule_ids
  state
  transient
  view_ids
  create(vals_list)
  name_create(name)
  unlink()
  write(vals)
}
class "IrModelAccess" as odoo_src.odoo.addons.base.models.ir_model.IrModelAccess {
  active
  group_id
  model_id
  name
  perm_create
  perm_read
  perm_unlink
  perm_write
  call_cache_clearing_methods()
  check(model, mode, raise_exception)
  create(vals_list)
  group_names_with_access(model_name, access_mode)
  unlink()
  write(values)
}
class "IrModelConstraint" as odoo_src.odoo.addons.base.models.ir_model.IrModelConstraint {
  create_date
  definition
  message
  model
  module
  name
  type
  write_date
  copy_data(default)
  unlink()
}
class "IrModelData" as odoo_src.odoo.addons.base.models.ir_model.IrModelData {
  complete_name
  model
  module
  name
  noupdate
  reference
  res_id
  check_object_reference(module, xml_id, raise_on_access_error)
  copy_data(default)
  create(vals_list)
  toggle_noupdate(model, res_id)
  unlink()
  write(values)
}
class "IrModelField" as odoo_src.odoo.addons.mail.models.ir_model_fields.IrModelField {
  tracking
  unlink()
}
class "IrModelFields" as odoo_src.odoo.addons.base_sparse_field.models.models.IrModelFields {
  serialization_field_id
  ttype
  write(vals)
}
class "IrModelFields" as odoo_src.odoo.addons.base.models.ir_model.IrModelFields {
  column1
  column2
  company_dependent
  complete_name
  compute
  copied
  currency_field
  depends
  domain
  field_description
  group_expand
  groups
  help
  index
  model
  model_id
  modules
  name
  on_delete
  readonly
  related
  related_field_id
  relation
  relation_field
  relation_field_id
  relation_table
  required
  sanitize
  sanitize_attributes
  sanitize_form
  sanitize_overridable
  sanitize_style
  sanitize_tags
  selectable
  selection
  selection_ids
  size
  state
  store
  strip_classes
  strip_style
  translate
  ttype
  create(vals_list)
  get_field_help(model_name)
  get_field_selection(model_name, field_name)
  get_field_string(model_name)
  unlink()
  write(vals)
}
class "IrModelReferenceReport" as odoo_src.odoo.addons.base.report.report_base_report_irmodulereference.IrModelReferenceReport {
}
class "IrModelRelation" as odoo_src.odoo.addons.base.models.ir_model.IrModelRelation {
  create_date
  model
  module
  name
  write_date
}
class "IrModelSelection" as odoo_src.odoo.addons.base.models.ir_model.IrModelSelection {
  field_id
  name
  sequence
  value
  create(vals_list)
  unlink()
  write(vals)
}
class "IrModule" as odoo_src.odoo.addons.base_import_module.models.ir_module.IrModule {
  imported
  module_type
  button_immediate_install_app()
  module_uninstall()
  more_info()
  search_panel_select_range(field_name)
  web_read(specification)
  web_search_read(domain, specification, offset, limit, order, count_limit)
}
class "IrModule" as odoo_src.odoo.addons.account.models.ir_module.IrModule {
  account_templates
  module_uninstall()
  write(vals)
}
class "IrModuleCase" as odoo_src.odoo.addons.base.tests.test_ir_module.IrModuleCase {
  test_missing_module_icon()
  test_module_wrong_icon()
  test_new_module_icon()
}
class "IrModuleModule" as odoo_src.odoo.addons.base_install_request.models.ir_module_module.IrModuleModule {
  action_open_install_request()
}
class "IrModuleModule" as odoo_src.odoo.addons.point_of_sale.models.ir_module_module.IrModuleModule {
}
class "IrProfile" as odoo_src.odoo.addons.base.models.ir_profile.IrProfile {
  create_date
  duration
  entry_count
  init_stack_trace
  name
  qweb
  session
  speedscope
  speedscope_url
  sql
  sql_count
  traces_async
  traces_sync
  set_profiling(profile, collectors, params)
}
class "IrQWeb" as odoo_src.odoo.addons.base.models.ir_qweb.IrQWeb {
}
class "IrQweb" as odoo_src.odoo.addons.mail.models.ir_qweb.IrQweb {
  allowed_directives : tuple
}
class "IrQweb" as odoo_src.odoo.addons.http_routing.models.ir_qweb.IrQweb {
}
class "IrRule" as odoo_src.odoo.addons.base.models.ir_rule.IrRule {
  active
  domain_force
  groups
  model_id
  name
  perm_create
  perm_read
  perm_unlink
  perm_write
  create(vals_list)
  unlink()
  write(vals)
}
class "IrSequence" as odoo_src.odoo.addons.base.models.ir_sequence.IrSequence {
  active
  code
  company_id
  date_range_ids
  implementation
  name
  number_increment
  number_next
  number_next_actual
  padding
  prefix
  suffix
  use_date_range
  create(vals_list)
  get(code)
  get_id(sequence_code_or_id, code_or_id)
  get_next_char(number_next)
  next_by_code(sequence_code, sequence_date)
  next_by_id(sequence_date)
  unlink()
  write(values)
}
class "IrSequenceDateRange" as odoo_src.odoo.addons.base.models.ir_sequence.IrSequenceDateRange {
  date_from
  date_to
  number_next
  number_next_actual
  sequence_id
  create(vals_list)
  default_get(fields)
  unlink()
  write(values)
}
class "IrUiMenu" as odoo_src.odoo.addons.hr_timesheet_attendance.models.ir_ui_menu.IrUiMenu {
}
class "IrUiMenu" as odoo_src.odoo.addons.mail.models.ir_ui_menu.IrUiMenu {
}
class "IrUiMenu" as odoo_src.odoo.addons.hr_recruitment.models.ir_ui_menu.IrUiMenu {
}
class "IrUiMenu" as odoo_src.odoo.addons.hr_timesheet.models.ir_ui_menu.IrUiMenu {
}
class "IrUiMenu" as odoo_src.odoo.addons.hr.models.ir_ui_menu.IrUiMenu {
}
class "IrUiMenu" as odoo_src.odoo.addons.account.models.ir_ui_menu.IrUiMenu {
}
class "IrUiMenu" as odoo_src.odoo.addons.base.models.ir_ui_menu.IrUiMenu {
  action
  active
  child_id
  complete_name
  groups_id
  name
  parent_id
  parent_path
  sequence
  web_icon
  web_icon_data
  copy(default)
  create(vals_list)
  get_user_roots()
  load_menus(debug)
  load_menus_root()
  search_count(domain, limit)
  search_fetch(domain, field_names, offset, limit, order)
  unlink()
  write(values)
}
class "IrUiMenu" as odoo_src.odoo.addons.hr_contract.models.ir_ui_menu.IrUiMenu {
}
class "IrUiView" as odoo_src.odoo.addons.base_import_module.models.ir_ui_view.IrUiView {
}
class "IrUiView" as odoo_src.odoo.addons.point_of_sale.models.ir_ui_view.IrUiView {
}
class "IrWebsocket" as odoo_src.odoo.addons.mail.models.discuss.ir_websocket.IrWebsocket {
}
class "IrWebsocket" as odoo_src.odoo.addons.bus.models.ir_websocket.IrWebsocket {
}
class "IrWebsocket" as odoo_src.odoo.addons.hr_presence.models.ir_websocket.IrWebsocket {
}
class "JavascriptAsset" as odoo_src.odoo.addons.base.models.assetsbundle.JavascriptAsset {
  bundle_version
  content
  is_transpiled
  generate_error(msg)
  minify()
  with_header(content, minimal)
}
class "JoEdiCommon" as odoo_src.odoo.addons.l10n_jo_edi.tests.jo_edi_common.JoEdiCommon {
  setUpClass()
  setup_currency_rate(currency, rate)
}
class "Job" as odoo_src.odoo.addons.hr_recruitment_survey.models.hr_job.Job {
  survey_id
  action_new_survey()
  action_test_survey()
}
class "Job" as odoo_src.odoo.addons.hr_recruitment.models.hr_job.Job {
  activities_overdue
  activities_today
  address_id
  alias_id
  all_application_count
  applicant_hired
  applicant_properties_definition
  application_count
  application_ids
  color
  date_from
  date_to
  document_ids
  documents_count
  extended_interviewer_ids
  favorite_user_ids
  industry_id
  interviewer_ids
  is_favorite
  job_properties
  manager_id
  new_application_count
  no_of_hired_employee
  old_application_count
  user_id
  action_open_activities()
  action_open_attachments()
  action_open_late_activities()
  action_open_today_activities()
  close_dialog()
  create(vals_list)
  edit_dialog()
  write(vals)
}
class "Job" as odoo_src.odoo.addons.hr.models.hr_job.Job {
  active
  company_id
  contract_type_id
  department_id
  description
  employee_ids
  expected_employees
  name
  no_of_employee
  no_of_recruitment
  requirements
  sequence
  copy_data(default)
  create(vals_list)
  write(vals)
}
class "JobPlatform" as odoo_src.odoo.addons.hr_recruitment.models.hr_job_platform.JobPlatform {
  email
  name
  regex
  create(vals_list)
  write(vals)
}
class "KarmaRank" as odoo_src.odoo.addons.gamification.models.gamification_karma_rank.KarmaRank {
  description
  description_motivational
  karma_min
  name
  rank_users_count
  user_ids
  create(values_list)
  write(vals)
}
class "KarmaTracking" as odoo_src.odoo.addons.gamification.models.gamification_karma_tracking.KarmaTracking {
  consolidated
  gain
  new_value
  old_value
  origin_ref
  origin_ref_model_name
  reason
  tracking_date
  user_id
  create(values_list)
}
class "Key" as odoo_src.odoo.addons.certificate.models.key.Key {
  active
  company_id
  content
  loading_error
  name
  password
  pem_key
  public
}
class "Key" as odoo_src.odoo.addons.account_edi_proxy_client.models.key.Key {
}
class "L10nARCustomerPortal" as odoo_src.odoo.addons.l10n_ar_website_sale.controllers.portal.L10nARCustomerPortal {
  details_form_validate(data, partner_creation)
}
class "L10nARWebsiteSale" as odoo_src.odoo.addons.l10n_ar_website_sale.controllers.main.L10nARWebsiteSale {
}
class "L10nAccountDocumentType" as odoo_src.odoo.addons.l10n_uy.models.l10n_latam_document_type.L10nAccountDocumentType {
}
class "L10nArAfipResponsibilityType" as odoo_src.odoo.addons.l10n_ar.models.l10n_ar_afip_responsibility_type.L10nArAfipResponsibilityType {
  active
  code
  name
  sequence
}
class "L10nArAfipResponsibilityType" as odoo_src.odoo.addons.l10n_ar_pos.models.l10n_latam_identification_type.L10nArAfipResponsibilityType {
}
class "L10nArAfipResponsibilityType" as odoo_src.odoo.addons.l10n_ar_pos.models.l10n_ar_afip_responsibility_type.L10nArAfipResponsibilityType {
}
class "L10nArEarningsScale" as odoo_src.odoo.addons.l10n_ar_withholding.models.l10n_ar_earnings_scale.L10nArEarningsScale {
  line_ids
  name
}
class "L10nArEarningsScaleLine" as odoo_src.odoo.addons.l10n_ar_withholding.models.l10n_ar_earnings_scale.L10nArEarningsScaleLine {
  currency_id
  excess_amount
  fixed_amount
  from_amount
  percentage
  scale_id
  to_amount
}
class "L10nArPartnerTax" as odoo_src.odoo.addons.l10n_ar_withholding.models.l10n_ar_partner_tax.L10nArPartnerTax {
  company_id
  from_date
  partner_id
  ref
  tax_id
  to_date
  check_partner_tax_dates()
}
class "L10nBRWebsiteSale" as odoo_src.odoo.addons.l10n_br_website_sale.controllers.main.L10nBRWebsiteSale {
}
class "L10nBrZipRange" as odoo_src.odoo.addons.l10n_br.models.l10n_br_zip_range.L10nBrZipRange {
  city_id
  end
  start
}
class "L10nCoDocumentType" as odoo_src.odoo.addons.l10n_co.models.l10n_latam_identification_type.L10nCoDocumentType {
  l10n_co_document_code
}
class "L10nECWebsiteSale" as odoo_src.odoo.addons.l10n_ec_website_sale.controllers.main.L10nECWebsiteSale {
}
class "L10nEsEdiTbaiDocument" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.l10n_es_edi_tbai_document.L10nEsEdiTbaiDocument {
  L10N_ES_TBAI_VERSION : float
  chain_index
  company_id
  date
  is_cancel
  name
  response_message
  state
  xml_attachment_id
}
class "L10nEsEdiVerifactuDocument" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.models.verifactu_document.L10nEsEdiVerifactuDocument {
  pos_order_id
}
class "L10nEsEdiVerifactuDocument" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.verifactu_document.L10nEsEdiVerifactuDocument {
  chain_index
  company_id
  document_type
  errors
  json_attachment_base64
  json_attachment_filename
  json_attachment_id
  move_id
  response_csv
  state
  trigger_next_batch()
}
class "L10nHuEdiCancellation" as odoo_src.odoo.addons.l10n_hu_edi.wizard.l10n_hu_edi_cancellation.L10nHuEdiCancellation {
  code
  invoice_id
  reason
  button_request_cancel()
}
class "L10nHuEdiConnection" as odoo_src.odoo.addons.l10n_hu_edi.models.l10n_hu_edi_connection.L10nHuEdiConnection {
  env
  session
  do_manage_annulment(credentials, token, annulment_operations)
  do_manage_invoice(credentials, token, invoice_operations)
  do_query_transaction_list(credentials, datetime_from, datetime_to, page)
  do_query_transaction_status(credentials, transaction_code, return_original_request)
  do_token_exchange(credentials)
}
class "<color:red>L10nHuEdiConnectionError</color>" as odoo_src.odoo.addons.l10n_hu_edi.models.l10n_hu_edi_connection.L10nHuEdiConnectionError {
  code : NoneType
  errors : list
}
class "L10nHuEdiTaxAuditExport" as odoo_src.odoo.addons.l10n_hu_edi.wizard.l10n_hu_edi_tax_audit_export.L10nHuEdiTaxAuditExport {
  date_from
  date_to
  export_file
  filename
  name_from
  name_to
  selection_mode
  action_export()
}
class "L10nHuEdiTestCommon" as odoo_src.odoo.addons.l10n_hu_edi.tests.common.L10nHuEdiTestCommon {
  create_advance_invoice()
  create_bill_simple(currency)
  create_cancel_wizard()
  create_credit_note_simple(currency)
  create_final_invoice(sale_order)
  create_invoice_complex_eur()
  create_invoice_complex_huf()
  create_invoice_simple(currency)
  create_invoice_simple_discount()
  create_invoice_tax_price_include()
  create_refund_simple(currency)
  create_reversal(invoice, is_modify)
  setUpClass()
  write_edi_credentials()
}
class "L10nHuEdiTestFlowsLive" as odoo_src.odoo.addons.l10n_hu_edi.tests.test_flows_live.L10nHuEdiTestFlowsLive {
  patch_call_nav_endpoint(endpoint, make_request)
  set_invoice_name(invoice, prefix)
  test_send_advance_final_invoice()
  test_send_invoice_and_credit_note()
  test_send_invoice_complex_eur()
  test_send_invoice_complex_huf()
  test_timeout_recovery_fail()
  test_timeout_recovery_success()
  write_edi_credentials()
}
class "L10nHuEdiTestFlowsMocked" as odoo_src.odoo.addons.l10n_hu_edi.tests.test_flows_mocked.L10nHuEdiTestFlowsMocked {
  patch_post(responses)
  setUpClass()
  test_cancel_and_resend()
  test_cancel_invoice_done()
  test_cancel_invoice_error()
  test_cancel_invoice_pending()
  test_invoice_line_currency_rate_from_sale()
  test_send_invoice_and_credit_note()
  test_send_invoice_error()
  test_send_invoice_warning()
  test_timeout_recovery_fail()
  test_timeout_recovery_success()
}
class "L10nHuEdiTestInvoiceXml" as odoo_src.odoo.addons.l10n_hu_edi.tests.test_invoice_xml.L10nHuEdiTestInvoiceXml {
  setUpClass()
  test_advance_invoice()
  test_invoice_and_credit_note()
  test_invoice_complex_eur()
  test_invoice_complex_huf()
  test_invoice_simple_deduction()
  test_invoice_tax_price_include()
  test_multi_currency_tax_sign()
  test_tax_audit_export()
}
class "L10nITWebsiteSale" as odoo_src.odoo.addons.l10n_it_edi_website_sale.controllers.main.L10nITWebsiteSale {
}
class "L10nInPortCode" as odoo_src.odoo.addons.l10n_in.models.port_code.L10nInPortCode {
  code
  name
  state_id
}
class "L10nInSectionAlert" as odoo_src.odoo.addons.l10n_in_withholding.models.l10n_in_section_alert.L10nInSectionAlert {
  aggregate_limit
  aggregate_period
  consider_amount
  is_aggregate_limit
  is_per_transaction_limit
  l10n_in_section_tax_ids
  name
  per_transaction_limit
  tax_source_type
}
class "L10nInTestInvoicingCommon" as odoo_src.odoo.addons.l10n_in.tests.common.L10nInTestInvoicingCommon {
  setUpClass()
}
class "L10nInWithholdWizard" as odoo_src.odoo.addons.l10n_in_withholding.wizard.l10n_in_withhold_wizard.L10nInWithholdWizard {
  company_id
  currency_id
  date
  journal_id
  l10n_in_tds_tax_type
  l10n_in_withholding_warning
  reference
  related_move_id
  related_payment_id
  type_name
  withhold_line_ids
  action_create_and_post_withhold()
  default_get(fields_list)
}
class "L10nInWithholdWizard" as odoo_src.odoo.addons.l10n_in_withholding_payment.wizard.l10n_in_withhold_wizard.L10nInWithholdWizard {
}
class "L10nInWithholdWizardLine" as odoo_src.odoo.addons.l10n_in_withholding.wizard.l10n_in_withhold_wizard.L10nInWithholdWizardLine {
  amount
  base
  currency_id
  l10n_in_tds_tax_type
  tax_id
  withhold_id
}
class "L10nItDdt" as odoo_src.odoo.addons.l10n_it_edi.models.ddt.L10nItDdt {
  date
  invoice_id
  name
}
class "L10nItDeclarationOfIntent" as odoo_src.odoo.addons.l10n_it_edi_doi.models.declaration_of_intent.L10nItDeclarationOfIntent {
  company_id
  currency_id
  end_date
  invoice_ids
  invoiced
  issue_date
  not_yet_invoiced
  partner_id
  protocol_number_part1
  protocol_number_part2
  remaining
  sale_order_ids
  start_date
  state
  threshold
  action_open_invoice_ids()
  action_open_sale_order_ids()
  action_reactivate()
  action_reset_to_draft()
  action_revoke()
  action_terminate()
  action_validate()
}
class "L10nItDocumentType" as odoo_src.odoo.addons.l10n_it_edi_ndd.models.l10n_it_document_type.L10nItDocumentType {
  code
  name
  type
}
class "L10nKeItemCode" as odoo_src.odoo.addons.l10n_ke.models.l10n_ke_item_code.L10nKeItemCode {
  code
  description
  tax_rate
}
class "L10nLatamCheckTest" as odoo_src.odoo.addons.l10n_latam_check.tests.common.L10nLatamCheckTest {
  setUpClass()
}
class "L10nLatamDocumentType" as odoo_src.odoo.addons.l10n_ar.models.l10n_latam_document_type.L10nLatamDocumentType {
  l10n_ar_letter
  purchase_aliquots
}
class "L10nLatamDocumentType" as odoo_src.odoo.addons.l10n_latam_invoice_document.models.l10n_latam_document_type.L10nLatamDocumentType {
  active
  code
  country_id
  doc_code_prefix
  internal_type
  name
  report_name
  sequence
}
class "L10nLatamDocumentType" as odoo_src.odoo.addons.l10n_cl.models.l10n_latam_document_type.L10nLatamDocumentType {
  internal_type
  l10n_cl_active
}
class "L10nLatamDocumentType" as odoo_src.odoo.addons.l10n_ec.models.l10n_latam_document_type.L10nLatamDocumentType {
  internal_type
  l10n_ec_check_format
}
class "L10nLatamIdentificationType" as odoo_src.odoo.addons.l10n_ar.models.l10n_latam_identification_type.L10nLatamIdentificationType {
  l10n_ar_afip_code
}
class "L10nLatamIdentificationType" as odoo_src.odoo.addons.l10n_latam_base.models.l10n_latam_identification_type.L10nLatamIdentificationType {
  active
  country_id
  description
  is_vat
  name
  sequence
}
class "L10nLatamIdentificationType" as odoo_src.odoo.addons.l10n_uy.models.l10n_latam_identification_type.L10nLatamIdentificationType {
  l10n_uy_dgi_code
}
class "L10nLatamIdentificationType" as odoo_src.odoo.addons.l10n_pe_pos.models.l10n_latam_identification_type.L10nLatamIdentificationType {
}
class "L10nLatamIdentificationType" as odoo_src.odoo.addons.l10n_pe.models.l10n_latam_identification_type.L10nLatamIdentificationType {
  l10n_pe_vat_code
}
class "L10nLatamPaymentMassTransfer" as odoo_src.odoo.addons.l10n_latam_check.wizards.l10n_latam_payment_mass_transfer.L10nLatamPaymentMassTransfer {
  check_ids
  communication
  company_id
  destination_journal_id
  journal_id
  payment_date
  action_create_payments()
  default_get(fields_list)
}
class "L10nMyEDITestFileGeneration" as odoo_src.odoo.addons.l10n_my_edi.tests.test_file_generation.L10nMyEDITestFileGeneration {
  setUpClass()
  test_01_can_generate_file()
  test_02_multicurrency()
  test_03_optional_fields()
  test_04_credit_note()
  test_05_invoice_with_so()
  test_06_foreigner()
  test_07_tax_exempt()
  test_08_bill_imports_form()
  test_09_partner_ref_not_in_party_id()
  test_10_prepaid_amount_present()
}
class "L10nMyEDITestFileGeneration" as odoo_src.odoo.addons.l10n_my_edi_extended.tests.test_file_generation.L10nMyEDITestFileGeneration {
  setUpClass()
  test_07_self_billing()
  test_08_refund_note()
  test_09_credit_note()
}
class "L10nMyEDITestNewSubmission" as odoo_src.odoo.addons.l10n_my_edi_extended.tests.test_new_submissions_flow.L10nMyEDITestNewSubmission {
  get_submission_status_count : int
  submission_count : int
  submission_invoice
  submission_status_count : int
  setUpClass()
  test_01_new_basic_submission()
  test_02_new_failed_submission()
  test_03_new_failed_document_submission()
  test_04_new_cancellation()
  test_05_new_cancellation_failures()
  test_06_new_invalid_reset()
  test_07_new_pending_submission()
  test_08_new_mass_submission()
  test_09_new_fetch_status()
  test_10_new_full_rejection_flow_invoice()
  test_11_qr_code_generation()
  test_12_multiple_moves_with_one_failed_submission()
  test_13_multiple_cron_runs()
}
class "L10nMyEDITestSubmission" as odoo_src.odoo.addons.l10n_my_edi.tests.test_submissions.L10nMyEDITestSubmission {
  get_submission_status_count : int
  submission_count : int
  submission_invoice
  setUpClass()
  test_01_basic_submission()
  test_02_failed_submission()
  test_03_failed_document_submission()
  test_04_cancellation()
  test_05_cancellation_failures()
  test_06_invalid_reset()
  test_07_pending_submission()
  test_08_mass_submission()
  test_09_fetch_status()
  test_10_reject_bill()
  test_11_full_rejection_flow_invoice()
}
class "L10nMyEdiIndustryClassification" as odoo_src.odoo.addons.l10n_my_edi.models.l10n_my_edi_industry_classification.L10nMyEdiIndustryClassification {
  code
  name
}
class "L10nMyEdiStatusUpdateWizard" as odoo_src.odoo.addons.l10n_my_edi.wizard.l10n_my_edi_status_update_wizard.L10nMyEdiStatusUpdateWizard {
  invoice_id
  new_status
  reason
  button_request_update()
}
class "L10nPEWebsiteSale" as odoo_src.odoo.addons.l10n_pe_website_sale.controllers.main.L10nPEWebsiteSale {
  city_infos(city)
  state_infos(state)
}
class "L10nPeResCityDistrict" as odoo_src.odoo.addons.l10n_pe_pos.models.l10n_pe_res_city_district.L10nPeResCityDistrict {
  country_id
  state_id
}
class "L10nPeResCityDistrict" as odoo_src.odoo.addons.l10n_pe.models.res_city_district.L10nPeResCityDistrict {
  city_id
  code
  name
}
class "L10nRoEdiController" as odoo_src.odoo.addons.l10n_ro_edi.controllers.main.L10nRoEdiController {
  authorize(company_id)
  callback(company_id)
}
class "L10nRoEdiDocument" as odoo_src.odoo.addons.l10n_ro_edi.models.ciusro_document.L10nRoEdiDocument {
  attachment_id
  datetime
  invoice_id
  key_certificate
  key_loading
  key_signature
  message
  state
  action_l10n_ro_edi_download_signature()
  action_l10n_ro_edi_fetch_status()
}
class "L10nRoEdiStockDocument" as odoo_src.odoo.addons.l10n_ro_edi_stock.models.l10n_ro_edi_stock_document.L10nRoEdiStockDocument {
  invoice_id
  l10n_ro_edi_stock_load_id
  l10n_ro_edi_stock_uit
  message
  picking_id
  state
}
class "L10nRoEdiStockDocument" as odoo_src.odoo.addons.l10n_ro_edi_stock_batch.models.l10n_ro_edi_stock_document.L10nRoEdiStockDocument {
  batch_id
}
class "L10nTrNilveraAlias" as odoo_src.odoo.addons.l10n_tr_nilvera.models.l10n_tr_nilvera_alias.L10nTrNilveraAlias {
  name
  partner_id
}
class "L10nTrNilveraTrailerPlate" as odoo_src.odoo.addons.l10n_tr_nilvera_edispatch.models.l10n_tr_nilvera_trailer_plate.L10nTrNilveraTrailerPlate {
  name
  plate_number_type
}
class "L10nUYWebsiteSale" as odoo_src.odoo.addons.l10n_uy_website_sale.controllers.main.L10nUYWebsiteSale {
}
class "L10nVNEdiCancellation" as odoo_src.odoo.addons.l10n_vn_edi_viettel.wizard.l10n_vn_edi_cancellation_request.L10nVNEdiCancellation {
  agreement_document_date
  agreement_document_name
  invoice_id
  reason
  button_request_cancel()
}
class "L10n_siInvoiceGetReferenceTest" as odoo_src.odoo.addons.l10n_si.tests.test_get_reference.L10n_siInvoiceGetReferenceTest {
  setUpClass()
  test_get_reference_slovenian_invoice()
  test_get_reference_slovenian_partner()
}
class "LDAPWrapper" as odoo_src.odoo.addons.auth_ldap.models.res_company_ldap.LDAPWrapper {
  passwd_s()
  search_st()
  simple_bind_s()
  unbind()
}
class "Lang" as odoo_src.odoo.addons.base.models.res_lang.Lang {
  CACHED_FIELDS
  active
  code
  date_format
  decimal_point
  direction
  flag_image
  flag_image_url
  grouping
  iso_code
  name
  short_time_format
  thousands_sep
  time_format
  url_code
  week_start
  action_activate_langs()
  copy_data(default)
  create(vals_list)
  format(percent: str, value, grouping: bool) -> str
  get_installed() -> list[tuple[str, str]]
  install_lang()
  toggle_active()
  unlink()
  write(vals)
}
class "LangData" as odoo_src.odoo.addons.base.models.res_lang.LangData {
}
class "LangDataDict" as odoo_src.odoo.addons.base.models.res_lang.LangDataDict {
}
class "LazyCompiledBuilder" as odoo_src.odoo.addons.base.models.ir_http.LazyCompiledBuilder {
  rule
}
class "Lead" as odoo_src.odoo.addons.crm_iap_enrich.models.crm_lead.Lead {
  iap_enrich_done
  show_enrich_button
  create(vals_list)
  iap_enrich(from_cron)
}
class "Lead" as odoo_src.odoo.addons.crm.models.crm_lead.Lead {
  active
  automated_probability
  calendar_event_ids
  campaign_id
  city
  color
  company_currency
  company_id
  contact_name
  country_id
  date_automation_last
  date_closed
  date_conversion
  date_deadline
  date_last_stage_update
  date_open
  day_close
  day_open
  description
  duplicate_lead_count
  duplicate_lead_ids
  email_domain_criterion
  email_from
  email_normalized
  email_state
  expected_revenue
  function
  is_automated_probability
  is_partner_visible
  lang_active_count
  lang_code
  lang_id
  lead_properties
  lost_reason_id
  medium_id
  meeting_display_date
  meeting_display_label
  mobile
  name
  partner_email_update
  partner_id
  partner_is_blacklisted
  partner_name
  partner_phone_update
  phone
  phone_sanitized
  phone_state
  priority
  probability
  prorated_revenue
  recurring_plan
  recurring_revenue
  recurring_revenue_monthly
  recurring_revenue_monthly_prorated
  recurring_revenue_prorated
  referred
  source_id
  stage_id
  state_id
  street
  street2
  tag_ids
  team_id
  title
  type
  user_company_ids
  user_id
  website
  zip
  action_reschedule_meeting()
  action_schedule_meeting(smart_calendar)
  action_set_automated_probability()
  action_set_lost()
  action_set_won()
  action_set_won_rainbowman()
  action_show_potential_duplicates()
  action_snooze()
  convert_opportunity(partner, user_ids, team_id)
  copy_data(default)
  create(vals_list)
  get_empty_list_help(help_message)
  get_import_templates()
  get_rainbowman_message()
  log_meeting(meeting)
  merge_opportunity(user_id, team_id, auto_unlink)
  message_new(msg_dict, custom_values)
  redirect_lead_opportunity_view()
  search_fetch(domain, field_names, offset, limit, order)
  toggle_active()
  unlink()
  write(vals)
}
class "Lead" as odoo_src.odoo.addons.crm_mail_plugin.models.crm_lead.Lead {
}
class "Lead" as odoo_src.odoo.addons.crm_iap_mine.models.crm_lead.Lead {
  lead_mining_request_id
  action_generate_leads()
}
class "Lead" as odoo_src.odoo.addons.iap_crm.models.crm_lead.Lead {
  reveal_id
}
class "Lead" as odoo_src.odoo.addons.event_crm.models.crm_lead.Lead {
  event_id
  event_lead_rule_id
  registration_count
  registration_ids
}
class "Lead2OpportunityMassConvert" as odoo_src.odoo.addons.crm.wizard.crm_lead_to_opportunity_mass.Lead2OpportunityMassConvert {
  action
  deduplicate
  force_assignment
  lead_id
  lead_tomerge_ids
  user_ids
  action_mass_convert()
}
class "Lead2OpportunityPartner" as odoo_src.odoo.addons.crm.wizard.crm_lead_to_opportunity.Lead2OpportunityPartner {
  action
  duplicated_lead_ids
  force_assignment
  lead_id
  name
  partner_id
  team_id
  user_id
  action_apply()
  default_get(fields)
}
class "LeadScoringFrequency" as odoo_src.odoo.addons.crm.models.crm_lead_scoring_frequency.LeadScoringFrequency {
  lost_count
  team_id
  value
  variable
  won_count
}
class "LeaveReport" as odoo_src.odoo.addons.hr_holidays.report.hr_leave_report.LeaveReport {
  allocation_id
  company_id
  date_from
  date_to
  department_id
  holiday_status_id
  leave_id
  leave_type
  name
  number_of_days
  number_of_hours
  state
  action_open_record()
  init()
}
class "LeaveReport" as odoo_src.odoo.addons.hr_holidays.report.hr_leave_employee_type_report.LeaveReport {
  active_employee
  company_id
  date_from
  date_to
  department_id
  employee_id
  holiday_status
  leave_type
  number_of_days
  number_of_hours
  state
  action_time_off_analysis()
  init()
}
class "LeaveReportCalendar" as odoo_src.odoo.addons.hr_holidays.report.hr_leave_report_calendar.LeaveReportCalendar {
  company_id
  department_id
  description
  duration
  employee_id
  holiday_status_id
  is_absent
  is_hatched
  is_manager
  is_striked
  job_id
  leave_id
  leave_manager_id
  name
  start_datetime
  state
  stop_datetime
  tz
  action_approve()
  action_refuse()
  action_validate()
  get_unusual_days(date_from, date_to)
  init()
}
class "LegacyHTTPAdapter" as odoo_src.odoo.addons.account.tools.LegacyHTTPAdapter {
  init_poolmanager()
}
class "LessStylesheetAsset" as odoo_src.odoo.addons.base.models.assetsbundle.LessStylesheetAsset {
  get_command()
}
class "LifecycleEvent" as odoo_src.odoo.addons.bus.websocket.LifecycleEvent {
  name
}
class "LinkPreview" as odoo_src.odoo.addons.mail.models.mail_link_preview.LinkPreview {
  create_date
  image_mimetype
  is_hidden
  message_id
  og_description
  og_image
  og_mimetype
  og_site_name
  og_title
  og_type
  source_url
}
class "LinkPreviewController" as odoo_src.odoo.addons.mail.controllers.link_preview.LinkPreviewController {
  mail_link_preview(message_id)
  mail_link_preview_hide(link_preview_ids)
}
class "LinkTracker" as odoo_src.odoo.addons.link_tracker.models.link_tracker.LinkTracker {
  absolute_url
  campaign_id
  code
  count
  label
  link_click_ids
  link_code_ids
  medium_id
  redirected_url
  short_url
  short_url_host
  source_id
  title
  url
  action_view_statistics()
  action_visit_page()
  {abstract}convert_links(html, vals, blacklist)
  create(vals_list)
  get_url_from_code(code)
  recent_links(filter, limit)
  search_or_create(vals_list)
}
class "LinkTracker" as odoo_src.odoo.addons.link_tracker.controller.main.LinkTracker {
  full_url_redirect(code)
}
class "LinkTracker" as odoo_src.odoo.addons.mass_mailing.models.link_tracker.LinkTracker {
  mass_mailing_id
}
class "LinkTrackerClick" as odoo_src.odoo.addons.link_tracker.models.link_tracker.LinkTrackerClick {
  campaign_id
  country_id
  ip
  link_id
  add_click(code)
}
class "LinkTrackerClick" as odoo_src.odoo.addons.mass_mailing.models.link_tracker.LinkTrackerClick {
  mailing_trace_id
  mass_mailing_id
  add_click(code)
}
class "LinkTrackerCode" as odoo_src.odoo.addons.link_tracker.models.link_tracker.LinkTrackerCode {
  code
  link_id
}
class "LivechatAttachmentController" as odoo_src.odoo.addons.im_livechat.controllers.attachment.LivechatAttachmentController {
  mail_attachment_upload(ufile, thread_id, thread_model, is_pending)
}
class "LivechatAttachmentController" as odoo_src.odoo.addons.im_livechat.controllers.cors.attachment.LivechatAttachmentController {
  im_livechat_attachment_delete(guest_token, attachment_id, access_token)
  im_livechat_attachment_upload(guest_token, ufile, thread_id, thread_model, is_pending)
}
class "LivechatBinaryController" as odoo_src.odoo.addons.im_livechat.controllers.cors.binary.LivechatBinaryController {
  livechat_channel_attachment(guest_token, channel_id, attachment_id, download)
  livechat_content_image(model, id, field, unique, guest_token, access_token)
  livechat_fetch_image(guest_token, channel_id, attachment_id, width, height)
}
class "LivechatChannelController" as odoo_src.odoo.addons.im_livechat.controllers.cors.channel.LivechatChannelController {
  livechat_channel_fold(guest_token, channel_id, state, state_count)
  livechat_channel_mark_as_read(guest_token)
  livechat_channel_messages(guest_token, channel_id, before, after, limit, around)
  livechat_channel_notify_typing(guest_token, channel_id, is_typing)
}
class "LivechatChatbotScriptController" as odoo_src.odoo.addons.im_livechat.controllers.chatbot.LivechatChatbotScriptController {
  chatbot_restart(channel_id, chatbot_script_id)
  chatbot_save_answer(channel_id, message_id, selected_answer_id)
  chatbot_trigger_step(channel_id, chatbot_script_id)
  chatbot_validate_email(channel_id)
}
class "LivechatController" as odoo_src.odoo.addons.im_livechat.controllers.main.LivechatController {
  assets_embed(ext)
  email_livechat_transcript(channel_id, email)
  external_lib(ext)
  feedback(channel_id, rate, reason)
  fontawesome()
  get_emoji_bundle()
  get_session(channel_id, anonymous_name, previous_operator_id, chatbot_script_id, persisted)
  history_pages(pid, channel_id, page_history)
  livechat_init(channel_id)
  loader(channel_id)
  odoo_ui_icons()
  support_page(channel_id)
  visitor_leave_session(channel_id)
}
class "LivechatLinkPreviewController" as odoo_src.odoo.addons.im_livechat.controllers.cors.link_preview.LivechatLinkPreviewController {
  livechat_link_preview(guest_token, message_id)
  livechat_link_preview_hide(guest_token, link_preview_ids)
}
class "LivechatMessageReactionController" as odoo_src.odoo.addons.im_livechat.controllers.cors.message_reaction.LivechatMessageReactionController {
  livechat_message_reaction(guest_token, message_id, content, action)
}
class "LivechatRtcController" as odoo_src.odoo.addons.im_livechat.controllers.cors.rtc.LivechatRtcController {
  livechat_channel_call_join(guest_token, channel_id, check_rtc_session_ids)
  livechat_channel_call_leave(guest_token, channel_id)
  livechat_channel_ping(guest_token, channel_id, rtc_session_id, check_rtc_session_ids)
  livechat_session_call_notify(guest_token, peer_notifications)
  livechat_session_update_and_broadcast(guest_token, session_id, values)
}
class "LivechatThreadController" as odoo_src.odoo.addons.im_livechat.controllers.cors.thread.LivechatThreadController {
  livechat_message_post(guest_token, thread_model, thread_id, post_data, context)
  livechat_message_update_content(guest_token, message_id, body, attachment_ids, attachment_tokens, partner_ids)
}
class "LocationSelectorController" as odoo_src.odoo.addons.delivery.controllers.location_selector.LocationSelectorController {
  delivery_get_pickup_locations(order_id, zip_code)
  delivery_set_pickup_location(order_id, pickup_location_data)
}
class "LoggerProxy" as odoo_src.odoo.addons.base.models.ir_actions.LoggerProxy {
  error(message)
  exception(message)
  info(message)
  log(level, message)
  warning(message)
}
class "LostReason" as odoo_src.odoo.addons.crm.models.crm_lost_reason.LostReason {
  active
  leads_count
  name
  action_lost_leads()
}
class "LoyaltyCard" as odoo_src.odoo.addons.loyalty.models.loyalty_card.LoyaltyCard {
  active
  code
  company_id
  currency_id
  expiration_date
  history_ids
  partner_id
  point_name
  points
  points_display
  program_id
  program_type
  use_count
  action_coupon_send()
  action_loyalty_update_balance()
  create(vals_list)
  write(vals)
}
class "LoyaltyCardUpdateBalance" as odoo_src.odoo.addons.loyalty.wizard.loyalty_card_update_balance.LoyaltyCardUpdateBalance {
  card_id
  description
  new_balance
  old_balance
  action_update_card_point()
}
class "LoyaltyGenerateWizard" as odoo_src.odoo.addons.loyalty.wizard.loyalty_generate_wizard.LoyaltyGenerateWizard {
  confirmation_message
  coupon_qty
  customer_ids
  customer_tag_ids
  description
  mode
  points_granted
  points_name
  program_id
  program_type
  valid_until
  will_send_mail
  generate_coupons()
}
class "LoyaltyHistory" as odoo_src.odoo.addons.loyalty.models.loyalty_history.LoyaltyHistory {
  card_id
  company_id
  description
  issued
  order_id
  order_model
  used
}
class "LoyaltyMail" as odoo_src.odoo.addons.loyalty.models.loyalty_mail.LoyaltyMail {
  active
  mail_template_id
  points
  program_id
  trigger
}
class "LoyaltyProgram" as odoo_src.odoo.addons.loyalty.models.loyalty_program.LoyaltyProgram {
  active
  applies_on
  available_on
  communication_plan_ids
  company_id
  coupon_count
  coupon_count_display
  coupon_ids
  currency_id
  currency_symbol
  date_from
  date_to
  is_nominative
  is_payment_program
  limit_usage
  mail_template_id
  max_usage
  name
  payment_program_discount_product_id
  portal_point_name
  portal_visible
  pricelist_ids
  program_type
  reward_ids
  rule_ids
  sequence
  total_order_count
  trigger
  trigger_product_ids
  action_open_loyalty_cards()
  create(vals_list)
  create_from_template(template_id)
  default_get(fields_list)
  get_program_templates()
  toggle_active()
  write(vals)
}
class "LoyaltyReward" as odoo_src.odoo.addons.loyalty.models.loyalty_reward.LoyaltyReward {
  active
  all_discount_product_ids
  clear_wallet
  company_id
  currency_id
  description
  discount
  discount_applicability
  discount_line_product_id
  discount_max_amount
  discount_mode
  discount_product_category_id
  discount_product_domain
  discount_product_ids
  discount_product_tag_id
  is_global_discount
  multi_product
  point_name
  program_id
  program_type
  required_points
  reward_product_domain
  reward_product_id
  reward_product_ids
  reward_product_qty
  reward_product_tag_id
  reward_product_uom_id
  reward_type
  tax_ids
  user_has_debug
  create(vals_list)
  default_get(fields_list)
  unlink()
  write(vals)
}
class "LoyaltyRule" as odoo_src.odoo.addons.loyalty.models.loyalty_rule.LoyaltyRule {
  active
  code
  company_id
  currency_id
  minimum_amount
  minimum_amount_tax_mode
  minimum_qty
  mode
  product_category_id
  product_domain
  product_ids
  product_tag_id
  program_id
  program_type
  reward_point_amount
  reward_point_mode
  reward_point_name
  reward_point_split
  user_has_debug
  default_get(fields_list)
}
class "LunchAlert" as odoo_src.odoo.addons.lunch.models.lunch_alert.LunchAlert {
  active
  available_today
  cron_id
  fri
  location_ids
  message
  mode
  mon
  name
  notification_moment
  notification_time
  recipients
  sat
  sun
  thu
  tue
  tz
  until
  wed
  create(vals_list)
  unlink()
  write(values)
}
class "LunchCashMove" as odoo_src.odoo.addons.lunch.models.lunch_cashmove.LunchCashMove {
  amount
  currency_id
  date
  description
  user_id
  get_wallet_balance(user, include_config)
}
class "LunchController" as odoo_src.odoo.addons.lunch.controllers.main.LunchController {
  get_user_location(user_id, context)
  infos(user_id, context)
  pay(user_id, context)
  payment_message()
  set_user_location(location_id, user_id, context)
  trash(user_id, context)
}
class "LunchLocation" as odoo_src.odoo.addons.lunch.models.lunch_location.LunchLocation {
  address
  company_id
  name
}
class "LunchOrder" as odoo_src.odoo.addons.lunch.models.lunch_order.LunchOrder {
  active
  available_on_date
  available_today
  available_toppings_1
  available_toppings_2
  available_toppings_3
  category_id
  company_id
  currency_id
  date
  display_add_button
  display_reorder_button
  display_toppings
  image_128
  image_1920
  lunch_location_id
  name
  note
  notified
  order_deadline_passed
  price
  product_description
  product_id
  quantity
  state
  supplier_id
  topping_ids_1
  topping_ids_2
  topping_ids_3
  topping_label_1
  topping_label_2
  topping_label_3
  topping_quantity_1
  topping_quantity_2
  topping_quantity_3
  user_id
  action_cancel()
  action_confirm()
  action_notify()
  action_order()
  action_reorder()
  action_reset()
  action_send()
  add_to_cart()
  create(vals_list)
  init()
  update_quantity(increment)
  write(values)
}
class "LunchProduct" as odoo_src.odoo.addons.lunch.models.lunch_product.LunchProduct {
  active
  category_id
  company_id
  currency_id
  description
  favorite_user_ids
  is_available_at
  is_favorite
  is_new
  last_order_date
  name
  new_until
  price
  product_image
  supplier_id
  toggle_active()
  write(vals)
}
class "LunchProductCategory" as odoo_src.odoo.addons.lunch.models.lunch_product_category.LunchProductCategory {
  active
  company_id
  currency_id
  image_1920
  name
  product_count
  toggle_active()
}
class "LunchSupplier" as odoo_src.odoo.addons.lunch.models.lunch_supplier.LunchSupplier {
  active
  automatic_email_time
  available_location_ids
  available_today
  city
  company_id
  country_id
  cron_id
  delivery
  email
  email_formatted
  fri
  moment
  mon
  name
  order_deadline_passed
  partner_id
  phone
  recurrency_end_date
  responsible_id
  sat
  send_by
  show_confirm_button
  show_order_button
  state_id
  street
  street2
  sun
  thu
  topping_ids_1
  topping_ids_2
  topping_ids_3
  topping_label_1
  topping_label_2
  topping_label_3
  topping_quantity_1
  topping_quantity_2
  topping_quantity_3
  tue
  tz
  wed
  zip_code
  action_confirm_orders()
  action_send_orders()
  create(vals_list)
  toggle_active()
  unlink()
  write(values)
}
class "LunchTopping" as odoo_src.odoo.addons.lunch.models.lunch_topping.LunchTopping {
  company_id
  currency_id
  name
  price
  supplier_id
  topping_category
}
class "MRPProductDocumentController" as odoo_src.odoo.addons.mrp.controller.main.MRPProductDocumentController {
  get_additional_create_params()
}
class "MailActivity" as odoo_src.odoo.addons.calendar.models.mail_activity.MailActivity {
  calendar_event_id
  action_create_calendar_event()
  unlink_w_meeting()
}
class "MailActivity" as odoo_src.odoo.addons.mail.models.mail_activity.MailActivity {
  active
  activity_category
  activity_decoration
  activity_type_id
  attachment_ids
  automated
  can_write
  chaining_type
  date_deadline
  date_done
  has_recommended_activities
  icon
  mail_template_ids
  note
  previous_activity_type_id
  recommended_activity_type_id
  request_partner_id
  res_id
  res_model
  res_model_id
  res_name
  state
  summary
  user_id
  user_tz
  action_cancel()
  action_close_dialog()
  action_done()
  action_done_redirect_to_other()
  action_done_schedule_next()
  action_feedback(feedback, attachment_ids)
  action_feedback_schedule_next(feedback, attachment_ids)
  action_notify()
  action_open_document()
  action_snooze()
  activity_format()
  create(vals_list)
  default_get(fields)
  get_activity_data(res_model, domain, limit, offset, fetch_done)
  unlink()
  write(values)
}
class "MailActivity" as odoo_src.odoo.addons.crm.models.mail_activity.MailActivity {
  action_create_calendar_event()
}
class "MailActivityMixin" as odoo_src.odoo.addons.calendar.models.mail_activity_mixin.MailActivityMixin {
  activity_calendar_event_id
}
class "MailActivityMixin" as odoo_src.odoo.addons.mail.models.mail_activity_mixin.MailActivityMixin {
  activity_date_deadline
  activity_exception_decoration
  activity_exception_icon
  activity_ids
  activity_state
  activity_summary
  activity_type_icon
  activity_type_id
  activity_user_id
  my_activity_date_deadline
  activity_feedback(act_type_xmlids, user_id, feedback, attachment_ids)
  activity_reschedule(act_type_xmlids, user_id, date_deadline, new_user_id)
  activity_schedule(act_type_xmlid, date_deadline, summary, note)
  activity_search(act_type_xmlids, user_id, additional_domain)
  activity_send_mail(template_id)
  activity_unlink(act_type_xmlids, user_id)
  toggle_active()
  unlink()
  write(vals)
}
class "MailActivityPLanTemplate" as odoo_src.odoo.addons.hr.models.mail_activity_plan_template.MailActivityPLanTemplate {
  responsible_type
}
class "MailActivityPlan" as odoo_src.odoo.addons.mail.models.mail_activity_plan.MailActivityPlan {
  active
  company_id
  has_user_on_demand
  name
  res_model
  res_model_id
  steps_count
  template_ids
  copy_data(default)
}
class "MailActivityPlan" as odoo_src.odoo.addons.hr_recruitment.models.mail_activity_plan.MailActivityPlan {
}
class "MailActivityPlan" as odoo_src.odoo.addons.hr.models.mail_activity_plan.MailActivityPlan {
  department_assignable
  department_id
}
class "MailActivityPlanTemplate" as odoo_src.odoo.addons.mail.models.mail_activity_plan_template.MailActivityPlanTemplate {
  activity_type_id
  company_id
  delay_count
  delay_from
  delay_unit
  icon
  note
  plan_id
  res_model
  responsible_id
  responsible_type
  sequence
  summary
}
class "MailActivityPlanTemplate" as odoo_src.odoo.addons.hr_fleet.models.mail_activity_plan_template.MailActivityPlanTemplate {
  responsible_type
}
class "MailActivitySchedule" as odoo_src.odoo.addons.calendar.wizard.mail_activity_schedule.MailActivitySchedule {
  action_create_calendar_event()
}
class "MailActivitySchedule" as odoo_src.odoo.addons.mail.wizard.mail_activity_schedule.MailActivitySchedule {
  activity_category
  activity_type_id
  activity_user_id
  chaining_type
  company_id
  date_deadline
  error
  has_error
  is_batch_mode
  note
  plan_available_ids
  plan_date
  plan_has_user_on_demand
  plan_id
  plan_on_demand_user_id
  plan_summary
  res_ids
  res_model
  res_model_id
  summary
  action_schedule_activities()
  action_schedule_activities_done()
  action_schedule_activities_done_and_schedule()
  action_schedule_plan()
  default_get(fields_list)
}
class "MailActivitySchedule" as odoo_src.odoo.addons.hr_recruitment.wizard.mail_activity_schedule.MailActivitySchedule {
}
class "MailActivitySchedule" as odoo_src.odoo.addons.hr.wizard.mail_activity_schedule.MailActivitySchedule {
  department_id
  plan_department_filterable
  plan_summary : bool
}
class "MailActivitySchedule" as odoo_src.odoo.addons.hr_contract.wizard.mail_activity_schedule.MailActivitySchedule {
}
class "MailActivityType" as odoo_src.odoo.addons.calendar.models.mail_activity_type.MailActivityType {
  category
}
class "MailActivityType" as odoo_src.odoo.addons.mail.models.mail_activity_type.MailActivityType {
  active
  category
  chaining_type
  create_uid
  decoration_type
  default_note
  default_user_id
  delay_count
  delay_from
  delay_label
  delay_unit
  icon
  initial_res_model
  keep_done
  mail_template_ids
  name
  previous_type_ids
  res_model
  res_model_change
  sequence
  suggested_next_type_ids
  summary
  triggered_next_type_id
  action_archive()
  write(values)
}
class "MailActivityType" as odoo_src.odoo.addons.hr_holidays.models.mail_activity_type.MailActivityType {
}
class "MailActivityType" as odoo_src.odoo.addons.fleet.models.mail_activity_type.MailActivityType {
}
class "MailBlackList" as odoo_src.odoo.addons.mail.models.mail_blacklist.MailBlackList {
  active
  email
  action_add()
  create(values)
  mail_action_blacklist_remove()
  write(values)
}
class "MailBlackList" as odoo_src.odoo.addons.mass_mailing.models.mail_blacklist.MailBlackList {
  opt_out_reason_id
}
class "MailBlackListMixin" as odoo_src.odoo.addons.mail.models.mail_thread_blacklist.MailBlackListMixin {
  email_normalized
  is_blacklisted
  message_bounce
  mail_action_blacklist_remove()
}
class "MailBlacklistRemove" as odoo_src.odoo.addons.mail.wizard.mail_blacklist_remove.MailBlacklistRemove {
  email
  reason
  action_unblacklist_apply()
}
class "MailBot" as odoo_src.odoo.addons.mail_bot.models.mail_bot.MailBot {
}
class "MailCCMixin" as odoo_src.odoo.addons.mail.models.mail_thread_cc.MailCCMixin {
  email_cc
  message_new(msg_dict, custom_values)
  message_update(msg_dict, update_vals)
}
class "MailCannedResponse" as odoo_src.odoo.addons.mail.models.mail_canned_response.MailCannedResponse {
  description
  group_ids
  is_editable
  is_shared
  last_used
  source
  substitution
  create(vals_list)
  unlink()
  write(vals)
}
class "MailCase" as odoo_src.odoo.addons.mail.tests.test_mail_mail.MailCase {
  test_mail_send_non_connected_smtp_session()
}
class "MailCase" as odoo_src.odoo.addons.mail.tests.common.MailCase {
  assertBus(channels, message_items, get_params)
  assertBusNotificationType(expected_pairs)
  assertBusNotifications(channels, message_items, check_unique)
  assertMailNotifications(messages, recipients_info, bus_notif_count)
  assertMessageBusNotifications(message, count)
  assertMsgWithoutNotifications(mail_unlink_sent)
  assertNoNotifications()
  assertNotified(message, recipients_info, is_complete)
  assertPostNotifications(recipients_info, mail_unlink_sent)
  assertSinglePostNotifications(recipients_info, message_info, mail_unlink_sent)
  assertTracking(message, data, strict)
  flush_tracking()
  mock_bus()
  mock_mail_app()
  setUp()
}
class "MailCommon" as odoo_src.odoo.addons.mail.tests.common.MailCommon {
  setUpClass()
}
class "MailComposeMessage" as odoo_src.odoo.addons.mass_mailing.wizard.mail_compose_message.MailComposeMessage {
  campaign_id
  mailing_list_ids
  mass_mailing_id
  mass_mailing_name
}
class "MailComposeMessage" as odoo_src.odoo.addons.marketing_card.wizards.mail_compose_message.MailComposeMessage {
}
class "MailComposer" as odoo_src.odoo.addons.mail.wizard.mail_compose_message.MailComposer {
  attachment_ids
  author_id
  auto_delete
  auto_delete_keep_log
  body
  composition_batch
  composition_mode
  email_add_signature
  email_from
  email_layout_xmlid
  force_send
  mail_activity_type_id
  mail_server_id
  message_type
  model
  model_is_thread
  parent_id
  partner_ids
  record_alias_domain_id
  record_company_id
  record_name
  reply_to
  reply_to_force_new
  reply_to_mode
  res_domain
  res_domain_user_id
  res_ids
  scheduled_date
  subject
  subtype_id
  subtype_is_log
  template_id
  template_name
  use_exclusion_list
  action_schedule_message(scheduled_date)
  action_send_mail()
  cancel_save_template()
  create_mail_template()
  default_get(fields_list)
  open_template_creation_wizard()
}
class "MailComposer" as odoo_src.odoo.addons.point_of_sale.models.mail_compose_message.MailComposer {
  action_send_mail()
}
class "MailComposerMixin" as odoo_src.odoo.addons.mail.models.mail_composer_mixin.MailComposerMixin {
  body
  body_has_template_value
  can_edit_body
  is_mail_template_editor
  lang
  subject
  template_id
}
class "MailController" as odoo_src.odoo.addons.mail.controllers.mail.MailController {
  mail_action_unfollow(model, res_id, pid, token)
  mail_action_view(model, res_id, access_token)
  mail_thread_message_redirect(message_id)
}
class "<color:red>MailDeliveryException</color>" as odoo_src.odoo.addons.base.models.ir_mail_server.MailDeliveryException {
}
class "MailGatewayAllowed" as odoo_src.odoo.addons.mail.models.mail_gateway_allowed.MailGatewayAllowed {
  email
  email_normalized
  get_empty_list_help(help_message)
}
class "MailGroup" as odoo_src.odoo.addons.mail_group.models.mail_group.MailGroup {
  access_group_id
  access_mode
  active
  alias_contact : str
  can_manage_group
  description
  image_128
  is_member
  is_moderator
  mail_group_message_count
  mail_group_message_ids
  mail_group_message_last_month_count
  mail_group_message_moderation_count
  member_count
  member_ids
  member_partner_ids
  moderation
  moderation_guidelines
  moderation_guidelines_msg
  moderation_notify
  moderation_notify_msg
  moderation_rule_count
  moderation_rule_ids
  moderator_ids
  name
  action_join()
  action_leave()
  action_send_guidelines(members)
  default_get(fields)
  message_new(msg_dict, custom_values)
  message_post(body, subject, email_from, author_id)
  message_update(msg_dict, update_vals)
}
class "MailGroupMember" as odoo_src.odoo.addons.mail_group.models.mail_group_member.MailGroupMember {
  email
  email_normalized
  mail_group_id
  partner_id
}
class "MailGroupMessage" as odoo_src.odoo.addons.mail_group.models.mail_group_message.MailGroupMessage {
  attachment_ids
  author_id
  author_moderation
  body
  create_date
  email_from
  email_from_normalized
  group_message_child_ids
  group_message_parent_id
  is_group_moderated
  mail_group_id
  mail_message_id
  moderation_status
  moderator_id
  subject
  action_moderate_accept()
  action_moderate_allow()
  action_moderate_ban()
  action_moderate_ban_with_comment(ban_subject, ban_comment)
  action_moderate_reject()
  action_moderate_reject_with_comment(reject_subject, reject_comment)
  copy_data(default)
  create(values_list)
}
class "MailGroupMessageReject" as odoo_src.odoo.addons.mail_group.wizard.mail_group_message_reject.MailGroupMessageReject {
  action
  body
  email_from_normalized
  mail_group_message_id
  send_email
  subject
  action_send_mail()
}
class "MailGroupModeration" as odoo_src.odoo.addons.mail_group.models.mail_group_moderation.MailGroupModeration {
  email
  mail_group_id
  status
  create(vals_list)
  write(values)
}
class "MailGuest" as odoo_src.odoo.addons.mail.models.discuss.mail_guest.MailGuest {
  access_token
  channel_ids
  country_id
  im_status
  lang
  name
  timezone
}
class "MailIceServer" as odoo_src.odoo.addons.mail.models.mail_ice_server.MailIceServer {
  credential
  server_type
  uri
  username
}
class "MailMail" as odoo_src.odoo.addons.mail.models.mail_mail.MailMail {
  auto_delete
  body_content
  body_html
  email_cc
  email_to
  failure_reason
  failure_type
  fetchmail_server_id
  headers
  is_notification
  mail_message_id
  mail_message_id_int
  message_type
  recipient_ids
  references
  restricted_attachment_count
  scheduled_date
  state
  unrestricted_attachment_ids
  action_open_document()
  action_retry()
  cancel()
  create(values_list)
  default_get(fields)
  fields_get()
  mark_outgoing()
  process_email_queue(ids, batch_size)
  send(auto_commit, raise_exception, post_send_callback)
  send_after_commit()
  unlink()
  write(vals)
}
class "MailMail" as odoo_src.odoo.addons.mass_mailing.models.mail_mail.MailMail {
  mailing_id
  mailing_trace_ids
}
class "MailMainAttachmentMixin" as odoo_src.odoo.addons.mail.models.mail_thread_main_attachment.MailMainAttachmentMixin {
  message_main_attachment_id
}
class "MailMessage" as odoo_src.odoo.addons.im_livechat.models.mail_message.MailMessage {
  parent_author_name
  parent_body
}
class "MailMessage" as odoo_src.odoo.addons.mail.models.discuss.mail_message.MailMessage {
}
class "MailMessageReaction" as odoo_src.odoo.addons.mail.models.mail_message_reaction.MailMessageReaction {
  content
  guest_id
  message_id
  partner_id
  init()
}
class "MailMessageSchedule" as odoo_src.odoo.addons.mail.models.mail_message_schedule.MailMessageSchedule {
  mail_message_id
  notification_parameters
  scheduled_datetime
  create(vals_list)
  force_send()
}
class "MailMessageSubtype" as odoo_src.odoo.addons.mail.models.mail_message_subtype.MailMessageSubtype {
  default
  description
  hidden
  internal
  name
  parent_id
  relation_field
  res_model
  sequence
  track_recipients
  create(vals_list)
  default_subtypes(model_name)
  unlink()
  write(vals)
}
class "MailMessageSubtype" as odoo_src.odoo.addons.hr_holidays.models.mail_message_subtype.MailMessageSubtype {
  create(vals_list)
  write(vals)
}
class "MailNotification" as odoo_src.odoo.addons.mail.models.mail_notification.MailNotification {
  author_id
  failure_reason
  failure_type
  is_read
  mail_mail_id
  mail_message_id
  notification_status
  notification_type
  read_date
  res_partner_id
  create(vals_list)
  format_failure_reason()
  init()
  write(vals)
}
class "MailPluginController" as odoo_src.odoo.addons.mail_plugin.controllers.mail_plugin.MailPluginController {
  get_translations()
  log_mail_content(model, res_id, message, attachments)
  modules_get()
  res_partner_create(email, name, company)
  res_partner_enrich_and_create_company(partner_id)
  res_partner_enrich_and_update_company(partner_id)
  res_partner_get(email, name, partner_id)
  res_partners_search(search_term, limit)
}
class "MailPluginController" as odoo_src.odoo.addons.crm_mail_plugin.controllers.mail_plugin.MailPluginController {
}
class "MailPush" as odoo_src.odoo.addons.mail.models.mail_push.MailPush {
  mail_push_device_id
  payload
}
class "MailPushDevice" as odoo_src.odoo.addons.mail.models.mail_push_device.MailPushDevice {
  endpoint
  expiration_time
  keys
  partner_id
  get_web_push_vapid_public_key()
  register_devices()
  unregister_devices()
}
class "MailRenderMixin" as odoo_src.odoo.addons.link_tracker.models.mail_render_mixin.MailRenderMixin {
}
class "MailRenderMixin" as odoo_src.odoo.addons.mail.models.mail_render_mixin.MailRenderMixin {
  lang
  render_model
  create(values_list)
  write(vals)
}
class "MailRenderMixin" as odoo_src.odoo.addons.mass_mailing.models.mail_render_mixin.MailRenderMixin {
}
class "MailResendMessage" as odoo_src.odoo.addons.mail.wizard.mail_resend_message.MailResendMessage {
  can_cancel
  can_resend
  mail_message_id
  notification_ids
  partner_ids
  partner_readonly
  cancel_mail_action()
  default_get(fields)
  resend_mail_action()
}
class "MailRtcSession" as odoo_src.odoo.addons.mail.models.discuss.discuss_channel_rtc_session.MailRtcSession {
  channel_id
  channel_member_id
  guest_id
  is_camera_on
  is_deaf
  is_muted
  is_screen_sharing_on
  partner_id
  write_date
  action_disconnect()
  create(vals_list)
  unlink()
}
class "MailTemplate" as odoo_src.odoo.addons.mail.models.mail_template.MailTemplate {
  active
  attachment_ids
  auto_delete
  body_html
  can_write
  description
  email_cc
  email_from
  email_layout_xmlid
  email_to
  is_template_editor
  mail_server_id
  model
  model_id
  name
  partner_to
  ref_ir_act_window
  reply_to
  report_template_ids
  scheduled_date
  subject
  template_category
  use_default_to
  user_id
  cancel_unlink()
  copy_data(default)
  create(vals_list)
  create_action()
  default_get(fields)
  open_delete_confirmation_modal()
  send_mail(res_id, force_send, raise_exception, email_values, email_layout_xmlid)
  send_mail_batch(res_ids, force_send, raise_exception, email_values, email_layout_xmlid)
  unlink()
  unlink_action()
  write(vals)
}
class "MailTemplate" as odoo_src.odoo.addons.account.models.mail_template.MailTemplate {
}
class "MailTemplate" as odoo_src.odoo.addons.event.models.mail_template.MailTemplate {
  unlink()
}
class "MailTemplatePreview" as odoo_src.odoo.addons.mail.wizard.mail_template_preview.MailTemplatePreview {
  attachment_ids
  body_html
  email_cc
  email_from
  email_to
  error_msg
  lang
  mail_template_id
  model_id
  no_record
  partner_ids
  reply_to
  resource_ref
  scheduled_date
  subject
}
class "MailTemplateReset" as odoo_src.odoo.addons.mail.wizard.mail_template_reset.MailTemplateReset {
  template_ids
  reset_template()
}
class "MailThread" as odoo_src.odoo.addons.mail.models.mail_thread.MailThread {
  has_message
  message_attachment_count
  message_follower_ids
  message_has_error
  message_has_error_counter
  message_ids
  message_is_follower
  message_needaction
  message_needaction_counter
  message_partner_ids
  copy_data(default)
  create(vals_list)
  get_empty_list_help(help_message)
  get_views(views, options)
  message_change_thread(new_thread, new_parent_message)
  message_get_followers(after, limit, filter_recipients)
  message_mail_with_source(source_ref, render_values, message_type, auto_commit)
  message_new(msg_dict, custom_values)
  message_notify()
  message_parse(message, save_original)
  message_post()
  message_post_with_source(source_ref, render_values, message_type, subtype_xmlid, subtype_id)
  message_process(model, message, custom_values, save_original, strip_attachments, thread_id)
  message_route(message, message_dict, model, thread_id, custom_values)
  message_subscribe(partner_ids, subtype_ids)
  message_unsubscribe(partner_ids)
  message_update(msg_dict, update_vals)
  notify_cancel_by_type(notification_type)
  unlink()
  write(values)
}
class "MailThread" as odoo_src.odoo.addons.mass_mailing.models.mail_thread.MailThread {
  message_mail_with_source(source_ref)
  message_new(msg_dict, custom_values)
  message_post_with_source(source_ref)
}
class "MailTracking" as odoo_src.odoo.addons.mail.models.mail_tracking_value.MailTracking {
  currency_id
  field_id
  field_info
  mail_message_id
  new_value_char
  new_value_datetime
  new_value_float
  new_value_integer
  new_value_text
  old_value_char
  old_value_datetime
  old_value_float
  old_value_integer
  old_value_text
}
class "MailTrackingDurationMixin" as odoo_src.odoo.addons.mail.models.mail_tracking_duration_mixin.MailTrackingDurationMixin {
  duration_tracking
}
class "MailTrackingDurationMixinCase" as odoo_src.odoo.addons.mail.tests.mail_tracking_duration_mixin_case.MailTrackingDurationMixinCase {
  assertTrackingDuration(records, record_to_tracking_dic)
  setUpClass(tested_model, model_fields)
}
class "MailTrackingValues" as odoo_src.odoo.addons.account.models.mail_tracking_value.MailTrackingValues {
  write(vals)
}
class "MailboxController" as odoo_src.odoo.addons.mail.controllers.mailbox.MailboxController {
  discuss_history_messages(search_term, before, after, limit, around)
  discuss_inbox_messages(search_term, before, after, limit, around)
  discuss_starred_messages(search_term, before, after, limit, around)
}
class "Mailing" as odoo_src.odoo.addons.mass_mailing_sms.models.mailing_mailing.Mailing {
  ab_testing_mailings_sms_count
  ab_testing_sms_winner_selection
  body_plaintext
  mailing_type
  sms_allow_unsubscribe
  sms_force_send
  sms_has_insufficient_credit
  sms_has_unregistered_account
  sms_subject
  sms_template_id
  action_buy_sms_credits()
  action_retry_failed()
  action_retry_failed_sms()
  action_send_sms(res_ids)
  action_test()
  convert_links()
  create(vals_list)
  default_get(fields)
  get_sms_link_replacements_placeholders()
}
class "MailingContact" as odoo_src.odoo.addons.mass_mailing_sms.models.mailing_contact.MailingContact {
  mobile
}
class "MailingContactImport" as odoo_src.odoo.addons.mass_mailing.wizard.mailing_contact_import.MailingContactImport {
  contact_list
  mailing_list_ids
  action_import()
  action_open_base_import()
}
class "MailingContactToList" as odoo_src.odoo.addons.mass_mailing.wizard.mailing_contact_to_list.MailingContactToList {
  contact_ids
  mailing_list_id
  action_add_contacts()
  action_add_contacts_and_send_mailing()
}
class "MailingFilter" as odoo_src.odoo.addons.mass_mailing.models.mailing_filter.MailingFilter {
  create_uid
  mailing_domain
  mailing_model_id
  mailing_model_name
  name
}
class "MailingLegacy" as odoo_src.odoo.addons.mass_mailing.controllers.legacy.MailingLegacy {
  mailing_unsubscribe(mailing_id, email, res_id, token)
}
class "MailingList" as odoo_src.odoo.addons.mass_mailing_sms.models.mailing_list.MailingList {
  contact_count_sms
  action_send_mailing_sms()
  action_view_contacts_sms()
  action_view_mailings()
}
class "MailingMailingScheduleDate" as odoo_src.odoo.addons.mass_mailing.wizard.mailing_mailing_schedule_date.MailingMailingScheduleDate {
  mass_mailing_id
  schedule_date
  action_schedule_date()
}
class "MailingSMSController" as odoo_src.odoo.addons.mass_mailing_sms.controllers.main.MailingSMSController {
  blacklist_number(mailing_id, trace_code)
  blacklist_page(mailing_id, trace_code)
  sms_short_link_redirect(code, sms_id_int)
}
class "MailingSubscription" as odoo_src.odoo.addons.mass_mailing.models.mailing_subscription.MailingSubscription {
  contact_id
  is_blacklisted
  list_id
  message_bounce
  opt_out
  opt_out_datetime
  opt_out_reason_id
  create(vals_list)
  open_mailing_contact()
  write(vals)
}
class "MailingSubscriptionReason" as odoo_src.odoo.addons.mass_mailing.models.mailing_subscription_optout.MailingSubscriptionReason {
  is_feedback
  name
  sequence
}
class "MailingTrace" as odoo_src.odoo.addons.mass_mailing.models.mailing_trace.MailingTrace {
  campaign_id
  email
  failure_reason
  failure_type
  links_click_datetime
  links_click_ids
  mail_mail_id
  mail_mail_id_int
  mass_mailing_id
  medium_id
  message_id
  model
  open_datetime
  reply_datetime
  res_id
  sent_datetime
  source_id
  trace_status
  trace_type
  action_view_contact()
  create(values_list)
  set_bounced(domain, bounce_message)
  set_canceled(domain)
  set_clicked(domain)
  set_failed(domain, failure_type)
  set_opened(domain)
  set_replied(domain)
  set_sent(domain)
}
class "MailingTrace" as odoo_src.odoo.addons.mass_mailing_sms.models.mailing_trace.MailingTrace {
  CODE_SIZE : int
  failure_type
  sms_code
  sms_id
  sms_id_int
  sms_number
  sms_tracker_ids
  trace_type
  create(values_list)
}
class "MailingTraceReport" as odoo_src.odoo.addons.mass_mailing.report.mailing_trace_report.MailingTraceReport {
  bounced
  campaign
  canceled
  clicked
  delivered
  email_from
  error
  mailing_type
  name
  opened
  pending
  processing
  replied
  scheduled
  scheduled_date
  sent
  state
  init()
}
class "MaintenanceEquipment" as odoo_src.odoo.addons.maintenance.models.maintenance.MaintenanceEquipment {
  active
  assign_date
  category_id
  color
  cost
  equipment_properties
  location
  maintenance_ids
  match_serial
  model
  name
  note
  owner_user_id
  partner_id
  partner_ref
  scrap_date
  serial_no
  technician_user_id
  warranty_date
  action_open_matched_serial()
  create(vals_list)
  write(vals)
}
class "MaintenanceEquipment" as odoo_src.odoo.addons.hr_maintenance.models.equipment.MaintenanceEquipment {
  assign_date
  department_id
  employee_id
  equipment_assign_to
  owner_user_id
  create(vals_list)
  write(vals)
}
class "MaintenanceEquipmentCategory" as odoo_src.odoo.addons.maintenance.models.maintenance.MaintenanceEquipmentCategory {
  alias_id
  color
  company_id
  equipment_count
  equipment_ids
  equipment_properties_definition
  fold
  maintenance_count
  maintenance_ids
  maintenance_open_count
  name
  note
  technician_user_id
}
class "MaintenanceMixin" as odoo_src.odoo.addons.maintenance.models.maintenance.MaintenanceMixin {
  company_id
  effective_date
  estimated_next_failure
  expected_mtbf
  latest_failure_date
  maintenance_count
  maintenance_ids
  maintenance_open_count
  maintenance_team_id
  mtbf
  mttr
  technician_user_id
}
class "MaintenanceRequest" as odoo_src.odoo.addons.maintenance.models.maintenance.MaintenanceRequest {
  archive
  category_id
  close_date
  color
  company_id
  description
  done
  duration
  equipment_id
  instruction_google_slide
  instruction_pdf
  instruction_text
  instruction_type
  kanban_state
  maintenance_team_id
  maintenance_type
  name
  owner_user_id
  priority
  recurring_maintenance
  repeat_interval
  repeat_type
  repeat_unit
  repeat_until
  request_date
  schedule_date
  stage_id
  user_id
  activity_update()
  archive_equipment_request()
  create(vals_list)
  reset_equipment_request()
  write(vals)
}
class "MaintenanceRequest" as odoo_src.odoo.addons.hr_maintenance.models.equipment.MaintenanceRequest {
  employee_id
  equipment_id
  owner_user_id
  create(vals_list)
  message_new(msg, custom_values)
  write(vals)
}
class "MaintenanceStage" as odoo_src.odoo.addons.maintenance.models.maintenance.MaintenanceStage {
  done
  fold
  name
  sequence
}
class "MaintenanceTeam" as odoo_src.odoo.addons.maintenance.models.maintenance.MaintenanceTeam {
  active
  color
  company_id
  equipment_ids
  member_ids
  name
  request_ids
  todo_request_count
  todo_request_count_block
  todo_request_count_date
  todo_request_count_high_priority
  todo_request_count_unscheduled
  todo_request_ids
}
class "Manager" as odoo_src.odoo.addons.hw_drivers.main.Manager {
  daemon : bool
  domain
  hostname
  mac_address
  previous_iot_devices : dict, list
  server_url : NoneType
  version
  run()
  send_alldevices(iot_client)
}
class "MandatoryDay" as odoo_src.odoo.addons.hr_holidays.models.hr_leave_mandatory_day.MandatoryDay {
  color
  company_id
  department_ids
  end_date
  name
  resource_calendar_id
  start_date
}
class "ManyToManyConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.ManyToManyConverter {
  value_to_html(value, options)
}
class "ManyToOneConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.ManyToOneConverter {
  value_to_html(value, options)
}
class "MarketingCard" as odoo_src.odoo.addons.marketing_card.models.card_card.MarketingCard {
  active
  campaign_id
  image
  requires_sync
  res_id
  res_model
  share_status
}
class "MarketingCardCommon" as odoo_src.odoo.addons.marketing_card.tests.common.MarketingCardCommon {
  mock_datetime_and_now(mock_dt)
  setUpClass()
}
class "MarketingCardController" as odoo_src.odoo.addons.marketing_card.controllers.marketing_card.MarketingCardController {
  card_campaign_image(card_id, card_slug)
  card_campaign_preview(card_id, card_slug)
  card_campaign_redirect(card_id, card_slug)
}
class "MassMailCase" as odoo_src.odoo.addons.mass_mailing.tests.common.MassMailCase {
  assertMailTraces(recipients_info, mailing, records, check_mail, sent_unlink, author, mail_links_info)
  assertMailingStatistics(mailing)
  gateway_mail_trace_bounce(mailing, record, bounce_base_values)
  gateway_mail_trace_click(mailing, record, click_label)
  gateway_mail_trace_open(mailing, record)
  gateway_mail_trace_reply(mailing, record)
}
class "MassMailCommon" as odoo_src.odoo.addons.mass_mailing.tests.common.MassMailCommon {
  setUpClass()
}
class "MassMailController" as odoo_src.odoo.addons.mass_mailing.controllers.main.MassMailController {
  full_url_redirect(code, mailing_trace_id)
  mail_blocklist_add(mailing_id, document_id, email, hash_token)
  mail_blocklist_remove(mailing_id, document_id, email, hash_token)
  mailing_confirm_unsubscribe(mailing_id, document_id, email, hash_token)
  mailing_confirm_unsubscribe_post(mailing_id, document_id, email, hash_token)
  mailing_my()
  mailing_report_deactivate(token, user_id)
  mailing_send_feedback(mailing_id, document_id, email, hash_token, last_action, opt_out_reason_id, feedback)
  mailing_unsubscribe(mailing_id, document_id, email, hash_token)
  mailing_unsubscribe_oneclick(mailing_id, document_id, email, hash_token)
  mailing_unsubscribe_placeholder_link()
  mailing_update_list_subscription(mailing_id, document_id, email, hash_token, lists_optin_ids)
  mailing_view_in_browser(mailing_id, email, document_id, hash_token)
  mailing_view_in_browser_placeholder_link()
  mass_mailing_preview_mobile_content()
  track_mail_open(mail_id, token)
}
class "MassMailing" as odoo_src.odoo.addons.mass_mailing_sale.models.mailing_mailing.MassMailing {
  sale_invoiced_amount
  sale_quotation_count
  action_redirect_to_invoiced()
  action_redirect_to_quotations()
}
class "MassMailing" as odoo_src.odoo.addons.mass_mailing.models.mailing.MassMailing {
  ab_testing_completed
  ab_testing_description
  ab_testing_enabled
  ab_testing_is_winner_mailing
  ab_testing_mailings_count
  ab_testing_pc
  ab_testing_schedule_datetime
  ab_testing_winner_selection
  active
  attachment_ids
  body_arch
  body_html
  bounced
  bounced_ratio
  calendar_date
  campaign_id
  canceled
  clicked
  clicks_ratio
  color
  contact_list_ids
  delivered
  email_from
  expected
  failed
  favorite
  favorite_date
  is_ab_test_sent
  is_body_empty
  keep_archives
  kpi_mail_required
  link_trackers_count
  mail_server_available
  mail_server_id
  mailing_domain
  mailing_filter_count
  mailing_filter_domain
  mailing_filter_id
  mailing_model_id
  mailing_model_name
  mailing_model_real
  mailing_on_mailing_list
  mailing_trace_ids
  mailing_type
  mailing_type_description
  medium_id
  next_departure
  next_departure_is_past
  opened
  opened_ratio
  pending
  preview
  process
  received_ratio
  replied
  replied_ratio
  reply_to
  reply_to_mode
  schedule_date
  schedule_type
  scheduled
  sent
  sent_date
  state
  subject
  total
  user_id
  warning_message
  action_cancel()
  action_compare_versions()
  action_duplicate()
  action_fetch_favorites(extra_domain)
  action_launch()
  action_put_in_queue()
  {abstract}action_reload()
  action_remove_favorite()
  action_retry_failed()
  action_schedule()
  action_select_as_winner()
  action_send_mail(res_ids)
  action_send_winner_mailing()
  action_set_favorite()
  action_test()
  action_view_bounced()
  action_view_clicked()
  action_view_delivered()
  action_view_link_trackers()
  action_view_mailing_contacts()
  action_view_opened()
  action_view_replied()
  action_view_traces_canceled()
  action_view_traces_failed()
  action_view_traces_process()
  action_view_traces_scheduled()
  action_view_traces_sent()
  convert_links()
  copy_data(default)
  create(vals_list)
  default_get(fields_list)
  write(values)
}
class "MassMailing" as odoo_src.odoo.addons.marketing_card.models.mailing_mailing.MassMailing {
  card_campaign_id
  card_requires_sync_count
  mailing_model_id
  action_put_in_queue()
  action_send_mail(res_ids)
  action_update_cards()
}
class "MassMailing" as odoo_src.odoo.addons.mass_mailing_crm.models.mailing_mailing.MassMailing {
  crm_lead_count
  use_leads
  action_redirect_to_leads_and_opportunities()
}
class "MassMailingContact" as odoo_src.odoo.addons.mass_mailing.models.mailing_contact.MassMailingContact {
  company_name
  country_id
  email
  first_name
  last_name
  list_ids
  name
  opt_out
  subscription_ids
  tag_ids
  title_id
  action_add_to_mailing_list()
  action_import()
  add_to_list(name, list_id)
  copy(default)
  create(vals_list)
  default_get(fields_list)
  fields_get(allfields, attributes)
  get_import_templates()
  name_create(name)
}
class "MassMailingList" as odoo_src.odoo.addons.mass_mailing.models.mailing_list.MassMailingList {
  active
  contact_count
  contact_count_blacklisted
  contact_count_email
  contact_count_opt_out
  contact_ids
  contact_pct_blacklisted
  contact_pct_bounce
  contact_pct_opt_out
  is_public
  mailing_count
  mailing_ids
  name
  subscription_ids
  action_merge(src_lists, archive)
  action_open_import()
  action_send_mailing()
  action_view_contacts()
  action_view_contacts_blacklisted()
  action_view_contacts_bouncing()
  action_view_contacts_email()
  action_view_contacts_opt_out()
  action_view_mailings()
  close_dialog()
  copy_data(default)
  write(vals)
}
class "MassMailingListMerge" as odoo_src.odoo.addons.mass_mailing.wizard.mailing_list_merge.MassMailingListMerge {
  archive_src_lists
  dest_list_id
  merge_options
  new_list_name
  src_list_ids
  action_mailing_lists_merge()
  default_get(fields)
}
class "MassSMSCase" as odoo_src.odoo.addons.mass_mailing_sms.tests.common.MassSMSCase {
  assertSMSStatistics(recipients_info, mailing, records, check_sms)
  assertSMSTraces(recipients_info, mailing, records, check_sms, sent_unlink, sms_links_info)
  gateway_sms_bounce(mailing, records, error_code)
  gateway_sms_click(mailing, record, use_sent_sms)
  gateway_sms_delivered(mailing, records)
  gateway_sms_sent_click(sms_sent)
  gateway_sms_sms_click(sms_sms)
}
class "MassSMSCommon" as odoo_src.odoo.addons.mass_mailing_sms.tests.common.MassSMSCommon {
  setUpClass()
}
class "MassSMSTest" as odoo_src.odoo.addons.mass_mailing_sms.wizard.mailing_sms_test.MassSMSTest {
  mailing_id
  numbers
  action_send_sms()
}
class "Meeting" as odoo_src.odoo.addons.google_calendar.models.calendar.Meeting {
  MEET_ROUTE : str
  google_id
  guests_readonly
  videocall_source
  action_mass_archive(recurrence_update_setting)
  create(vals_list)
  write(values)
}
class "Meeting" as odoo_src.odoo.addons.calendar.models.calendar_event.Meeting {
  DISCUSS_ROUTE : str
  accepted_count
  access_token
  active
  activity_ids
  alarm_ids
  allday
  attendee_ids
  attendees_count
  awaiting_count
  byday
  categ_ids
  count
  current_attendee
  current_status
  day
  declined_count
  description
  display_description
  display_time
  duration
  end_type
  event_tz
  follow_recurrence
  fri
  interval
  invalid_email_partner_ids
  is_highlighted
  is_organizer_alone
  location
  mon
  month_by
  name
  partner_id
  partner_ids
  privacy
  recurrence_id
  recurrence_update
  recurrency
  res_id
  res_model
  res_model_id
  res_model_name
  rrule
  rrule_type
  rrule_type_ui
  sat
  should_show_status
  show_as
  start
  start_date
  stop
  stop_date
  sun
  tentative_count
  thu
  tue
  until
  user_can_edit
  user_id
  videocall_channel_id
  videocall_location
  videocall_source
  wed
  weekday
  action_join_meeting(partner_id)
  action_join_video_call()
  action_mass_archive(recurrence_update_setting)
  action_mass_deletion(recurrence_update_setting)
  action_open_calendar_event()
  action_open_composer()
  action_sendmail()
  change_attendee_status(status, recurrence_update_setting)
  clear_videocall_location()
  copy(default)
  create(vals_list)
  default_get(fields)
  find_partner_customer()
  get_default_duration()
  get_discuss_videocall_location()
  get_display_time_tz(tz)
  get_next_alarm_date(events_by_alarm)
  get_state_selections()
  read_group(domain, fields, groupby, offset, limit, orderby, lazy)
  set_discuss_videocall_location()
  unlink()
  write(values)
}
class "Meeting" as odoo_src.odoo.addons.microsoft_calendar.models.calendar.Meeting {
  microsoft_recurrence_master_id
  action_mass_archive(recurrence_update_setting)
  create(vals_list)
  unlink()
  write(values)
}
class "MeetingType" as odoo_src.odoo.addons.calendar.models.calendar_event_type.MeetingType {
  color
  name
}
class "MembershipInvoice" as odoo_src.odoo.addons.membership.wizard.membership_invoice.MembershipInvoice {
  member_price
  product_id
  membership_invoice()
  onchange_product()
}
class "MembershipLine" as odoo_src.odoo.addons.membership.models.membership.MembershipLine {
  account_invoice_id
  account_invoice_line
  company_id
  date
  date_cancel
  date_from
  date_to
  member_price
  membership_id
  partner
  state
}
class "MercadoPagoCommon" as odoo_src.odoo.addons.payment_mercado_pago.tests.common.MercadoPagoCommon {
  MP_PAYMENT_ID : str
  setUpClass()
}
class "MercadoPagoController" as odoo_src.odoo.addons.payment_mercado_pago.controllers.main.MercadoPagoController {
  mercado_pago_return_from_checkout()
  mercado_pago_webhook(reference)
}
class "MergeOpportunity" as odoo_src.odoo.addons.crm.wizard.crm_merge_opportunities.MergeOpportunity {
  opportunity_ids
  team_id
  user_id
  action_merge()
  default_get(fields)
}
class "MergePartnerAutomatic" as odoo_src.odoo.addons.mail.wizard.base_partner_merge_automatic_wizard.MergePartnerAutomatic {
}
class "MergePartnerAutomatic" as odoo_src.odoo.addons.loyalty.wizard.base_partner_merge.MergePartnerAutomatic {
}
class "MergePartnerAutomatic" as odoo_src.odoo.addons.account.wizard.base_partner_merge.MergePartnerAutomatic {
}
class "MergePartnerAutomatic" as odoo_src.odoo.addons.account.models.merge_partner_automatic.MergePartnerAutomatic {
}
class "MergePartnerAutomatic" as odoo_src.odoo.addons.base.wizard.base_partner_merge.MergePartnerAutomatic {
  current_line_id
  dst_partner_id
  exclude_contact
  exclude_journal_item
  group_by_email
  group_by_is_company
  group_by_name
  group_by_parent_id
  group_by_vat
  line_ids
  maximum_group
  number_group
  partner_ids
  state
  action_merge()
  action_skip()
  action_start_automatic_process()
  action_start_manual_process()
  action_update_all_process()
  default_get(fields)
  parent_migration_process_cb()
}
class "MergePartnerLine" as odoo_src.odoo.addons.base.wizard.base_partner_merge.MergePartnerLine {
  aggr_ids
  min_id
  wizard_id
}
class "Message" as odoo_src.odoo.addons.mail.models.mail_message.Message {
  attachment_ids
  author_avatar
  author_guest_id
  author_id
  body
  child_ids
  date
  email_add_signature
  email_from
  email_layout_xmlid
  has_error
  is_current_user_or_guest_author
  is_internal
  link_preview_ids
  mail_activity_type_id
  mail_ids
  mail_server_id
  message_id
  message_type
  model
  needaction
  notification_ids
  notified_partner_ids
  parent_id
  partner_ids
  pinned_at
  preview
  reaction_ids
  record_alias_domain_id
  record_company_id
  record_name
  reply_to
  reply_to_force_new
  res_id
  starred
  starred_partner_ids
  subject
  subtype_id
  tracking_value_ids
  action_open_document()
  create(values_list)
  default_get(fields)
  export_data(fields_to_export)
  fetch(field_names)
  init()
  is_thread_message(vals)
  mark_all_as_read(domain)
  read(fields, load)
  set_message_done()
  toggle_message_starred()
  unlink()
  unstar_all()
  write(vals)
}
class "Message" as odoo_src.odoo.addons.account.models.mail_message.Message {
  account_audit_log_account_id
  account_audit_log_activated
  account_audit_log_company_id
  account_audit_log_move_id
  account_audit_log_partner_id
  account_audit_log_preview
  account_audit_log_tax_id
  write(vals)
}
class "MessagePostSubTestData" as odoo_src.odoo.addons.mail.tests.test_thread_controller.MessagePostSubTestData {
  allowed
  exp_author : NoneType
  exp_emails : NoneType
  exp_partners : NoneType
  guest
  post_data : dict
  route_kw
  user
}
class "MessageReactionController" as odoo_src.odoo.addons.mail.controllers.message_reaction.MessageReactionController {
  mail_message_reaction(message_id, content, action)
}
class "MessageTranslation" as odoo_src.odoo.addons.mail.models.mail_message_translation.MessageTranslation {
  body
  create_date
  message_id
  source_lang
  target_lang
  init()
}
class "MicrosoftAuth" as odoo_src.odoo.addons.microsoft_account.controllers.main.MicrosoftAuth {
  oauth2callback()
}
class "MicrosoftCalendarController" as odoo_src.odoo.addons.microsoft_calendar.controllers.main.MicrosoftCalendarController {
  microsoft_calendar_sync_data(model)
}
class "MicrosoftCalendarService" as odoo_src.odoo.addons.microsoft_calendar.utils.microsoft_calendar.MicrosoftCalendarService {
  microsoft_service
  answer(event_id, answer, values, token, timeout)
  delete(event_id, token, timeout)
  get_events(sync_token, token, timeout)
  insert(values, token, timeout)
  is_authorized(user)
  patch(event_id, values, token, timeout)
}
class "MicrosoftEvent" as odoo_src.odoo.addons.microsoft_calendar.utils.microsoft_event.MicrosoftEvent {
  ids
  odoo_ids
  uids
  cancelled()
  filter(func) -> 'MicrosoftEvent'
  get_recurrence()
  is_cancelled()
  is_recurrence()
  is_recurrence_outlier()
  is_recurrent()
  is_recurrent_not_master()
  is_removed()
  match_with_odoo_events(env) -> 'MicrosoftEvent'
  microsoft_ids()
  odoo_id(env)
  owner_id(env)
}
class "MicrosoftOutlookController" as odoo_src.odoo.addons.microsoft_outlook.controllers.main.MicrosoftOutlookController {
  microsoft_outlook_callback(code, state, error_description)
}
class "MicrosoftOutlookMixin" as odoo_src.odoo.addons.microsoft_outlook.models.microsoft_outlook_mixin.MicrosoftOutlookMixin {
  is_microsoft_outlook_configured
  microsoft_outlook_access_token
  microsoft_outlook_access_token_expiration
  microsoft_outlook_refresh_token
  microsoft_outlook_uri
  open_microsoft_outlook_uri()
}
class "MicrosoftService" as odoo_src.odoo.addons.microsoft_account.models.microsoft_service.MicrosoftService {
  generate_refresh_token(service, authorization_code)
}
class "MicrosoftSync" as odoo_src.odoo.addons.microsoft_calendar.models.microsoft_sync.MicrosoftSync {
  active
  microsoft_id
  ms_universal_event_id
  need_sync_m
  create(vals_list)
  unlink()
  write(vals)
}
class "MockEmail" as odoo_src.odoo.addons.mail.tests.common.MockEmail {
  build_email_mocked
  mail_mail_create_mocked
  mail_mail_private_send_mocked
  mail_unlink_sent : bool
  send_email_mocked
  assertHtmlEqual(value, expected, message)
  assertMailMail(recipients, status, email_to_recipients, mail_message, author, content, fields_values, email_values)
  assertMailMailWEmails(emails, status, email_to_recipients, mail_message, author, content, fields_values, email_values)
  assertMailMailWId(mail_id, status, email_to_recipients, author, content, fields_values, email_values)
  assertMailMailWRecord(record, recipients, status, email_to_recipients, mail_message, author, content, fields_values, email_values)
  assertMessageFields(message, fields_values)
  assertNoMail(recipients, mail_message, author)
  assertNotSentEmail(recipients)
  assertSentEmail(author, recipients)
  format(template, to, subject, email_from, return_path, cc, extra, msg_id, references)
  format_and_process(template, email_from, to, subject, cc, return_path, extra, msg_id, model, target_model, target_field, with_user)
  from_string(text)
  gateway_mail_reply_from_smtp_email(template, source_smtp_to_list, reply_all, cc, force_email_from, force_return_path, extra, use_references, extra_references, use_in_reply_to, debug_log)
  gateway_mail_reply_last_email(template, force_email_to, debug_log)
  gateway_mail_reply_wemail(template, email_to, target_model, target_field, debug_log)
  gateway_mail_reply_wrecord(template, record, use_in_reply_to, debug_log)
  mock_datetime_and_now(mock_dt)
  mock_mail_gateway(mail_unlink_sent)
  setUpClass()
}
class "MockEnv" as odoo_src.odoo.addons.base.models.ir_qweb.render.MockEnv {
  context : dict
}
class "MockIAPEnrich" as odoo_src.odoo.addons.iap.tests.common.MockIAPEnrich {
  mockIAPEnrichGateway(default_data, email_data, sim_error, failing_emails)
  setUpClass()
}
class "MockIAPPartnerAutocomplete" as odoo_src.odoo.addons.partner_autocomplete.tests.common.MockIAPPartnerAutocomplete {
  mockPartnerAutocomplete(default_data, sim_error)
}
class "MockIAPReveal" as odoo_src.odoo.addons.crm_iap_mine.tests.common.MockIAPReveal {
  mine
  assertMineCallParams(params)
  assertMinePayload(mine, payload)
  mock_IAP_mine(mine, name_list, default_data, sim_error)
  setUpClass()
}
class "MockImageRender" as odoo_src.odoo.addons.marketing_card.tests.common.MockImageRender {
  mock_image_renderer(collect_params)
}
class "MockIrQWeb" as odoo_src.odoo.addons.base.models.ir_qweb.render.MockIrQWeb {
  pool
}
class "MockLinkTracker" as odoo_src.odoo.addons.link_tracker.tests.common.MockLinkTracker {
  assertLinkParams(url, link_tracker, link_params)
  assertLinkShortenedHtml(body, link_info, link_params)
  assertLinkShortenedText(body, link_info, link_params)
  setUp()
}
class "MockPool" as odoo_src.odoo.addons.base.models.ir_qweb.render.MockPool {
  cache
  cache_name
  db_name : NoneType
}
class "MockSmtplibCase" as odoo_src.odoo.addons.base.tests.common.MockSmtplibCase {
  connect_mocked
  emails : list
  find_mail_server_mocked
  testing_smtp_session
  assertSMTPEmailsSent(smtp_from, smtp_to_list, message_from, msg_from, mail_server, from_filter, emails_count, msg_cc_lst, msg_to_lst)
  mock_smtplib_connection()
}
class "MockedSession" as odoo_src.odoo.addons.l10n_hu_edi.tests.test_flows_mocked.L10nHuEdiTestFlowsMocked.patch_post.MockedSession {
  {abstract}close()
  post(url, data, headers, timeout)
}
class "Model" as odoo_src.odoo.addons.base.models.ir_ui_view.Model {
  get_empty_list_help(help_message)
  get_formview_action(access_uid)
  get_formview_id(access_uid)
  get_view(view_id, view_type)
  get_views(views, options)
  view_header_get(view_id, view_type)
}
class "ModelConverter" as odoo_src.odoo.addons.http_routing.models.ir_http.ModelConverter {
  domain : str
  regex : str
  to_python(value) -> models.BaseModel
}
class "ModelConverter" as odoo_src.odoo.addons.base.models.ir_http.ModelConverter {
  model : bool
  regex : str
  slug
  unslug
  to_python(value: str) -> models.BaseModel
  to_url(value: models.BaseModel) -> str
}
class "ModelInherit" as odoo_src.odoo.addons.base.models.ir_model.ModelInherit {
  model_id
  parent_field_id
  parent_id
}
class "ModelsConverter" as odoo_src.odoo.addons.base.models.ir_http.ModelsConverter {
  model : bool
  regex : str
  to_python(value: str) -> models.BaseModel
  to_url(value: models.BaseModel) -> str
}
class "Module" as odoo_src.odoo.addons.base.models.ir_module.Module {
  application
  author
  auto_install
  category_id
  contributors
  country_ids
  demo
  dependencies_id
  description
  description_html
  exclusion_ids
  has_iap
  icon
  icon_flag
  icon_image
  installed_version
  latest_version
  license
  maintainer
  menus_by_module
  name
  published_version
  reports_by_module
  sequence
  shortdesc
  state
  summary
  to_buy
  url
  views_by_module
  website
  button_immediate_install()
  button_immediate_uninstall()
  button_immediate_upgrade()
  button_install()
  button_install_cancel()
  button_uninstall()
  button_uninstall_cancel()
  button_uninstall_wizard()
  button_upgrade()
  button_upgrade_cancel()
  check_external_dependencies(module_name, newstate)
  create(vals_list)
  downstream_dependencies(known_deps, exclude_states)
  get_module_info(name)
  get_values_from_terp(terp)
  module_uninstall()
  next()
  search_panel_select_range(field_name)
  unlink()
  update_list()
  upstream_dependencies(known_deps, exclude_states)
}
class "ModuleCategory" as odoo_src.odoo.addons.base.models.ir_module.ModuleCategory {
  child_ids
  description
  exclusive
  module_ids
  name
  parent_id
  sequence
  visible
  xml_id
}
class "ModuleCategory" as odoo_src.odoo.addons.base.models.res_users.ModuleCategory {
  unlink()
  write(values)
}
class "ModuleDependency" as odoo_src.odoo.addons.base.models.ir_module.ModuleDependency {
  auto_install_required
  depend_id
  module_id
  name
  state
  all_dependencies(module_names)
}
class "ModuleExclusion" as odoo_src.odoo.addons.base.models.ir_module.ModuleExclusion {
  exclusion_id
  module_id
  name
  state
}
class "MollieCommon" as odoo_src.odoo.addons.payment_mollie.tests.common.MollieCommon {
  setUpClass()
}
class "MollieController" as odoo_src.odoo.addons.payment_mollie.controllers.main.MollieController {
  mollie_return_from_checkout()
  mollie_webhook()
}
class "MollieTest" as odoo_src.odoo.addons.payment_mollie.tests.test_mollie.MollieTest {
  test_payment_request_payload_values()
  test_webhook_notification_confirms_transaction()
}
class "MonetaryConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.MonetaryConverter {
  get_available_options()
  record_to_html(record, field_name, options)
  value_to_html(value, options)
}
class "MrpBatchProduct" as odoo_src.odoo.addons.mrp.wizard.mrp_batch_produce.MrpBatchProduct {
  component_separator
  lot_name
  lot_qty
  lots_quantity_separator
  lots_separator
  production_id
  production_text
  production_text_help
  action_done()
  action_generate_production_text()
  action_prepare()
}
class "MrpBom" as odoo_src.odoo.addons.mrp_subcontracting.models.mrp_bom.MrpBom {
  subcontractor_ids
  type
}
class "MrpBom" as odoo_src.odoo.addons.mrp.models.mrp_bom.MrpBom {
  active
  allow_operation_dependencies
  bom_line_ids
  byproduct_ids
  code
  company_id
  consumption
  days_to_prepare_mo
  operation_ids
  picking_type_id
  possible_product_template_attribute_value_ids
  produce_delay
  product_id
  product_qty
  product_tmpl_id
  product_uom_category_id
  product_uom_id
  ready_to_produce
  sequence
  type
  action_compute_bom_days()
  check_kit_has_not_orderpoint()
  copy(default)
  create(vals_list)
  explode(product, quantity, picking_type, never_attribute_values)
  get_import_templates()
  name_create(name)
  onchange_bom_structure()
  onchange_product_tmpl_id()
  onchange_product_uom_id()
  toggle_active()
  write(vals)
}
class "MrpBomLine" as odoo_src.odoo.addons.mrp.models.mrp_bom.MrpBomLine {
  allowed_operation_ids
  attachments_count
  bom_id
  bom_product_template_attribute_value_ids
  child_bom_id
  child_line_ids
  company_id
  manual_consumption
  operation_id
  parent_product_tmpl_id
  possible_bom_product_template_attribute_value_ids
  product_id
  product_qty
  product_tmpl_id
  product_uom_category_id
  product_uom_id
  sequence
  tracking
  action_add_from_catalog()
  action_see_attachments()
  create(vals_list)
  onchange_product_id()
  onchange_product_uom_id()
}
class "MrpByProduct" as odoo_src.odoo.addons.mrp.models.mrp_bom.MrpByProduct {
  allowed_operation_ids
  bom_id
  bom_product_template_attribute_value_ids
  company_id
  cost_share
  operation_id
  possible_bom_product_template_attribute_value_ids
  product_id
  product_qty
  product_uom_category_id
  product_uom_id
  sequence
  action_add_from_catalog()
}
class "MrpConsumptionWarning" as odoo_src.odoo.addons.mrp_subcontracting.wizard.mrp_consumption_warning.MrpConsumptionWarning {
  action_cancel()
  action_confirm()
}
class "MrpConsumptionWarning" as odoo_src.odoo.addons.mrp.wizard.mrp_consumption_warning.MrpConsumptionWarning {
  consumption
  mrp_consumption_warning_line_ids
  mrp_production_count
  mrp_production_ids
  action_cancel()
  action_confirm()
  action_set_qty()
}
class "MrpConsumptionWarningLine" as odoo_src.odoo.addons.mrp.wizard.mrp_consumption_warning.MrpConsumptionWarningLine {
  consumption
  mrp_consumption_warning_id
  mrp_production_id
  product_consumed_qty_uom
  product_expected_qty_uom
  product_id
  product_uom_id
}
class "MrpProduction" as odoo_src.odoo.addons.mrp_subcontracting.models.mrp_production.MrpProduction {
  bom_product_ids
  incoming_picking
  move_line_raw_ids
  product_qty
  subcontracting_has_been_recorded
  subcontractor_id
  action_merge()
  pre_button_mark_done()
  subcontracting_record_component()
  write(vals)
}
class "MrpProduction" as odoo_src.odoo.addons.mrp.models.mrp_production.MrpProduction {
  all_move_ids
  all_move_raw_ids
  allow_workorder_dependencies
  backorder_sequence
  bom_id
  company_id
  components_availability
  components_availability_state
  consumption
  date_deadline
  date_finished
  date_start
  delay_alert_date
  delivery_count
  duration
  duration_expected
  finished_move_line_ids
  forecasted_issue
  is_delayed
  is_locked
  is_outdated_bom
  is_planned
  json_popover
  location_dest_id
  location_final_id
  location_src_id
  lot_producing_id
  move_byproduct_ids
  move_dest_ids
  move_finished_ids
  move_raw_ids
  mrp_production_backorder_count
  mrp_production_child_count
  mrp_production_source_count
  name
  never_product_template_attribute_value_ids
  orderpoint_id
  origin
  picking_ids
  picking_type_id
  priority
  procurement_group_id
  product_description_variants
  product_id
  product_qty
  product_tmpl_id
  product_tracking
  product_uom_category_id
  product_uom_id
  product_uom_qty
  product_variant_attributes
  production_capacity
  production_location_id
  propagate_cancel
  qty_produced
  qty_producing
  reservation_state
  reserve_visible
  scrap_count
  scrap_ids
  search_date_category
  show_allocation
  show_final_lots
  show_lock
  show_lot_ids
  show_produce
  show_produce_all
  state
  unbuild_count
  unbuild_ids
  unreserve_visible
  use_create_components_lots
  user_id
  valid_product_template_attribute_line_ids
  warehouse_id
  workcenter_id
  workorder_ids
  action_assign()
  action_cancel()
  action_confirm()
  action_generate_bom()
  action_generate_serial()
  action_mass_produce()
  action_merge()
  action_open_label_layout()
  action_open_label_type()
  action_plan_with_components_availability()
  action_product_forecast_report()
  action_see_move_scrap()
  action_split()
  action_start()
  action_toggle_is_locked()
  action_update_bom()
  action_view_mo_delivery()
  action_view_mrp_production_backorders()
  action_view_mrp_production_childs()
  action_view_mrp_production_sources()
  action_view_mrp_production_unbuilds()
  action_view_reception_report()
  button_mark_done()
  button_plan()
  button_scrap()
  button_unbuild()
  button_unplan()
  copy_data(default)
  create(vals_list)
  do_unreserve()
  get_empty_list_help(help_message)
  pre_button_mark_done()
  set_qty_producing()
  unlink()
  write(vals)
}
class "MrpProduction" as odoo_src.odoo.addons.mrp_account.models.mrp_production.MrpProduction {
  extra_cost
  show_valuation
  action_view_stock_valuation_layers()
  write(vals)
}
class "MrpProduction" as odoo_src.odoo.addons.mrp_repair.models.production.MrpProduction {
  repair_count
  action_view_repair_orders()
}
class "MrpProduction" as odoo_src.odoo.addons.mrp_subcontracting_account.models.mrp_production.MrpProduction {
  extra_cost
}
class "MrpProductionBackorder" as odoo_src.odoo.addons.mrp.wizard.mrp_production_backorder.MrpProductionBackorder {
  mrp_production_backorder_line_ids
  mrp_production_ids
  show_backorder_lines
  action_backorder()
  action_close_mo()
}
class "MrpProductionBackorderLine" as odoo_src.odoo.addons.mrp.wizard.mrp_production_backorder.MrpProductionBackorderLine {
  mrp_production_backorder_id
  mrp_production_id
  to_backorder
}
class "MrpProductionSplit" as odoo_src.odoo.addons.mrp.wizard.mrp_production_split.MrpProductionSplit {
  counter
  product_id
  product_qty
  product_uom_id
  production_capacity
  production_detailed_vals_ids
  production_id
  production_split_multi_id
  valid_details
  action_prepare_split()
  action_return_to_list()
  action_split()
}
class "MrpProductionSplitLine" as odoo_src.odoo.addons.mrp.wizard.mrp_production_split.MrpProductionSplitLine {
  date
  mrp_production_split_id
  quantity
  user_id
}
class "MrpProductionSplitMulti" as odoo_src.odoo.addons.mrp.wizard.mrp_production_split.MrpProductionSplitMulti {
  production_ids
}
class "MrpRoutingWorkcenter" as odoo_src.odoo.addons.mrp.models.mrp_routing.MrpRoutingWorkcenter {
  active
  allow_operation_dependencies
  blocked_by_operation_ids
  bom_id
  bom_product_template_attribute_value_ids
  company_id
  name
  needed_by_operation_ids
  note
  possible_bom_product_template_attribute_value_ids
  sequence
  time_computed_on
  time_cycle
  time_cycle_manual
  time_mode
  time_mode_batch
  workcenter_id
  workorder_count
  workorder_ids
  worksheet
  worksheet_google_slide
  worksheet_type
  action_archive()
  action_unarchive()
  copy_existing_operations()
  copy_to_bom()
  create(vals_list)
  write(vals)
}
class "MrpRoutingWorkcenter" as odoo_src.odoo.addons.mrp_account.models.mrp_routing.MrpRoutingWorkcenter {
}
class "MrpStockReport" as odoo_src.odoo.addons.mrp.models.stock_traceability.MrpStockReport {
}
class "MrpSubcontractingPurchaseTest" as odoo_src.odoo.addons.mrp_subcontracting_purchase.tests.test_mrp_subcontracting_purchase.MrpSubcontractingPurchaseTest {
  bom_finished2
  comp3
  finished2
  vendor
  setUp()
  test_bom_overview_availability()
  test_bom_overview_availability_po_lead()
  test_count_smart_buttons()
  test_decrease_qty()
  test_global_visibility_days_affect_lead_time()
  test_location_after_dest_location_update_backorder_production()
  test_mrp_report_bom_structure_subcontracting_quantities()
  test_mrp_subcontract_modify_date()
  test_orderpoint_warehouse_not_required()
  test_purchase_and_return01()
  test_purchase_and_return02()
  test_purchase_and_return03()
  test_resupply_order_buy_mto()
  test_return_and_decrease_pol_qty()
  test_return_subcontracted_product_to_supplier_location()
  test_subcontract_product_price_change()
  test_subcontracting_lead_days()
  test_subcontracting_lead_days_on_overview()
  test_subcontracting_resupply_price_diff()
  test_update_qty_purchased_with_subcontracted_product()
}
class "MrpUnbuild" as odoo_src.odoo.addons.mrp.models.mrp_unbuild.MrpUnbuild {
  bom_id
  company_id
  consume_line_ids
  has_tracking
  location_dest_id
  location_id
  lot_id
  mo_bom_id
  mo_id
  name
  produce_line_ids
  product_id
  product_qty
  product_uom_id
  state
  action_unbuild()
  action_validate()
  create(vals_list)
}
class "MrpWipAccounting" as odoo_src.odoo.addons.mrp_account.wizard.mrp_wip_accounting.MrpWipAccounting {
  date
  journal_id
  line_ids
  mo_ids
  reference
  reversal_date
  confirm()
  default_get(fields_list)
}
class "MrpWipAccountingLine" as odoo_src.odoo.addons.mrp_account.wizard.mrp_wip_accounting.MrpWipAccountingLine {
  account_id
  credit
  currency_id
  debit
  label
  wip_accounting_id
}
class "MrpWorkCenterCapacity" as odoo_src.odoo.addons.mrp.models.mrp_workcenter.MrpWorkCenterCapacity {
  capacity
  product_id
  product_uom_id
  time_start
  time_stop
  workcenter_id
}
class "MrpWorkcenter" as odoo_src.odoo.addons.mrp.models.mrp_workcenter.MrpWorkcenter {
  active
  alternative_workcenter_ids
  blocked_time
  capacity_ids
  code
  color
  costs_hour
  currency_id
  default_capacity
  has_routing_lines
  kanban_dashboard_graph
  name
  note
  oee
  oee_target
  order_ids
  performance
  productive_time
  resource_calendar_id
  routing_line_ids
  sequence
  tag_ids
  time_efficiency
  time_ids
  time_start
  time_stop
  workcenter_load
  working_state
  workorder_count
  workorder_late_count
  workorder_pending_count
  workorder_progress_count
  workorder_ready_count
  action_archive()
  action_show_operations()
  action_work_order()
  action_work_order_alternatives()
  create(vals_list)
  unblock()
  write(vals)
}
class "MrpWorkcenter" as odoo_src.odoo.addons.mrp_account.models.mrp_workcenter.MrpWorkcenter {
  costs_hour_account_ids
  expense_account_id
}
class "MrpWorkcenterProductivity" as odoo_src.odoo.addons.mrp.models.mrp_workcenter.MrpWorkcenterProductivity {
  company_id
  date_end
  date_start
  description
  duration
  loss_id
  loss_type
  production_id
  user_id
  workcenter_id
  workorder_id
  button_block()
}
class "MrpWorkcenterProductivity" as odoo_src.odoo.addons.mrp_account.models.mrp_workcenter.MrpWorkcenterProductivity {
  account_move_line_id
}
class "MrpWorkcenterProductivityLoss" as odoo_src.odoo.addons.mrp.models.mrp_workcenter.MrpWorkcenterProductivityLoss {
  loss_id
  loss_type
  manual
  name
  sequence
}
class "MrpWorkcenterProductivityLossType" as odoo_src.odoo.addons.mrp.models.mrp_workcenter.MrpWorkcenterProductivityLossType {
  loss_type
}
class "MrpWorkorder" as odoo_src.odoo.addons.mrp_product_expiry.models.mrp_production.MrpWorkorder {
  pre_button_mark_done()
}
class "MrpWorkorder" as odoo_src.odoo.addons.mrp.models.mrp_workorder.MrpWorkorder {
  allow_workorder_dependencies
  barcode
  blocked_by_workorder_ids
  company_id
  consumption
  costs_hour
  date_finished
  date_start
  duration
  duration_expected
  duration_percent
  duration_unit
  finished_lot_id
  has_worksheet
  is_planned
  is_produced
  is_user_working
  json_popover
  last_working_user_id
  leave_id
  move_finished_ids
  move_line_ids
  move_raw_ids
  name
  needed_by_workorder_ids
  operation_id
  operation_note
  product_id
  product_tracking
  product_uom_id
  production_availability
  production_bom_id
  production_date
  production_id
  production_state
  progress
  qty_produced
  qty_producing
  qty_production
  qty_remaining
  qty_reported_from_previous_wo
  scrap_count
  scrap_ids
  sequence
  show_json_popover
  state
  time_ids
  workcenter_id
  working_state
  working_user_ids
  worksheet
  worksheet_google_slide
  worksheet_type
  action_cancel()
  action_mark_as_done()
  action_open_wizard()
  action_replan()
  action_see_move_scrap()
  button_done()
  button_finish()
  button_pending()
  button_scrap()
  button_start(raise_on_invalid_state)
  button_unblock()
  create(values)
  end_all()
  end_previous(doall)
  get_duration()
  get_working_duration()
  unlink()
  write(values)
}
class "MrpWorkorder" as odoo_src.odoo.addons.mrp_account.models.mrp_workorder.MrpWorkorder {
  mo_analytic_account_line_ids
  wc_analytic_account_line_ids
  action_cancel()
  unlink()
}
class "MyFilterMessages" as odoo_src.odoo.addons.base.models.ir_module.MyFilterMessages {
  default_priority : int
  apply()
}
class "MyInvoisConsolidateInvoiceWizard" as odoo_src.odoo.addons.l10n_my_edi_pos.wizard.myinvois_consolidate_invoice_wizard.MyInvoisConsolidateInvoiceWizard {
  date_from
  date_to
  button_consolidate_orders()
}
class "MyInvoisDocument" as odoo_src.odoo.addons.l10n_my_edi_pos.models.myinvois_document.MyInvoisDocument {
  active
  company_currency_id
  company_id
  currency_id
  invoice_ids
  myinvois_custom_form_reference
  myinvois_document_long_id
  myinvois_error_document_hash
  myinvois_exemption_reason
  myinvois_external_uuid
  myinvois_file
  myinvois_file_id
  myinvois_issuance_date
  myinvois_retry_at
  myinvois_state
  myinvois_submission_uid
  myinvois_validation_time
  name
  action_cancel_submission()
  action_generate_xml_file()
  action_submit_to_myinvois()
  action_update_submission_status()
}
class "MyInvoisDocumentPoS" as odoo_src.odoo.addons.l10n_my_edi_pos.models.myinvois_document_pos.MyInvoisDocumentPoS {
  linked_order_count
  pos_config_id
  pos_order_date_range
  pos_order_ids
  action_open_consolidate_invoice_wizard()
  action_view_linked_orders()
}
class "MyInvoisStatusUpdateWizard" as odoo_src.odoo.addons.l10n_my_edi_pos.wizard.myinvois_status_update_wizard.MyInvoisStatusUpdateWizard {
  document_id
  new_status
  reason
  button_request_update()
}
class "MyWriter" as odoo_src.odoo.addons.base.models.ir_module.MyWriter {
  get_transforms()
}
class "NameManager" as odoo_src.odoo.addons.base.models.ir_ui_view.NameManager {
  available_actions : set
  available_fields : defaultdict
  available_names : set
  children : list
  env
  field_groups : dict
  group_definitions
  model
  model_groups : NoneType
  must_exist_actions : dict
  must_exist_groups : dict
  parent : NoneType
  used_fields : defaultdict
  used_names : dict
  check(view)
  field_info()
  get_missing_fields()
  has_action(name)
  has_field(node, name, node_info, info)
  must_exist_action(action_id, node)
  must_exist_group(name, node)
  must_have_fields(node, names, node_info, use)
  must_have_name(name, use)
  update_available_fields()
}
class "Network" as odoo_src.odoo.addons.hw_escpos.escpos.printer.Network {
  device : socket
  host
  port : int
  open()
}
class "NewLeadNotification" as odoo_src.odoo.addons.crm.tests.test_crm_lead_notification.NewLeadNotification {
  setUpClass()
  test_lead_message_get_suggested_recipients_email()
  test_lead_message_get_suggested_recipients_langs()
  test_lead_message_get_suggested_recipients_values_for_create()
  test_new_lead_from_email_multicompany()
  test_new_lead_notification()
}
class "<color:red>NoDeviceError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.NoDeviceError {
  msg : str
  resultcode : int
}
class "<color:red>NoStatusError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.NoStatusError {
  msg : str
  resultcode : int
}
class "NotifyTests" as odoo_src.odoo.addons.bus.tests.test_notify.NotifyTests {
  test_get_notify_payloads()
  test_postcommit()
}
class "Num2Word_AR_Fixed" as odoo_src.odoo._monkeypatches.num2words.Num2Word_AR_Fixed {
  MAXVAL : int
  arabicAppendedGroup : list
  arabicAppendedTwos : list
  arabicFeminineOnes : list
  arabicGroup : list
  arabicHundreds : list
  arabicOnes : list
  arabicOrdinal : list
  arabicPluralGroups : list
  arabicPrefixText : str
  arabicSuffixText : str
  arabicTens : list
  arabicTwos : list
  currency_subunit : tuple
  currency_unit : tuple
  errmsg_toobig : str
  integer_value : int
  isCurrencyNameFeminine : bool
  isCurrencyPartNameFeminine : bool
  number : int, str
  partPrecision : int
  separator : str
  absolute(number)
  convert(value)
  convert_to_arabic()
  decimal_value(decimal_part)
  digit_feminine_status(digit, group_level)
  extract_integer_and_decimal_parts()
  number_to_arabic(arabic_prefix_text, arabic_suffix_text)
  process_arabic_group(group_number, group_level, remaining_number)
  set_currency_prefer(currency)
  to_cardinal(number)
  to_currency(value, currency, prefix, suffix)
  to_ordinal(number, prefix)
  to_ordinal_num(value)
  to_str(number)
  to_year(value)
  validate_number(number)
}
class "Num2Word_Base" as odoo_src.odoo._monkeypatches.num2words.Num2Word_Base {
  CURRENCY_ADJECTIVES : dict
  CURRENCY_FORMS : dict
  MAXVAL
  cards : OrderedDict
  errmsg_floatord : str
  errmsg_negord : str
  errmsg_nonnum : str
  errmsg_toobig : str
  exclude_title : list
  is_title : bool
  negword : str
  pointword : str
  precision : int
  clean(val)
  float2tuple(value)
  inflect(value, text)
  {abstract}merge(left, right)
  parse_minus(num_str)
  {abstract}pluralize(n, forms)
  {abstract}set_high_numwords()
  set_low_numwords(numwords)
  set_mid_numwords(mid)
  set_numwords()
  {abstract}setup()
  splitnum(value)
  str_to_number(value)
  title(value)
  to_cardinal(value)
  to_cardinal_float(value)
  to_currency(val, currency, cents, separator, adjective)
  to_ordinal(value)
  to_ordinal_num(value)
  to_splitnum(val, hightxt, lowtxt, jointxt, divisor, longval, cents)
  to_year(value)
  verify_ordinal(value)
}
class "NumberToWords_BG" as odoo_src.odoo._monkeypatches.num2words.NumberToWords_BG {
  lang : str
  lang_native : str
  locale : str
  to_cardinal(value)
  {abstract}to_currency(_)
  {abstract}to_ordinal(_)
  {abstract}to_ordinal_num(_)
  {abstract}to_year(_)
}
class "NuveiCommon" as odoo_src.odoo.addons.payment_nuvei.tests.common.NuveiCommon {
  setUpClass()
}
class "NuveiController" as odoo_src.odoo.addons.payment_nuvei.controllers.main.NuveiController {
  nuvei_return_from_checkout(tx_ref, error_access_token)
  nuvei_webhook()
}
class "OAuthController" as odoo_src.odoo.addons.auth_oauth.controllers.main.OAuthController {
  oea()
  signin()
}
class "OAuthLogin" as odoo_src.odoo.addons.auth_oauth.controllers.main.OAuthLogin {
  get_auth_signup_qcontext()
  get_state(provider)
  list_providers()
  web_login()
}
class "ODSReader" as odoo_src.odoo.addons.base_import.models.odf_ods_reader.ODSReader {
  SHEETS : dict
  clonespannedcolumns : NoneType
  doc : NoneType
  getFirstSheet()
  getSheet(name)
  readSheet(sheet)
}
class "Obj" as odoo_src.odoo.addons.base.tests.test_func.TestLazy.test_lazy_compare.Obj {
  num
}
class "ObjectIdentifierNode" as odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.ObjectIdentifierNode {
  content(content)
}
class "OctetStringNode" as odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.OctetStringNode {
}
class "OdooEdiProxyAuth" as odoo_src.odoo.addons.account_edi_proxy_client.models.account_edi_proxy_auth.OdooEdiProxyAuth {
  id_client
  refresh_token
}
class "OdooMarshaller" as odoo_src.odoo.addons.base.controllers.rpc.OdooMarshaller {
  dispatch : dict
  dump_bytes(value, write)
  dump_date(value, write)
  dump_datetime(value, write)
  dump_frozen_dict(value, write)
  dump_lazy(value, write)
  dump_unicode(value, write)
}
class "Onboarding" as odoo_src.odoo.addons.account.models.onboarding_onboarding.Onboarding {
  action_close_panel_account_dashboard()
  action_close_panel_account_invoice()
}
class "Onboarding" as odoo_src.odoo.addons.onboarding.models.onboarding_onboarding.Onboarding {
  current_onboarding_state
  current_progress_id
  is_onboarding_closed
  is_per_company
  name
  panel_close_action_name
  progress_ids
  route_name
  sequence
  step_ids
  text_completed
  action_close()
  action_close_panel(xmlid)
  action_refresh_progress_ids()
  action_toggle_visibility()
  write(vals)
}
class "OnboardingController" as odoo_src.odoo.addons.payment_stripe.controllers.onboarding.OnboardingController {
  stripe_refresh_onboarding(provider_id, account_id, menu_id)
  stripe_return_from_onboarding(provider_id, menu_id)
}
class "OnboardingProgress" as odoo_src.odoo.addons.onboarding.models.onboarding_progress.OnboardingProgress {
  company_id
  is_onboarding_closed
  onboarding_id
  onboarding_state
  progress_step_ids
  action_close()
  action_toggle_visibility()
  init()
}
class "OnboardingProgressStep" as odoo_src.odoo.addons.onboarding.models.onboarding_progress_step.OnboardingProgressStep {
  company_id
  progress_ids
  step_id
  step_state
  action_consolidate_just_done()
  action_set_just_done()
  init()
}
class "OnboardingStep" as odoo_src.odoo.addons.payment.models.onboarding_step.OnboardingStep {
  action_validate_step_payment_provider()
}
class "OnboardingStep" as odoo_src.odoo.addons.account.models.onboarding_onboarding_step.OnboardingStep {
  action_open_step_bank_account()
  action_open_step_base_document_layout()
  action_open_step_chart_of_accounts()
  action_open_step_company_data()
  action_open_step_create_invoice()
  action_open_step_fiscal_year()
  action_open_step_sales_tax()
  action_validate_step_base_document_layout()
}
class "OnboardingStep" as odoo_src.odoo.addons.account_payment.models.onboarding_onboarding_step.OnboardingStep {
  action_open_step_payment_provider()
  action_validate_step_payment_provider()
}
class "OnboardingStep" as odoo_src.odoo.addons.onboarding.models.onboarding_onboarding_step.OnboardingStep {
  button_text
  current_progress_step_id
  current_step_state
  description
  done_icon
  done_text
  is_per_company
  onboarding_ids
  panel_step_open_action_name
  progress_ids
  sequence
  step_image
  step_image_alt
  step_image_filename
  title
  action_set_just_done()
  action_validate_step(xml_id)
  check_step_on_onboarding_has_action()
  write(vals)
}
class "Opcode" as odoo_src.odoo.addons.bus.websocket.Opcode {
  name
}
class "Orderpoint" as odoo_src.odoo.addons.mrp.models.stock_warehouse.Orderpoint {
  check_product_is_not_kit()
}
class "POP3Connection" as odoo_src.odoo.addons.mail.models.fetchmail.POP3Connection {
}
class "POSOrder" as odoo_src.odoo.addons.l10n_sa_pos.models.pos_order.POSOrder {
}
class "Partner" as odoo_src.odoo.addons.calendar.models.res_partner.Partner {
  calendar_last_notif_ack
  meeting_count
  meeting_ids
  get_attendee_detail(meeting_ids)
  schedule_meeting()
}
class "Partner" as odoo_src.odoo.addons.base_address_extended.models.res_partner.Partner {
  city : bool
  city_id
  country_enforce_cities
  state_id : bool
  street_name
  street_number
  street_number2
  zip : bool
}
class "Partner" as odoo_src.odoo.addons.mail.models.res_partner.Partner {
  contact_address_inline
  email
  name
  parent_id
  phone
  starred_message_ids
  user_id
  vat
  find_or_create(email, assert_valid_email)
  get_mention_suggestions(search, limit)
  im_search(name, limit, excluded_ids)
}
class "Partner" as odoo_src.odoo.addons.contacts.models.res_partner.Partner {
}
class "Partner" as odoo_src.odoo.addons.crm.models.res_partner.Partner {
  opportunity_count
  opportunity_ids
  action_view_opportunity()
  default_get(fields)
}
class "Partner" as odoo_src.odoo.addons.mass_mailing.models.res_partner.Partner {
}
class "Partner" as odoo_src.odoo.addons.phone_validation.models.res_partner.Partner {
  mobile
  phone
}
class "Partner" as odoo_src.odoo.addons.hr.models.res_partner.Partner {
  employee_ids
  employees_count
  action_open_employees()
}
class "Partner" as odoo_src.odoo.addons.hr_calendar.models.res_partner.Partner {
  get_working_hours_for_all_attendees(attendee_ids, date_from, date_to, everybody)
}
class "Partner" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.res_partner.Partner {
  l10n_id_buyer_document_number
  l10n_id_buyer_document_type
  l10n_id_kode_transaksi
  l10n_id_tku
}
class "Partner" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.res_partner.Partner {
  invoice_edi_format
  l10n_es_edi_facturae_ac_center_code
  l10n_es_edi_facturae_ac_logical_operational_point
  l10n_es_edi_facturae_ac_physical_gln
  l10n_es_edi_facturae_ac_role_type_ids
  l10n_es_edi_facturae_residence_type
  type
}
class "Partner" as odoo_src.odoo.addons.base.models.res_partner.Partner {
  active
  active_lang_count
  bank_ids
  barcode
  category_id
  child_ids
  city
  color
  comment
  commercial_company_name
  commercial_partner_id
  company_id
  company_name
  company_registry
  company_registry_label
  company_type
  complete_name
  contact_address
  country_code
  country_id
  email
  email_formatted
  employee
  function
  image_1920 : bool
  industry_id
  is_company
  is_public
  lang
  mobile
  name
  parent_id
  parent_name
  partner_latitude
  partner_longitude
  partner_share
  phone
  ref
  same_company_registry_partner_id
  same_vat_partner_id
  self
  state_id
  street
  street2
  title
  type
  tz
  tz_offset
  user_id
  user_ids
  vat
  vat_label
  website
  zip
  address_get(adr_pref)
  copy_data(default)
  create(vals_list)
  create_company()
  default_get(default_fields)
  find_or_create(email, assert_valid_email)
  get_import_templates()
  name_create(name)
  onchange_company_type()
  onchange_email()
  onchange_parent_id()
  open_commercial_entity()
  update_address(vals)
  view_header_get(view_id, view_type)
  write(vals)
}
class "Partner" as odoo_src.odoo.addons.membership.models.partner.Partner {
  associate_member
  free_member
  member_lines
  membership_amount
  membership_cancel
  membership_start
  membership_state
  membership_stop
  create_membership_invoice(product, amount)
}
class "PartnerCategory" as odoo_src.odoo.addons.base.models.res_partner.PartnerCategory {
  active
  child_ids
  color
  name
  parent_id
  parent_path
  partner_ids
}
class "PartnerIdTypeEc" as odoo_src.odoo.addons.l10n_ec.models.res_partner.PartnerIdTypeEc {
  name
  get_ats_code_for_partner(partner, move_type)
}
class "PartnerResend" as odoo_src.odoo.addons.mail.wizard.mail_resend_message.PartnerResend {
  email
  failure_reason
  message
  name
  notification_id
  partner_id
  partner_readonly
  resend
  resend_wizard_id
  action_open_record()
  action_open_resend_partner()
  action_resend()
}
class "PartnerTitle" as odoo_src.odoo.addons.base.models.res_partner.PartnerTitle {
  name
  shortcut
}
class "Partners" as odoo_src.odoo.addons.im_livechat.models.res_partner.Partners {
  user_livechat_username
}
class "PassKey" as odoo_src.odoo.addons.auth_passkey.models.auth_passkey_key.PassKey {
  credential_identifier
  name
  public_key
  sign_count
  action_delete_passkey()
  action_rename_passkey()
  init()
  unlink()
}
class "PassKeyCreate" as odoo_src.odoo.addons.auth_passkey.models.auth_passkey_key.PassKeyCreate {
  name
  make_key(registration)
}
class "PasskeyTest" as odoo_src.odoo.addons.auth_passkey.tests.test_passkey_demo.PasskeyTest {
  patch_start_auth(challenge)
  patch_start_registration(challenge)
  rpc(model, method)
  setUpClass()
  test_authentication()
  test_check_identity()
  test_check_user_verification()
  test_registration()
}
class "PasskeyTestTours" as odoo_src.odoo.addons.auth_passkey.tests.test_passkey_demo.PasskeyTestTours {
  test_passkey_backend()
  test_passkey_login()
}
class "<color:red>PayloadTooLargeException</color>" as odoo_src.odoo.addons.bus.websocket.PayloadTooLargeException {
}
class "PaymentCaptureWizard" as odoo_src.odoo.addons.payment.wizards.payment_capture_wizard.PaymentCaptureWizard {
  amount_to_capture
  authorized_amount
  available_amount
  captured_amount
  currency_id
  has_draft_children
  has_remaining_amount
  is_amount_to_capture_valid
  support_partial_capture
  transaction_ids
  void_remaining_amount
  voided_amount
  action_capture()
}
class "PaymentCaptureWizard" as odoo_src.odoo.addons.payment_adyen.wizards.payment_capture_wizard.PaymentCaptureWizard {
  has_adyen_tx
}
class "PaymentCommon" as odoo_src.odoo.addons.payment.tests.common.PaymentCommon {
  post_process_patcher : _patch
  setUp()
  setUpClass()
}
class "PaymentCustomCommon" as odoo_src.odoo.addons.payment_custom.tests.common.PaymentCustomCommon {
}
class "PaymentDemoCommon" as odoo_src.odoo.addons.payment_demo.tests.common.PaymentDemoCommon {
  setUpClass()
}
class "PaymentDemoController" as odoo_src.odoo.addons.payment_demo.controllers.main.PaymentDemoController {
  demo_simulate_payment()
}
class "PaymentHttpCommon" as odoo_src.odoo.addons.payment.tests.http_common.PaymentHttpCommon {
}
class "PaymentLinkWizard" as odoo_src.odoo.addons.payment.wizards.payment_link_wizard.PaymentLinkWizard {
  amount
  amount_max
  company_id
  currency_id
  link
  partner_email
  partner_id
  res_id
  res_model
  warning_message
  default_get(fields_list)
}
class "PaymentLinkWizard" as odoo_src.odoo.addons.account_payment.wizards.payment_link_wizard.PaymentLinkWizard {
  discount_date
  display_open_installments
  epd_info
  has_eligible_epd
  invoice_amount_due
  open_installments
  open_installments_preview
}
class "PaymentMethod" as odoo_src.odoo.addons.payment.models.payment_method.PaymentMethod {
  active
  brand_ids
  code
  image
  image_payment_form
  is_primary
  name
  primary_payment_method_id
  provider_ids
  sequence
  support_express_checkout
  support_refund
  support_tokenization
  supported_country_ids
  supported_currency_ids
  write(values)
}
class "PaymentMethod" as odoo_src.odoo.addons.l10n_ec_website_sale.models.payment_method.PaymentMethod {
  fiscal_country_codes
  l10n_ec_sri_payment_id
}
class "PaymentPortal" as odoo_src.odoo.addons.payment.controllers.portal.PaymentPortal {
  archive_token(token_id)
  payment_confirm(tx_id, access_token)
  payment_method()
  payment_pay(reference, amount, currency_id, partner_id, company_id, access_token)
  payment_transaction(amount, currency_id, partner_id, access_token)
}
class "PaymentPortal" as odoo_src.odoo.addons.account_payment.controllers.payment.PaymentPortal {
  invoice_transaction(invoice_id, access_token)
  overdue_invoices_transaction(payment_reference)
  payment_pay()
}
class "PaymentPostProcessing" as odoo_src.odoo.addons.payment.controllers.post_processing.PaymentPostProcessing {
  MONITORED_TX_ID_KEY : str
  display_status()
  monitor_transaction(transaction)
  poll_status()
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_authorize.models.payment_provider.PaymentProvider {
  authorize_client_key
  authorize_login
  authorize_signature_key
  authorize_transaction_key
  available_currency_ids : list
  code
  action_update_merchant_details()
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_xendit.models.payment_provider.PaymentProvider {
  code
  xendit_public_key
  xendit_secret_key
  xendit_webhook_token
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_mollie.models.payment_provider.PaymentProvider {
  code
  mollie_api_key
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_paypal.models.payment_provider.PaymentProvider {
  code
  paypal_access_token
  paypal_access_token_expiry
  paypal_client_id
  paypal_client_secret
  paypal_email_account
  paypal_webhook_id
  action_paypal_create_webhook()
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_custom.models.payment_provider.PaymentProvider {
  code
  custom_mode
  qr_code
  action_recompute_pending_msg()
  create(values_list)
}
class "PaymentProvider" as odoo_src.odoo.addons.payment.models.payment_provider.PaymentProvider {
  allow_express_checkout
  allow_tokenization
  auth_msg
  available_country_ids
  available_currency_ids
  cancel_msg
  capture_manually
  code
  color
  company_id
  done_msg
  express_checkout_form_view_id
  image_128
  inline_form_view_id
  is_published
  main_currency_id
  maximum_amount
  module_id
  module_state
  module_to_buy
  name
  payment_method_ids
  pending_msg
  pre_msg
  redirect_form_view_id
  sequence
  state
  support_express_checkout
  support_manual_capture
  support_refund
  support_tokenization
  token_inline_form_view_id
  action_toggle_is_published()
  action_view_payment_methods()
  button_immediate_install()
  create(values_list)
  write(values)
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_demo.models.payment_provider.PaymentProvider {
  code
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_aps.models.payment_provider.PaymentProvider {
  aps_access_code
  aps_merchant_identifier
  aps_sha_request
  aps_sha_response
  code
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_worldline.models.payment_provider.PaymentProvider {
  code
  worldline_api_key
  worldline_api_secret
  worldline_pspid
  worldline_webhook_key
  worldline_webhook_secret
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_stripe.models.payment_provider.PaymentProvider {
  code
  stripe_publishable_key
  stripe_secret_key
  stripe_webhook_secret
  action_stripe_connect_account(menu_id)
  action_stripe_create_webhook()
  action_stripe_verify_apple_pay_domain()
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_mercado_pago.models.payment_provider.PaymentProvider {
  code
  mercado_pago_access_token
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_razorpay_oauth.models.payment_provider.PaymentProvider {
  razorpay_access_token
  razorpay_access_token_expiry
  razorpay_account_id
  razorpay_key_id
  razorpay_key_secret
  razorpay_public_token
  razorpay_refresh_token
  razorpay_webhook_secret
  action_razorpay_create_webhook()
  action_razorpay_redirect_to_oauth_url()
  action_razorpay_reset_oauth_account()
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_buckaroo.models.payment_provider.PaymentProvider {
  buckaroo_secret_key
  buckaroo_website_key
  code
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_nuvei.models.payment_provider.PaymentProvider {
  code
  nuvei_merchant_identifier
  nuvei_secret_key
  nuvei_site_identifier
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_razorpay.models.payment_provider.PaymentProvider {
  code
  razorpay_key_id
  razorpay_key_secret
  razorpay_webhook_secret
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_flutterwave.models.payment_provider.PaymentProvider {
  code
  flutterwave_public_key
  flutterwave_secret_key
  flutterwave_webhook_secret
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_asiapay.models.payment_provider.PaymentProvider {
  asiapay_brand
  asiapay_merchant_id
  asiapay_secure_hash_function
  asiapay_secure_hash_secret
  code
}
class "PaymentProvider" as odoo_src.odoo.addons.account_payment.models.payment_provider.PaymentProvider {
  journal_id
}
class "PaymentProvider" as odoo_src.odoo.addons.payment_adyen.models.payment_provider.PaymentProvider {
  adyen_api_key
  adyen_api_url_prefix
  adyen_client_key
  adyen_hmac_key
  adyen_merchant_account
  code
  create(values_list)
  write(values)
}
class "PaymentReferenceTest" as odoo_src.odoo.addons.l10n_fi.tests.test_references.PaymentReferenceTest {
  setUpClass()
  test_payment_reference_fi()
  test_payment_reference_rf()
}
class "PaymentRefundWizard" as odoo_src.odoo.addons.account_payment.wizards.payment_refund_wizard.PaymentRefundWizard {
  amount_available_for_refund
  amount_to_refund
  currency_id
  has_pending_refund
  payment_amount
  payment_id
  refunded_amount
  support_refund
  transaction_id
  action_refund()
}
class "PaymentToken" as odoo_src.odoo.addons.payment_authorize.models.payment_token.PaymentToken {
  authorize_profile
}
class "PaymentToken" as odoo_src.odoo.addons.payment.models.payment_token.PaymentToken {
  active
  company_id
  partner_id
  payment_details
  payment_method_code
  payment_method_id
  provider_code
  provider_id
  provider_ref
  transaction_ids
  create(values_list)
  get_linked_records_info()
  write(values)
}
class "PaymentToken" as odoo_src.odoo.addons.payment_demo.models.payment_token.PaymentToken {
  demo_simulated_state
}
class "PaymentToken" as odoo_src.odoo.addons.payment_stripe.models.payment_token.PaymentToken {
  stripe_mandate
  stripe_payment_method
}
class "PaymentToken" as odoo_src.odoo.addons.payment_razorpay.models.payment_token.PaymentToken {
}
class "PaymentToken" as odoo_src.odoo.addons.payment_flutterwave.models.payment_token.PaymentToken {
  flutterwave_customer_email
}
class "PaymentToken" as odoo_src.odoo.addons.payment_adyen.models.payment_token.PaymentToken {
  adyen_shopper_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_authorize.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_xendit.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_mollie.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_paypal.models.payment_transaction.PaymentTransaction {
  payment_method_id
  paypal_type
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_custom.models.payment_transaction.PaymentTransaction {
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment.models.payment_transaction.PaymentTransaction {
  amount
  child_transaction_ids
  company_id
  currency_id
  is_post_processed
  landing_route
  last_state_change
  operation
  partner_address
  partner_city
  partner_country_id
  partner_email
  partner_id
  partner_lang
  partner_name
  partner_phone
  partner_state_id
  partner_zip
  payment_method_code
  payment_method_id
  provider_code
  provider_id
  provider_reference
  reference
  refunds_count
  source_transaction_id
  state
  state_message
  token_id
  tokenize
  action_capture()
  action_refund(amount_to_refund)
  action_view_refunds()
  action_void()
  create(values_list)
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_demo.models.payment_transaction.PaymentTransaction {
  capture_manually
  provider_reference
  action_demo_set_canceled()
  action_demo_set_done()
  action_demo_set_error()
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_aps.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_worldline.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_stripe.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_mercado_pago.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_buckaroo.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_nuvei.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_razorpay.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_flutterwave.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_asiapay.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentTransaction" as odoo_src.odoo.addons.account_payment.models.payment_transaction.PaymentTransaction {
  invoice_ids
  invoices_count
  payment_id
  action_view_invoices()
}
class "PaymentTransaction" as odoo_src.odoo.addons.payment_adyen.models.payment_transaction.PaymentTransaction {
  payment_method_id
  provider_reference
}
class "PaymentWizard" as odoo_src.odoo.addons.payment.wizards.payment_onboarding_wizard.PaymentWizard {
  acc_number
  journal_name
  manual_name
  manual_post_msg
  payment_method
  paypal_email_account
  add_payment_methods()
}
class "PaypalCommon" as odoo_src.odoo.addons.payment_paypal.tests.common.PaypalCommon {
  setUpClass()
}
class "PaypalController" as odoo_src.odoo.addons.payment_paypal.controllers.main.PaypalController {
  paypal_complete_order(provider_id, order_id, reference)
  paypal_webhook()
}
class "PaypalTest" as odoo_src.odoo.addons.payment_paypal.tests.test_paypal.PaypalTest {
  reference : str
  test_complete_order_confirms_transaction()
  test_feedback_processing()
  test_order_payload_values_for_public_user()
  test_processing_values()
  test_provide_shipping_address()
  test_webhook_notification_confirms_transaction()
  test_webhook_notification_triggers_origin_check()
}
class "PeopleRole" as odoo_src.odoo.addons.crm_iap_mine.models.crm_iap_lead_role.PeopleRole {
  color
  name
  reveal_id
}
class "PeopleSeniority" as odoo_src.odoo.addons.crm_iap_mine.models.crm_iap_lead_seniority.PeopleSeniority {
  name
  reveal_id
}
class "PeppolRegistration" as odoo_src.odoo.addons.account_peppol.wizard.peppol_registration.PeppolRegistration {
  account_peppol_migration_key
  account_peppol_proxy_state
  company_id
  contact_email
  edi_mode
  edi_mode_constraint
  edi_user_id
  peppol_eas
  peppol_endpoint
  peppol_warnings
  phone_number
  smp_registration
  verification_code
  {abstract}button_check_peppol_verification_code()
  button_deregister_peppol_participant()
  button_peppol_sender_registration()
  button_peppol_smp_registration()
  button_register_peppol_participant()
  {abstract}button_send_peppol_verification_code()
  button_update_peppol_user_data()
}
class "PeppolService" as odoo_src.odoo.addons.account_peppol.wizard.service_wizard.PeppolService {
  document_identifier
  document_name
  enabled
  wizard_id
}
class "PeppolServiceConfig" as odoo_src.odoo.addons.account_peppol.wizard.service_wizard.PeppolServiceConfig {
  edi_user_id
  service_ids
  service_info
  service_json
  confirm()
  create(vals_list)
}
class "PhoneBlackList" as odoo_src.odoo.addons.phone_validation.models.phone_blacklist.PhoneBlackList {
  active
  number
  action_add()
  add(number, message)
  create(values)
  phone_action_blacklist_remove()
  remove(number, message)
  write(values)
}
class "PhoneBlacklistRemove" as odoo_src.odoo.addons.phone_validation.wizard.phone_blacklist_remove.PhoneBlacklistRemove {
  phone
  reason
  action_unblacklist_apply()
}
class "PhoneInputOutputLine" as odoo_src.odoo.addons.phone_validation.tests.test_phonenumbers_patch.TestPhonenumbersPatch.PhoneInputOutputLine {
  gt_country_code : Optional[int]
  gt_italian_leading_zero : Optional[bool]
  gt_national_number : Optional[int]
  gt_number_of_leading_zeros : Optional[int]
  number : str
  region : str
}
class "PhoneMixin" as odoo_src.odoo.addons.phone_validation.models.mail_thread_phone.PhoneMixin {
  mobile_blacklisted
  phone_blacklisted
  phone_mobile_search
  phone_sanitized
  phone_sanitized_blacklisted
  init()
  phone_action_blacklist_remove()
}
class "Picking" as odoo_src.odoo.addons.l10n_ro_edi_stock.models.stock_picking.Picking {
  l10n_ro_edi_stock_available_end_loc_types
  l10n_ro_edi_stock_available_operation_scopes
  l10n_ro_edi_stock_available_start_loc_types
  l10n_ro_edi_stock_document_ids
  l10n_ro_edi_stock_document_uit
  l10n_ro_edi_stock_enable
  l10n_ro_edi_stock_enable_amend
  l10n_ro_edi_stock_enable_fetch
  l10n_ro_edi_stock_enable_send
  l10n_ro_edi_stock_end_bcp
  l10n_ro_edi_stock_end_customs_office
  l10n_ro_edi_stock_end_loc_type
  l10n_ro_edi_stock_fields_readonly
  l10n_ro_edi_stock_operation_scope
  l10n_ro_edi_stock_operation_type
  l10n_ro_edi_stock_remarks
  l10n_ro_edi_stock_start_bcp
  l10n_ro_edi_stock_start_customs_office
  l10n_ro_edi_stock_start_loc_type
  l10n_ro_edi_stock_state
  l10n_ro_edi_stock_trailer_1_number
  l10n_ro_edi_stock_trailer_2_number
  l10n_ro_edi_stock_vehicle_number
  action_l10n_ro_edi_stock_fetch_status()
  action_l10n_ro_edi_stock_send_etransport()
  button_validate()
}
class "Picking" as odoo_src.odoo.addons.l10n_ro_edi_stock_batch.models.stock_picking.Picking {
}
class "PointOfSaleBinary" as odoo_src.odoo.addons.point_of_sale.models.binary.PointOfSaleBinary {
  point_of_sale_content_image(field)
}
class "Portal" as odoo_src.odoo.addons.l10n_id.controllers.portal.Portal {
  portal_my_invoice_detail()
}
class "PortalAccount" as odoo_src.odoo.addons.account_peppol.controllers.portal.PortalAccount {
  details_form_validate(data, partner_creation)
}
class "PortalAccount" as odoo_src.odoo.addons.account.controllers.portal.PortalAccount {
  details_form_validate(data, partner_creation)
  extra_details_form_validate(data, additional_required_fields, error, error_message)
  portal_my_invoice_detail(invoice_id, access_token, report_type, download)
  portal_my_invoices(page, date_begin, date_end, sortby, filterby)
}
class "PortalAccount" as odoo_src.odoo.addons.account_payment.controllers.portal.PortalAccount {
  portal_my_invoice_detail(invoice_id, payment_token, amount)
  portal_my_overdue_invoices(access_token)
}
class "PortalAccountMy" as odoo_src.odoo.addons.l10n_my_edi_extended.controllers.portal.PortalAccountMy {
  account(redirect)
}
class "PortalMailGroup" as odoo_src.odoo.addons.mail_group.controllers.portal.PortalMailGroup {
  group_message_get_replies(group, message, last_displayed_id)
  group_subscribe(group_id, email, token)
  group_subscribe_confirm(group_id, email, token)
  group_unsubscribe(group_id, email, token)
  group_unsubscribe_confirm(group_id, email, token)
  group_unsubscribe_oneclick(group_id, token, email)
  group_view_message(group, message, mode, date_begin, date_end)
  group_view_messages(group, page, mode, date_begin, date_end)
  groups_index(email)
}
class "PosBusMixin" as odoo_src.odoo.addons.point_of_sale.models.pos_bus_mixin.PosBusMixin {
  access_token
  create(vals_list)
}
class "PosCategory" as odoo_src.odoo.addons.point_of_sale.models.pos_category.PosCategory {
  child_ids
  color
  has_image
  image_128
  name
  parent_id
  sequence
  create(vals_list)
  get_default_color()
  write(vals)
}
class "PosConfig" as odoo_src.odoo.addons.l10n_pe_pos.models.pos_config.PosConfig {
  get_limited_partners_loading()
}
class "PosConfig" as odoo_src.odoo.addons.l10n_es_pos.models.pos_config.PosConfig {
  is_spanish
  l10n_es_simplified_invoice_journal_id
  simplified_partner_id
  get_limited_partners_loading()
}
class "PosConfig" as odoo_src.odoo.addons.l10n_be_pos_restaurant.models.pos_config.PosConfig {
  load_onboarding_bar_scenario()
  load_onboarding_restaurant_scenario()
}
class "PosConfig" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.models.pos_config.PosConfig {
  l10n_es_edi_verifactu_required
}
class "PosConfig" as odoo_src.odoo.addons.point_of_sale.models.pos_config.PosConfig {
  access_token
  active
  amount_authorized_diff
  auto_validate_terminal_payment
  available_pricelist_ids
  basic_receipt
  cash_control
  cash_rounding
  company_has_template
  company_id
  currency_id
  current_session_id
  current_session_state
  current_user_id
  customer_display_bg_img
  customer_display_bg_img_name
  customer_display_type
  default_bill_ids
  default_fiscal_position_id
  fiscal_position_ids
  group_pos_manager_id
  group_pos_user_id
  has_active_session
  iface_available_categ_ids
  iface_big_scrollbars
  iface_cashdrawer
  iface_electronic_scale
  iface_print_auto
  iface_print_skip_screen
  iface_print_via_proxy
  iface_scan_via_proxy
  iface_tax_included
  iface_tipproduct
  invoice_journal_id
  is_closing_entry_by_product
  is_header_or_footer
  is_installed_account_accountant
  is_margins_costs_accessible_to_every_user
  is_order_printer
  is_posbox
  journal_id
  last_session_closing_cash
  last_session_closing_date
  limit_categories
  manual_discount
  module_pos_avatax
  module_pos_discount
  module_pos_hr
  module_pos_restaurant
  module_pos_sms
  name
  note_ids
  number_of_rescue_session
  only_round_cash_method
  order_edit_tracking
  orderlines_sequence_in_cart_by_category
  other_devices
  payment_method_ids
  picking_policy
  picking_type_id
  pos_session_duration
  pos_session_state
  pos_session_username
  pricelist_id
  printer_ids
  proxy_ip
  receipt_footer
  receipt_header
  restrict_price_control
  rounding_method
  route_id
  sequence_id
  sequence_line_id
  session_ids
  set_maximum_difference
  ship_later
  show_category_images
  show_product_images
  tax_regime_selection
  tip_product_id
  trusted_config_ids
  use_pricelist
  uuid
  warehouse_id
  action_pos_config_modal_edit()
  create(vals_list)
  execute()
  get_categories(categories)
  get_limited_partners_loading()
  get_limited_product_count()
  get_limited_products_loading(fields)
  get_pos_kanban_view_state()
  get_records(data)
  install_pos_restaurant()
  load_onboarding_bakery_scenario()
  load_onboarding_clothes_scenario()
  load_onboarding_furniture_scenario()
  notify_synchronisation(session_id, login_number, records)
  open_existing_session_cb()
  open_opened_rescue_session_form()
  open_ui()
  read_config_open_orders(domain, record_ids)
  unlink()
  update_customer_display(order, access_token)
  write(vals)
}
class "PosConfig" as odoo_src.odoo.addons.l10n_sa_edi_pos.models.pos_config.PosConfig {
  open_ui()
}
class "PosConfig" as odoo_src.odoo.addons.l10n_ar_pos.models.pos_config.PosConfig {
  get_limited_partners_loading()
}
class "PosController" as odoo_src.odoo.addons.point_of_sale.controllers.main.PosController {
  invoice_request_screen()
  pos_web(config_id, from_backend)
  print_sale_details(date_start, date_stop)
  show_ticket_validation_screen(access_token)
}
class "PosCustomerDisplay" as odoo_src.odoo.addons.point_of_sale.controllers.customer_display.PosCustomerDisplay {
  pos_customer_display(id_, access_token)
}
class "PosInvoiceReport" as odoo_src.odoo.addons.point_of_sale.report.pos_invoice.PosInvoiceReport {
}
class "PosLoadMixin" as odoo_src.odoo.addons.point_of_sale.models.pos_load_mixin.PosLoadMixin {
}
class "PosNote" as odoo_src.odoo.addons.point_of_sale.models.pos_note.PosNote {
  name
  sequence
}
class "PosOrder" as odoo_src.odoo.addons.l10n_my_edi_pos.models.pos_order.PosOrder {
  consolidated_invoice_ids
  action_show_consolidated_invoice()
}
class "PosOrder" as odoo_src.odoo.addons.l10n_id_pos.models.pos_order.PosOrder {
  l10n_id_qris_transaction_ids
}
class "PosOrder" as odoo_src.odoo.addons.l10n_es_pos.models.pos_order.PosOrder {
  is_l10n_es_simplified_invoice
  l10n_es_simplified_invoice_number
  get_invoice_name()
}
class "PosOrder" as odoo_src.odoo.addons.l10n_in_pos.models.pos_order.PosOrder {
}
class "PosOrder" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.models.pos_order.PosOrder {
  l10n_es_edi_verifactu_document_ids
  l10n_es_edi_verifactu_qr_code
  l10n_es_edi_verifactu_refund_reason
  l10n_es_edi_verifactu_required
  l10n_es_edi_verifactu_show_cancel_button
  l10n_es_edi_verifactu_state
  l10n_es_edi_verifactu_warning
  l10n_es_edi_verifactu_warning_level
  action_pos_order_paid()
  {abstract}l10n_es_edi_verifactu_button_cancel()
  l10n_es_edi_verifactu_button_send()
}
class "PosOrder" as odoo_src.odoo.addons.point_of_sale.models.pos_order.PosOrder {
  account_move
  amount_difference
  amount_paid
  amount_return
  amount_tax
  amount_total
  available_payment_method_ids
  company_id
  config_id
  country_code
  currency_id
  currency_rate
  date_order
  email
  failed_pickings
  fiscal_position_id
  floating_order_name
  general_note
  has_deleted_line
  has_refundable_lines
  is_edited
  is_invoiced
  is_tipped
  is_total_cost_computed
  last_order_preparation_change
  lines
  margin
  margin_percent
  mobile
  name
  nb_print
  order_edit_tracking
  partner_id
  payment_ids
  picking_count
  picking_ids
  picking_type_id
  pos_reference
  pricelist_id
  procurement_group_id
  refund_orders_count
  refunded_order_id
  sale_journal
  sequence_number
  session_id
  session_move_id
  shipping_date
  state
  ticket_code
  tip_amount
  to_invoice
  tracking_number
  user_id
  uuid
  action_pos_order_cancel()
  action_pos_order_invoice()
  action_pos_order_paid()
  action_send_mail()
  action_send_receipt(email, ticket_image, basic_image)
  action_stock_picking()
  action_view_invoice()
  action_view_refund_orders()
  action_view_refunded_order()
  add_payment(data)
  create(vals_list)
  get_preparation_change()
  read_pos_data(data, config_id)
  refund()
  remove_from_ui(server_ids)
  search_paid_order_ids(config_id, domain, limit, offset)
  sync_from_ui(orders)
  write(vals)
}
class "PosOrder" as odoo_src.odoo.addons.l10n_sa_edi_pos.models.pos_order.PosOrder {
  l10n_sa_invoice_edi_state
  l10n_sa_invoice_qr_code_str
}
class "PosOrder" as odoo_src.odoo.addons.l10n_co_pos.models.pos_order.PosOrder {
}
class "PosOrder" as odoo_src.odoo.addons.l10n_es_edi_tbai_pos.models.pos_order.PosOrder {
  l10n_es_tbai_chain_index
  l10n_es_tbai_is_required
  l10n_es_tbai_post_document_id
  l10n_es_tbai_post_file
  l10n_es_tbai_post_file_name
  l10n_es_tbai_refund_reason
  l10n_es_tbai_state
  action_pos_order_paid()
  get_l10n_es_pos_tbai_qrurl()
  l10n_es_tbai_retry_post()
}
class "PosOrder" as odoo_src.odoo.addons.l10n_ch_pos.models.pos_order.PosOrder {
}
class "PosOrderLine" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.pos.PosOrderLine {
  write(vals)
}
class "PosOrderLine" as odoo_src.odoo.addons.l10n_in_pos.models.pos_order_line.PosOrderLine {
  l10n_in_hsn_code
}
class "PosOrderLine" as odoo_src.odoo.addons.point_of_sale.models.pos_order.PosOrderLine {
  attribute_value_ids
  combo_item_id
  combo_line_ids
  combo_parent_id
  company_id
  currency_id
  custom_attribute_value_ids
  customer_note
  discount
  full_product_name
  is_edited
  is_total_cost_computed
  margin
  margin_percent
  name
  note
  notice
  order_id
  pack_lot_ids
  price_extra
  price_subtotal
  price_subtotal_incl
  price_type
  price_unit
  product_id
  product_uom_id
  qty
  refund_orderline_ids
  refunded_orderline_id
  refunded_qty
  skip_change
  tax_ids
  tax_ids_after_fiscal_position
  total_cost
  uuid
  create(vals_list)
  get_existing_lots(company_id, product_id)
  unlink()
  write(values)
}
class "PosOrderLineLot" as odoo_src.odoo.addons.point_of_sale.models.pos_order.PosOrderLineLot {
  lot_name
  order_id
  pos_order_line_id
  product_id
}
class "PosOrderReport" as odoo_src.odoo.addons.point_of_sale.report.pos_order_report.PosOrderReport {
  average_price
  company_id
  config_id
  date
  delay_validation
  invoiced
  journal_id
  margin
  nbr_lines
  order_id
  partner_id
  payment_method_id
  pos_categ_id
  price_sub_total
  price_subtotal_excl
  price_total
  pricelist_id
  product_categ_id
  product_id
  product_qty
  product_tmpl_id
  session_id
  state
  total_discount
  user_id
  init()
}
class "PosPayment" as odoo_src.odoo.addons.point_of_sale.models.pos_payment.PosPayment {
  account_move_id
  amount
  card_brand
  card_no
  card_type
  cardholder_name
  company_id
  currency_id
  currency_rate
  is_change
  name
  partner_id
  payment_date
  payment_method_authcode
  payment_method_id
  payment_method_issuer_bank
  payment_method_payment_mode
  payment_ref_no
  payment_status
  pos_order_id
  session_id
  ticket
  transaction_id
  user_id
  uuid
}
class "PosPaymentMethod" as odoo_src.odoo.addons.l10n_id_pos.models.pos_payment_method.PosPaymentMethod {
  l10n_id_verify_qris_status(trx_uuid)
}
class "PosPaymentMethod" as odoo_src.odoo.addons.point_of_sale.models.pos_payment_method.PosPaymentMethod {
  active
  company_id
  config_ids
  default_qr
  hide_qr_code_method
  hide_use_payment_terminal
  image
  is_cash_count
  journal_id
  name
  open_session_ids
  outstanding_account_id
  payment_method_type
  qr_code_method
  receivable_account_id
  sequence
  split_transactions
  type
  use_payment_terminal
  copy_data(default)
  create(vals_list)
  get_qr_code(amount, free_communication, structured_communication, currency, debtor_partner)
  write(vals)
}
class "PosPrinter" as odoo_src.odoo.addons.point_of_sale.models.pos_printer.PosPrinter {
  company_id
  name
  printer_type
  product_categories_ids
  proxy_ip
}
class "PosSession" as odoo_src.odoo.addons.l10n_pe_pos.models.pos_session.PosSession {
}
class "PosSession" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.models.pos_session.PosSession {
}
class "PosSession" as odoo_src.odoo.addons.point_of_sale.models.pos_session.PosSession {
  POS_SESSION_STATE : list
  bank_payment_ids
  cash_control
  cash_journal_id
  cash_real_transaction
  cash_register_balance_end
  cash_register_balance_end_real
  cash_register_balance_start
  cash_register_difference
  closing_notes
  company_id
  config_id
  currency_id
  failed_pickings
  is_in_company_currency
  login_number
  move_id
  name
  opening_notes
  order_count
  order_ids
  payment_method_ids
  picking_count
  picking_ids
  rescue
  sequence_number
  start_at
  state
  statement_line_ids
  stop_at
  total_payments_amount
  update_stock_at_closing
  user_id
  action_pos_session_close(balancing_account, amount_to_balance, bank_payment_method_diffs)
  action_pos_session_closing_control(balancing_account, amount_to_balance, bank_payment_method_diffs)
  action_pos_session_open()
  action_pos_session_validate(balancing_account, amount_to_balance, bank_payment_method_diffs)
  action_show_payments_list()
  action_stock_picking()
  action_view_order()
  close_session_from_ui(bank_payment_method_diff_pairs)
  create(vals_list)
  delete_opening_control_session()
  find_product_by_barcode(barcode, config_id)
  get_closing_control_data()
  get_pos_ui_product_pricelist_item_by_product(product_tmpl_ids, product_ids, config_id)
  get_session_orders()
  get_total_discount()
  load_data(models_to_load, only_data)
  log_partner_message(partner_id, action, message_type)
  login()
  open_frontend_cb()
  post_close_register_message()
  post_closing_cash_details(counted_cash)
  set_opening_control(cashbox_value: int, notes: str)
  show_cash_register()
  show_journal_items()
  try_cash_in_out(_type, amount, reason, extras)
  unlink()
  update_closing_control_state_session(notes)
  write(vals)
}
class "PosSession" as odoo_src.odoo.addons.l10n_be_pos_sale.models.pos_session.PosSession {
}
class "PosSession" as odoo_src.odoo.addons.l10n_ar_pos.models.pos_session.PosSession {
}
class "PosSession" as odoo_src.odoo.addons.l10n_es_edi_tbai_pos.models.pos_session.PosSession {
}
class "PreferredClassification" as odoo_src.odoo.addons.l10n_gr_edi.models.preferred_classification.PreferredClassification {
  fiscal_position_id
  l10n_gr_edi_available_cls_category
  l10n_gr_edi_available_cls_type
  l10n_gr_edi_available_inv_type
  l10n_gr_edi_cls_category
  l10n_gr_edi_cls_type
  l10n_gr_edi_inv_type
  priority
  product_template_id
}
class "PreprocessedCSS" as odoo_src.odoo.addons.base.models.assetsbundle.PreprocessedCSS {
  rx_import : NoneType
  compile(source)
  {abstract}get_command()
}
class "PriceRule" as odoo_src.odoo.addons.delivery.models.delivery_price_rule.PriceRule {
  carrier_id
  currency_id
  list_base_price
  list_price
  max_value
  name
  operator
  sequence
  variable
  variable_factor
}
class "PrimitiveNode" as odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.PrimitiveNode {
}
class "PrintPreNumberedChecks" as odoo_src.odoo.addons.account_check_printing.wizard.print_prenumbered_checks.PrintPreNumberedChecks {
  next_check_number
  print_checks()
}
class "ProcurementGroup" as odoo_src.odoo.addons.mrp.models.stock_rule.ProcurementGroup {
  mrp_production_ids
  run(procurements, raise_user_error)
}
class "ProcurementGroup" as odoo_src.odoo.addons.point_of_sale.models.pos_session.ProcurementGroup {
}
class "ProcurementGroup" as odoo_src.odoo.addons.point_of_sale.models.stock_picking.ProcurementGroup {
  pos_order_id
}
class "Product" as odoo_src.odoo.addons.event_product.models.product_product.Product {
  event_ticket_ids
}
class "Product" as odoo_src.odoo.addons.event_booth_sale.models.product_product.Product {
  invoice_policy : str
}
class "Product" as odoo_src.odoo.addons.membership.models.product.Product {
  membership
  membership_date_from
  membership_date_to
}
class "ProductAttribute" as odoo_src.odoo.addons.point_of_sale.models.product.ProductAttribute {
}
class "ProductAttributeCustomValue" as odoo_src.odoo.addons.point_of_sale.models.product.ProductAttributeCustomValue {
  pos_order_line_id
}
class "ProductCategory" as odoo_src.odoo.addons.mrp_account.models.product.ProductCategory {
  property_stock_account_production_cost_id
}
class "ProductCategory" as odoo_src.odoo.addons.point_of_sale.models.product.ProductCategory {
}
class "ProductCategory" as odoo_src.odoo.addons.delivery.models.product_category.ProductCategory {
}
class "ProductCategory" as odoo_src.odoo.addons.account.models.product.ProductCategory {
  property_account_expense_categ_id
  property_account_income_categ_id
}
class "ProductCombo" as odoo_src.odoo.addons.point_of_sale.models.product_combo.ProductCombo {
}
class "ProductComboItem" as odoo_src.odoo.addons.point_of_sale.models.product_combo_item.ProductComboItem {
}
class "ProductDocument" as odoo_src.odoo.addons.mrp.models.product_document.ProductDocument {
  attached_on_mrp
}
class "ProductLabelLayout" as odoo_src.odoo.addons.mrp.wizard.stock_label_type.ProductLabelLayout {
  production_ids
  process()
}
class "ProductPackaging" as odoo_src.odoo.addons.point_of_sale.models.product.ProductPackaging {
}
class "ProductPricelist" as odoo_src.odoo.addons.loyalty.models.product_pricelist.ProductPricelist {
  action_archive()
}
class "ProductPricelist" as odoo_src.odoo.addons.point_of_sale.models.product.ProductPricelist {
}
class "ProductPricelistItem" as odoo_src.odoo.addons.point_of_sale.models.product.ProductPricelistItem {
}
class "ProductProduct" as odoo_src.odoo.addons.l10n_gcc_invoice.models.product.ProductProduct {
}
class "ProductProduct" as odoo_src.odoo.addons.mrp_subcontracting.models.product.ProductProduct {
}
class "ProductProduct" as odoo_src.odoo.addons.mrp.models.product.ProductProduct {
  bom_count
  bom_line_ids
  is_kits
  mrp_product_qty
  product_catalog_product_is_in_bom
  product_catalog_product_is_in_mo
  used_in_bom_count
  variant_bom_ids
  action_archive()
  action_open_quants()
  action_used_in_bom()
  action_view_bom()
  action_view_mos()
  get_components()
  write(values)
}
class "ProductProduct" as odoo_src.odoo.addons.loyalty.models.product_product.ProductProduct {
  write(vals)
}
class "ProductProduct" as odoo_src.odoo.addons.mrp_account.models.product.ProductProduct {
  standard_price : int
  action_bom_cost()
  button_bom_cost()
}
class "ProductProduct" as odoo_src.odoo.addons.hr_expense.models.product_product.ProductProduct {
  standard_price_update_warning
  write(vals)
}
class "ProductProduct" as odoo_src.odoo.addons.l10n_in_pos.models.product_product.ProductProduct {
}
class "ProductProduct" as odoo_src.odoo.addons.point_of_sale.models.product.ProductProduct {
  get_product_info_pos(price, quantity, pos_config_id)
}
class "ProductProduct" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.product_template.ProductProduct {
  l10n_eg_eta_code
}
class "ProductProduct" as odoo_src.odoo.addons.mrp_subcontracting_account.models.product_product.ProductProduct {
}
class "ProductProduct" as odoo_src.odoo.addons.account.models.product.ProductProduct {
  tax_string
}
class "ProductReplenish" as odoo_src.odoo.addons.mrp.wizard.product_replenish.ProductReplenish {
}
class "ProductReplenishMixin" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_replenish_mixin.ProductReplenishMixin {
}
class "ProductReplenishMixin" as odoo_src.odoo.addons.mrp.models.stock_replenish_mixin.ProductReplenishMixin {
  bom_id
  show_bom
}
class "ProductReplenishMixin" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.stock_replenish_mixin.ProductReplenishMixin {
}
class "ProductTag" as odoo_src.odoo.addons.point_of_sale.models.product_tag.ProductTag {
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_gr_edi.models.product_template.ProductTemplate {
  l10n_gr_edi_preferred_classification_ids
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_de.models.datev.ProductTemplate {
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_tr.models.product.ProductTemplate {
  l10n_tr_default_sales_return_account_id
  create(vals_list)
}
class "ProductTemplate" as odoo_src.odoo.addons.event_product.models.product_template.ProductTemplate {
  service_tracking
}
class "ProductTemplate" as odoo_src.odoo.addons.mrp.models.product.ProductTemplate {
  bom_count
  bom_ids
  bom_line_ids
  is_kits
  mrp_product_qty
  used_in_bom_count
  action_archive()
  action_used_in_bom()
  action_view_mos()
  write(values)
}
class "ProductTemplate" as odoo_src.odoo.addons.loyalty.models.product_template.ProductTemplate {
}
class "ProductTemplate" as odoo_src.odoo.addons.mrp_account.models.product.ProductTemplate {
  action_bom_cost()
  button_bom_cost()
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.product_template.ProductTemplate {
}
class "ProductTemplate" as odoo_src.odoo.addons.hr_expense.models.product_template.ProductTemplate {
  can_be_expensed
  default_get(fields)
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_my_edi.models.product_template.ProductTemplate {
  l10n_my_edi_classification_code
}
class "ProductTemplate" as odoo_src.odoo.addons.event_sale.models.product_template.ProductTemplate {
  invoice_policy : str
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_pl.models.product.ProductTemplate {
  l10n_pl_vat_gtu
}
class "ProductTemplate" as odoo_src.odoo.addons.point_of_sale.models.product.ProductTemplate {
  available_in_pos
  color
  pos_categ_ids
  public_description
  sale_ok : bool
  to_weight
}
class "ProductTemplate" as odoo_src.odoo.addons.event_booth_sale.models.product_template.ProductTemplate {
  invoice_policy : str
  service_tracking
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.product_template.ProductTemplate {
  l10n_eg_eta_code
  create(vals_list)
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_hu_edi.models.product.ProductTemplate {
  l10n_hu_product_code
  l10n_hu_product_code_type
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.product_template.ProductTemplate {
  l10n_id_product_code
}
class "ProductTemplate" as odoo_src.odoo.addons.account.models.product.ProductTemplate {
  account_tag_ids
  fiscal_country_codes
  property_account_expense_id
  property_account_income_id
  supplier_taxes_id
  tax_string
  taxes_id
  create(vals_list)
  get_product_accounts(fiscal_pos)
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_in.models.product_template.ProductTemplate {
  l10n_in_hsn_code
  l10n_in_hsn_warning
}
class "ProductTemplateAttributeLine" as odoo_src.odoo.addons.point_of_sale.models.product.ProductTemplateAttributeLine {
}
class "ProductTemplateAttributeValue" as odoo_src.odoo.addons.point_of_sale.models.product.ProductTemplateAttributeValue {
}
class "ProductUoM" as odoo_src.odoo.addons.l10n_hu_edi.models.uom_uom.ProductUoM {
  l10n_hu_edi_code
}
class "Project" as odoo_src.odoo.addons.hr_timesheet.models.project_project.Project {
  account_id
  allocated_hours
  allow_timesheets
  analytic_account_active
  effective_hours
  encode_uom_in_days
  is_internal_project
  is_project_overtime
  remaining_hours
  timesheet_encode_uom_id
  timesheet_ids
  total_timesheet_time
  action_project_timesheets()
  action_view_tasks()
  create(vals_list)
  get_create_edit_project_ids()
  write(values)
}
class "ProjectCollaborator" as odoo_src.odoo.addons.hr_timesheet.models.project_collaborator.ProjectCollaborator {
}
class "ProjectCustomerPortal" as odoo_src.odoo.addons.hr_timesheet.controllers.project.ProjectCustomerPortal {
}
class "ProjectUpdate" as odoo_src.odoo.addons.hr_timesheet.models.project_update.ProjectUpdate {
  allocated_time
  display_timesheet_stats
  timesheet_percentage
  timesheet_time
  uom_id
  create(vals_list)
}
class "<color:red>ProtocolError</color>" as odoo_src.odoo.addons.bus.websocket.ProtocolError {
}
class "ProxyController" as odoo_src.odoo.addons.hw_drivers.controllers.proxy.ProxyController {
  handshake()
  hello()
  status_json()
}
class "PublicPageController" as odoo_src.odoo.addons.mail.controllers.discuss.public_page.PublicPageController {
  discuss_channel(channel_id)
  discuss_channel_chat_from_token(create_token, channel_name)
  discuss_channel_invitation(channel_id, invitation_token)
  discuss_channel_meet_from_token(create_token, channel_name)
}
class "PublisherWarrantyContract" as odoo_src.odoo.addons.mail.models.update.PublisherWarrantyContract {
  update_notification(cron_mode)
}
class "PurchaseOrder" as odoo_src.odoo.addons.mrp_subcontracting_purchase.models.purchase_order.PurchaseOrder {
  subcontracting_resupply_picking_count
  action_view_subcontracting_resupply()
}
class "PurchaseOrder" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.purchase.PurchaseOrder {
  default_location_dest_id_is_subcontracting_loc
  onchange_picking_type_id()
}
class "PurchaseOrder" as odoo_src.odoo.addons.l10n_in_purchase.models.purchase_order.PurchaseOrder {
  l10n_in_gst_treatment
}
class "QRISTransaction" as odoo_src.odoo.addons.l10n_id_pos.models.qris_transaction.QRISTransaction {
}
class "QRISTransaction" as odoo_src.odoo.addons.l10n_id.models.qris_transaction.QRISTransaction {
  bank_id
  model
  model_id
  paid
  qris_amount
  qris_content
  qris_creation_datetime
  qris_invoice_id
}
class "QRPrintTest" as odoo_src.odoo.addons.l10n_ch.tests.test_l10n_ch_qr_print.QRPrintTest {
  print_qr_bill(invoice)
  setUpClass()
  test_print_qr()
}
class "<color:red>QWebException</color>" as odoo_src.odoo.addons.base.models.ir_qweb.QWebException {
  code : NoneType, str
  html : NoneType
  name : NoneType
  path : NoneType
  ref : NoneType
  stack : str
  title
}
class "QrInvoiceWizard" as odoo_src.odoo.addons.l10n_ch.wizard.qr_invoice_wizard.QrInvoiceWizard {
  classic_inv_text
  nb_classic_inv
  nb_qr_inv
  qr_inv_text
  action_view_faulty_invoices()
  default_get(fields)
  print_all_invoices()
}
class "QueryStringConstants" as odoo_src.odoo.addons.cloud_storage_azure.utils.cloud_storage_azure_utils.QueryStringConstants {
  SIGNED_AUTHORIZED_OID : str
  SIGNED_CACHE_CONTROL : str
  SIGNED_CONTENT_DISPOSITION : str
  SIGNED_CONTENT_ENCODING : str
  SIGNED_CONTENT_LANGUAGE : str
  SIGNED_CONTENT_TYPE : str
  SIGNED_CORRELATION_ID : str
  SIGNED_ENCRYPTION_SCOPE : str
  SIGNED_EXPIRY : str
  SIGNED_IDENTIFIER : str
  SIGNED_IP : str
  SIGNED_KEY_EXPIRY : str
  SIGNED_KEY_SERVICE : str
  SIGNED_KEY_START : str
  SIGNED_KEY_VERSION : str
  SIGNED_OID : str
  SIGNED_PERMISSION : str
  SIGNED_PROTOCOL : str
  SIGNED_RESOURCE : str
  SIGNED_SIGNATURE : str
  SIGNED_START : str
  SIGNED_TID : str
  SIGNED_UNAUTHORIZED_OID : str
  SIGNED_VERSION : str
}
class "QueryTestCase" as odoo_src.odoo.addons.base.tests.test_osv.QueryTestCase {
  test_basic_query()
  test_long_aliases()
  test_mixed_query_chained_explicit_implicit_joins()
  test_query_chained_explicit_joins()
  test_raise_missing_lhs()
  test_table_expression()
}
class "QwebView" as odoo_src.odoo.addons.base.models.ir_qweb_fields.QwebView {
  record_to_html(record, field_name, options)
}
class "RPC" as odoo_src.odoo.addons.base.controllers.rpc.RPC {
  jsonrpc(service, method, args)
  xmlrpc_1(service)
  xmlrpc_2(service)
}
class "<color:red>RateLimitExceededException</color>" as odoo_src.odoo.addons.bus.websocket.RateLimitExceededException {
}
class "Rating" as odoo_src.odoo.addons.im_livechat.models.rating_rating.Rating {
  action_open_rated_object()
}
class "RazorpayCommon" as odoo_src.odoo.addons.payment_razorpay.tests.common.RazorpayCommon {
  setUpClass()
}
class "RazorpayController" as odoo_src.odoo.addons.payment_razorpay_oauth.controllers.onboarding.RazorpayController {
  OAUTH_RETURN_URL : str
  razorpay_return_from_authorization()
}
class "RazorpayController" as odoo_src.odoo.addons.payment_razorpay.controllers.main.RazorpayController {
  razorpay_webhook()
}
class "ReSequenceWizard" as odoo_src.odoo.addons.account.wizard.account_resequence.ReSequenceWizard {
  end_date
  first_date
  first_name
  move_ids
  new_values
  ordering
  preview_moves
  sequence_number_reset
  default_get(fields_list)
  resequence()
}
class "ReSequenceWizard" as odoo_src.odoo.addons.account_edi.wizard.account_resequence.ReSequenceWizard {
  resequence()
}
class "Reader" as odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Reader {
  current_node : NoneType
  last_open_node : NoneType
  offset : int
  open_nodes_stack : list
  parent_node : NoneType
  root : NoneType
  build_from_stream(stream)
  clear()
  consume(_format, stream, offset)
  create_node(definition_byte, node_len, start_offset, parent)
  finalize_last_open_node()
  read_length(stream, offset)
}
class "ReceptionReport" as odoo_src.odoo.addons.mrp.report.report_stock_reception.ReceptionReport {
}
class "RecruitmentDegree" as odoo_src.odoo.addons.hr_recruitment.models.hr_recruitment_degree.RecruitmentDegree {
  name
  sequence
}
class "RecruitmentSource" as odoo_src.odoo.addons.hr_recruitment.models.hr_recruitment_source.RecruitmentSource {
  alias_id
  email
  has_domain
  job_id
  medium_id
  create_alias()
  unlink()
}
class "RecruitmentStage" as odoo_src.odoo.addons.hr_recruitment.models.hr_recruitment_stage.RecruitmentStage {
  fold
  hired_stage
  is_warning_visible
  job_ids
  legend_blocked
  legend_done
  legend_normal
  name
  requirements
  sequence
  template_id
  default_get(fields)
}
class "RecurrenceRule" as odoo_src.odoo.addons.google_calendar.models.calendar_recurrence_rule.RecurrenceRule {
}
class "RecurrenceRule" as odoo_src.odoo.addons.calendar.models.calendar_recurrence.RecurrenceRule {
  base_event_id
  byday
  calendar_event_ids
  count
  day
  dtstart
  end_type
  event_tz
  fri
  interval
  mon
  month_by
  name
  rrule
  rrule_type
  sat
  sun
  thu
  trigger_id
  tue
  until
  wed
  weekday
  get_recurrence_name()
}
class "RecurrenceRule" as odoo_src.odoo.addons.microsoft_calendar.models.calendar_recurrence_rule.RecurrenceRule {
  need_sync_m
}
class "RecurringPlan" as odoo_src.odoo.addons.crm.models.crm_recurring_plan.RecurringPlan {
  active
  name
  number_of_months
  sequence
}
class "RegistrationEditor" as odoo_src.odoo.addons.event_sale.wizard.event_edit_registration.RegistrationEditor {
  event_registration_ids
  sale_order_id
  action_make_registration()
  default_get(fields)
}
class "RegistrationEditorLine" as odoo_src.odoo.addons.event_sale.wizard.event_edit_registration.RegistrationEditorLine {
  company_id
  editor_id
  email
  event_id
  event_ticket_id
  name
  phone
  registration_id
  sale_order_line_id
}
class "RelativeDatetimeConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.RelativeDatetimeConverter {
  get_available_options()
  record_to_html(record, field_name, options)
  value_to_html(value, options)
}
class "Repair" as odoo_src.odoo.addons.mrp_repair.models.repair.Repair {
  production_count
  action_explode()
  action_view_mrp_productions()
  create(vals_list)
  write(vals)
}
class "RepairOrder" as odoo_src.odoo.addons.l10n_din5008_repair.models.repair.RepairOrder {
  l10n_din5008_printing_date
}
class "RepartitionLine" as odoo_src.odoo.addons.l10n_it_edi.tests.common.TestItEdi.RepartitionLine {
  factor_percent
  repartition_type
  tag_ids
}
class "ReportAccountHashIntegrity" as odoo_src.odoo.addons.account.report.account_hash_integrity_templates.ReportAccountHashIntegrity {
}
class "ReportAssertAccount" as odoo_src.odoo.addons.account_test.report.report_account_test.ReportAssertAccount {
}
class "ReportBomStructure" as odoo_src.odoo.addons.mrp_subcontracting.report.mrp_report_bom_structure.ReportBomStructure {
}
class "ReportBomStructure" as odoo_src.odoo.addons.mrp.report.mrp_report_bom_structure.ReportBomStructure {
  get_html(bom_id, searchQty, searchVariant)
  get_warehouses()
}
class "ReportBomStructure" as odoo_src.odoo.addons.mrp_subcontracting_purchase.report.mrp_report_bom_structure.ReportBomStructure {
}
class "ReportInvoiceWithPayment" as odoo_src.odoo.addons.account.report.account_invoice_report.ReportInvoiceWithPayment {
}
class "ReportInvoiceWithoutPayment" as odoo_src.odoo.addons.account.report.account_invoice_report.ReportInvoiceWithoutPayment {
}
class "ReportLayout" as odoo_src.odoo.addons.base.models.report_layout.ReportLayout {
  image
  name
  pdf
  sequence
  view_id
}
class "ReportMembership" as odoo_src.odoo.addons.membership.report.report_membership.ReportMembership {
  associate_member_id
  company_id
  date_to
  membership_id
  membership_state
  num_invoiced
  num_paid
  num_waiting
  partner_id
  quantity
  start_date
  tot_earned
  tot_pending
  user_id
  init()
}
class "ReportMoOverview" as odoo_src.odoo.addons.mrp.report.mrp_report_mo_overview.ReportMoOverview {
  get_report_values(production_id)
}
class "ReportMoOverview" as odoo_src.odoo.addons.mrp_account.report.mrp_report_mo_overview.ReportMoOverview {
}
class "ReportPosHashIntegrity" as odoo_src.odoo.addons.l10n_fr_pos_cert.report.pos_hash_integrity.ReportPosHashIntegrity {
}
class "ReportProjectTaskUser" as odoo_src.odoo.addons.hr_timesheet.report.project_report.ReportProjectTaskUser {
  allocated_hours
  effective_hours
  overtime
  progress
  remaining_hours
  remaining_hours_percentage
  subtask_effective_hours
  total_hours_spent
}
class "ReportSaleDetails" as odoo_src.odoo.addons.point_of_sale.models.report_sale_details.ReportSaleDetails {
  get_sale_details(date_start, date_stop, config_ids, session_ids)
}
class "ReportStockRule" as odoo_src.odoo.addons.mrp.report.report_stock_rule.ReportStockRule {
}
class "ReportSwissQR" as odoo_src.odoo.addons.l10n_ch.report.swissqr_report.ReportSwissQR {
}
class "RequestUID" as odoo_src.odoo.addons.base.models.ir_http.RequestUID {
}
class "RequestZATCAOtp" as odoo_src.odoo.addons.l10n_sa_edi.wizard.l10n_sa_edi_otp_wizard.RequestZATCAOtp {
  journal_id
  l10n_sa_otp
  l10n_sa_renewal
  default_get(fields)
  validate()
}
class "ResBank" as odoo_src.odoo.addons.l10n_cl.models.res_partner_bank.ResBank {
  fiscal_country_codes
  l10n_cl_sbif_code
}
class "ResBank" as odoo_src.odoo.addons.l10n_id.models.res_bank.ResBank {
  l10n_id_qris_api_key
  l10n_id_qris_mid
}
class "ResBank" as odoo_src.odoo.addons.l10n_pe.models.res_bank.ResBank {
  l10n_pe_edi_code
}
class "ResCity" as odoo_src.odoo.addons.l10n_br.models.res_city.ResCity {
  l10n_br_zip_range_ids
  l10n_br_zip_ranges
}
class "ResCity" as odoo_src.odoo.addons.l10n_pe_pos.models.res_city.ResCity {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_nl.models.res_company.ResCompany {
  l10n_nl_rounding_difference_loss_account_id
  l10n_nl_rounding_difference_profit_account_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_rs_edi.models.res_company.ResCompany {
  l10n_rs_edi_api_key
  l10n_rs_edi_demo_env
}
class "ResCompany" as odoo_src.odoo.addons.l10n_gr_edi.models.res_company.ResCompany {
  l10n_gr_edi_aade_id
  l10n_gr_edi_aade_key
  l10n_gr_edi_branch_number
  l10n_gr_edi_test_env
}
class "ResCompany" as odoo_src.odoo.addons.l10n_in_edi.models.res_company.ResCompany {
  l10n_in_edi_password
  l10n_in_edi_token
  l10n_in_edi_token_validity
  l10n_in_edi_username
}
class "ResCompany" as odoo_src.odoo.addons.l10n_de.models.res_company.ResCompany {
  l10n_de_stnr
  l10n_de_widnr
  get_l10n_de_stnr_national()
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_sa_edi.models.res_company.ResCompany {
  l10n_sa_additional_identification_number
  l10n_sa_additional_identification_scheme
  l10n_sa_api_mode
  l10n_sa_edi_building_number
  l10n_sa_edi_plot_identification
  l10n_sa_private_key_id
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_br.models.res_company.ResCompany {
  l10n_br_cpf_code
  l10n_br_ie_code
  l10n_br_im_code
  l10n_br_nire_code
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es_edi_sii.models.res_company.ResCompany {
  l10n_es_sii_certificate_id
  l10n_es_sii_certificate_ids
  l10n_es_sii_tax_agency
  l10n_es_sii_test_env
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ar.models.res_company.ResCompany {
  l10n_ar_afip_responsibility_type_id
  l10n_ar_afip_start_date
  l10n_ar_company_requires_vat
  l10n_ar_gross_income_number
  l10n_ar_gross_income_type
  onchange_country()
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_sg.models.res_company.ResCompany {
  l10n_sg_unique_entity_number
}
class "ResCompany" as odoo_src.odoo.addons.l10n_latam_base.models.res_company.ResCompany {
  create(vals_list)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_uy.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.res_company.ResCompany {
  l10n_fr_pos_cert_sequence_id
  create(vals_list)
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.hr_attendance.models.res_company.ResCompany {
  absence_management
  attendance_barcode_source
  attendance_from_systray
  attendance_kiosk_delay
  attendance_kiosk_key
  attendance_kiosk_mode
  attendance_kiosk_url
  attendance_kiosk_use_pin
  attendance_overtime_validation
  auto_check_out
  auto_check_out_tolerance
  hr_attendance_display_overtime
  overtime_company_threshold
  overtime_employee_threshold
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_latam_invoice_document.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.mrp_subcontracting.models.res_company.ResCompany {
  subcontracting_location_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_fr_account.models.res_company.ResCompany {
  l10n_fr_rounding_difference_loss_account_id
  l10n_fr_rounding_difference_profit_account_id
}
class "ResCompany" as odoo_src.odoo.addons.hr_recruitment.models.res_company.ResCompany {
  candidate_properties_definition
  job_properties_definition
}
class "ResCompany" as odoo_src.odoo.addons.l10n_jo_edi_extended.models.res_company.ResCompany {
  l10n_jo_edi_demo_mode
}
class "ResCompany" as odoo_src.odoo.addons.payment.models.res_company.ResCompany {
  payment_onboarding_payment_method
}
class "ResCompany" as odoo_src.odoo.addons.base_vat.models.res_company.ResCompany {
  vat_check_vies
}
class "ResCompany" as odoo_src.odoo.addons.account_peppol.models.res_company.ResCompany {
  account_peppol_contact_email
  account_peppol_migration_key
  account_peppol_phone_number
  account_peppol_proxy_state
  peppol_eas
  peppol_endpoint
  peppol_purchase_journal_id
  create(vals_list)
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es_pos.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ar_withholding.models.res_company.ResCompany {
  l10n_ar_tax_base_account_id
}
class "ResCompany" as odoo_src.odoo.addons.partner_autocomplete.models.res_company.ResCompany {
  iap_enrich_auto_done
  partner_gid
  create(vals_list)
  iap_enrich_auto()
}
class "ResCompany" as odoo_src.odoo.addons.l10n_cl.models.res_company.ResCompany {
  l10n_cl_activity_description
}
class "ResCompany" as odoo_src.odoo.addons.auth_ldap.models.res_company.ResCompany {
  ldaps
}
class "ResCompany" as odoo_src.odoo.addons.hr_presence.models.res_company.ResCompany {
  hr_presence_last_compute_date
}
class "ResCompany" as odoo_src.odoo.addons.hr_timesheet.models.res_company.ResCompany {
  internal_project_id
  project_time_mode_id
  timesheet_encode_uom_id
  create(values)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_fr.models.res_company.ResCompany {
  ape
  is_france_country
  l10n_fr_closing_sequence_id
  siret
  create(vals_list)
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es.models.res_company.ResCompany {
  l10n_es_simplified_invoice_limit
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ke.models.res_company.ResCompany {
  l10n_ke_oscu_is_active
}
class "ResCompany" as odoo_src.odoo.addons.mass_mailing.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.res_company.ResCompany {
  l10n_vn_edi_password
  l10n_vn_edi_token
  l10n_vn_edi_token_expiry
  l10n_vn_edi_username
}
class "ResCompany" as odoo_src.odoo.addons.l10n_it_edi_doi.models.res_company.ResCompany {
  l10n_it_edi_doi_fiscal_position_id
  l10n_it_edi_doi_tax_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_in_withholding.models.res_company.ResCompany {
  l10n_in_withholding_account_id
  l10n_in_withholding_journal_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_no.models.res_company.ResCompany {
  l10n_no_bronnoysund_number
}
class "ResCompany" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.res_company.ResCompany {
  withholding_tax_base_account_id
}
class "ResCompany" as odoo_src.odoo.addons.hr_expense.models.res_company.ResCompany {
  company_expense_allowed_payment_method_line_ids
  expense_journal_id
  expense_outstanding_account_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_my_edi.models.res_company.ResCompany {
  l10n_my_edi_default_import_journal_id
  l10n_my_edi_industrial_classification
  l10n_my_edi_mode
  l10n_my_edi_proxy_user_id
  l10n_my_identification_number
  l10n_my_identification_number_placeholder
  l10n_my_identification_type
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.res_company.ResCompany {
  dropship_subcontractor_pick_type_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_pe.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.point_of_sale.models.res_company.ResCompany {
  point_of_sale_ticket_portal_url_display_mode
  point_of_sale_ticket_unique_code
  point_of_sale_update_stock_quantities
  point_of_sale_use_ticket_qr_code
  validate_lock_dates()
}
class "ResCompany" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.res_company.ResCompany {
  l10n_eg_client_identifier
  l10n_eg_client_secret
  l10n_eg_invoicing_threshold
  l10n_eg_production_env
}
class "ResCompany" as odoo_src.odoo.addons.l10n_sk.models.res_company.ResCompany {
  income_tax_id
  trade_registry
}
class "ResCompany" as odoo_src.odoo.addons.l10n_se.models.res_company.ResCompany {
  org_number
}
class "ResCompany" as odoo_src.odoo.addons.l10n_my_ubl_pint.models.res_company.ResCompany {
  sst_registration_number
  ttx_registration_number
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.res_company.ResCompany {
  l10n_es_edi_verifactu_certificate_ids
  l10n_es_edi_verifactu_chain_sequence_id
  l10n_es_edi_verifactu_next_batch_time
  l10n_es_edi_verifactu_required
  l10n_es_edi_verifactu_special_vat_regime
  l10n_es_edi_verifactu_test_environment
}
class "ResCompany" as odoo_src.odoo.addons.barcodes.models.res_company.ResCompany {
  nomenclature_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ke_edi_tremol.models.res_company.ResCompany {
  l10n_ke_cu_proxy_address
}
class "ResCompany" as odoo_src.odoo.addons.l10n_tr_nilvera.models.res_company.ResCompany {
  l10n_tr_nilvera_api_key
  l10n_tr_nilvera_environment
  l10n_tr_nilvera_purchase_journal_id
}
class "ResCompany" as odoo_src.odoo.addons.l10n_hu_edi.models.res_company.ResCompany {
  l10n_hu_edi_last_transaction_recovery
  l10n_hu_edi_password
  l10n_hu_edi_replacement_key
  l10n_hu_edi_server_mode
  l10n_hu_edi_signature_key
  l10n_hu_edi_username
  l10n_hu_group_vat
  l10n_hu_tax_regime
}
class "ResCompany" as odoo_src.odoo.addons.account_edi_proxy_client.models.res_company.ResCompany {
  account_edi_proxy_client_ids
}
class "ResCompany" as odoo_src.odoo.addons.account.models.company.ResCompany {
  account_cash_basis_base_account_id
  account_default_pos_receivable_account_id
  account_discount_expense_allocation_id
  account_discount_income_allocation_id
  account_enabled_tax_country_ids
  account_fiscal_country_id
  account_journal_early_pay_discount_gain_account_id
  account_journal_early_pay_discount_loss_account_id
  account_journal_suspense_account_id
  account_opening_date
  account_opening_journal_id
  account_opening_move_id
  account_price_include
  account_purchase_tax_id
  account_sale_tax_id
  account_storno
  account_use_credit_limit
  anglo_saxon_accounting
  automatic_entry_default_journal_id
  autopost_bills
  bank_account_code_prefix
  bank_journal_ids
  batch_payment_sequence_id
  cash_account_code_prefix
  chart_template
  check_account_audit_trail
  company_registry_placeholder
  company_vat_placeholder
  currency_exchange_journal_id
  default_cash_difference_expense_account_id
  default_cash_difference_income_account_id
  display_invoice_amount_total_words
  display_invoice_tax_company_currency
  expects_chart_of_accounts
  expense_accrual_account_id
  expense_currency_exchange_account_id
  fiscal_position_ids
  fiscalyear_last_day
  fiscalyear_last_month
  fiscalyear_lock_date
  hard_lock_date
  income_currency_exchange_account_id
  incoterm_id
  invoice_terms
  invoice_terms_html
  multi_vat_foreign_country_ids
  purchase_lock_date
  qr_code
  quick_edit_mode
  revenue_accrual_account_id
  sale_lock_date
  tax_calculation_rounding_method
  tax_cash_basis_journal_id
  tax_exigibility
  tax_lock_date
  terms_type
  transfer_account_code_prefix
  transfer_account_id
  user_fiscalyear_lock_date
  user_hard_lock_date
  user_purchase_lock_date
  user_sale_lock_date
  user_tax_lock_date
  action_save_onboarding_company_data()
  action_save_onboarding_sale_tax()
  cache_invalidation_fields()
  compute_account_tax_fiscal_country()
  compute_fiscalyear_dates(current_date)
  create(vals_list)
  get_chart_of_accounts_or_fail()
  get_new_account_code(current_code, old_prefix, new_prefix)
  get_next_batch_payment_communication()
  get_unaffected_earnings_account()
  install_l10n_modules()
  opening_move_posted()
  reflect_code_prefix_change(old_code, new_code)
  setting_init_bank_account_action()
  write(values)
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ro_edi.models.res_company.ResCompany {
  l10n_ro_edi_access_expiry_date
  l10n_ro_edi_access_token
  l10n_ro_edi_callback_url
  l10n_ro_edi_client_id
  l10n_ro_edi_client_secret
  l10n_ro_edi_oauth_error
  l10n_ro_edi_refresh_expiry_date
  l10n_ro_edi_refresh_token
  l10n_ro_edi_test_env
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es_edi_tbai_pos.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ca.models.res_company.ResCompany {
  l10n_ca_pst
}
class "ResCompany" as odoo_src.odoo.addons.l10n_fr_hr_holidays.models.res_company.ResCompany {
  l10n_fr_reference_leave_type
}
class "ResCompany" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.models.res_company.ResCompany {
  l10n_in_edi_ewaybill_auth_validity
  l10n_in_edi_ewaybill_password
  l10n_in_edi_ewaybill_username
}
class "ResCompany" as odoo_src.odoo.addons.l10n_ec.models.res_company.ResCompany {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_cz.models.res_company.ResCompany {
  trade_registry
}
class "ResCompany" as odoo_src.odoo.addons.l10n_it_edi.models.res_company.ResCompany {
  l10n_it_codice_fiscale
  l10n_it_eco_index_liquidation_state
  l10n_it_eco_index_number
  l10n_it_eco_index_office
  l10n_it_eco_index_share_capital
  l10n_it_eco_index_sole_shareholder
  l10n_it_edi_proxy_user_id
  l10n_it_has_eco_index
  l10n_it_has_tax_representative
  l10n_it_tax_representative_partner_id
  l10n_it_tax_system
}
class "ResCompany" as odoo_src.odoo.addons.l10n_jo_edi.models.res_company.ResCompany {
  l10n_jo_edi_client_identifier
  l10n_jo_edi_secret_key
  l10n_jo_edi_sequence_income_source
  l10n_jo_edi_taxpayer_type
}
class "ResCompany" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.res_company.ResCompany {
  l10n_es_tbai_certificate_id
  l10n_es_tbai_certificate_ids
  l10n_es_tbai_chain_sequence_id
  l10n_es_tbai_is_enabled
  l10n_es_tbai_license_html
  l10n_es_tbai_tax_agency
  l10n_es_tbai_test_env
}
class "ResCompany" as odoo_src.odoo.addons.l10n_in.models.company.ResCompany {
  l10n_in_edi_production_env
  l10n_in_gst_state_warning
  l10n_in_hsn_code_digit
  l10n_in_pan
  l10n_in_pan_type
  l10n_in_upi_id
  action_update_state_as_per_gstin()
  create(vals_list)
  write(vals)
}
class "ResCompany" as odoo_src.odoo.addons.hr_contract.models.res_company.ResCompany {
  contract_expiration_notice_period
  work_permit_expiration_notice_period
}
class "ResConfigConfigurable" as odoo_src.odoo.addons.base.models.res_config.ResConfigConfigurable {
  action_cancel()
  action_next()
  action_skip()
  {abstract}cancel()
  {abstract}execute()
  next()
  start()
}
class "ResConfigModuleInstallationMixin" as odoo_src.odoo.addons.base.models.res_config.ResConfigModuleInstallationMixin {
}
class "ResConfigSettings" as odoo_src.odoo.addons.auth_signup.models.res_config_settings.ResConfigSettings {
  auth_signup_reset_password
  auth_signup_template_user_id
  auth_signup_uninvited
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_rs_edi.models.res_config_settings.ResConfigSettings {
  l10n_rs_edi_api_key
  l10n_rs_edi_demo_env
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_gr_edi.models.res_config_settings.ResConfigSettings {
  l10n_gr_edi_aade_id
  l10n_gr_edi_aade_key
  l10n_gr_edi_branch_number
  l10n_gr_edi_test_env
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_in_edi.models.res_config_settings.ResConfigSettings {
  l10n_in_edi_password
  l10n_in_edi_username
  l10n_in_check_gst_number()
  l10n_in_edi_test()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_sa_edi.models.res_config_settings.ResConfigSettings {
  l10n_sa_api_mode
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_es_edi_sii.models.res_config_settings.ResConfigSettings {
  l10n_es_sii_certificate_ids
  l10n_es_sii_tax_agency
  l10n_es_sii_test_env
}
class "ResConfigSettings" as odoo_src.odoo.addons.google_calendar.models.res_config_settings.ResConfigSettings {
  cal_client_id
  cal_client_secret
  cal_sync_paused
}
class "ResConfigSettings" as odoo_src.odoo.addons.crm_iap_enrich.models.res_config_settings.ResConfigSettings {
  get_values()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr_attendance.models.res_config_settings.ResConfigSettings {
  absence_management
  attendance_barcode_source
  attendance_from_systray
  attendance_kiosk_delay
  attendance_kiosk_mode
  attendance_kiosk_url
  attendance_kiosk_use_pin
  attendance_overtime_validation
  auto_check_out
  auto_check_out_tolerance
  hr_attendance_display_overtime
  overtime_company_threshold
  overtime_employee_threshold
  get_values()
  regenerate_kiosk_key()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_eu_oss.models.res_config_settings.ResConfigSettings {
  l10n_eu_oss_eu_country
  refresh_eu_tax_mapping()
}
class "ResConfigSettings" as odoo_src.odoo.addons.mail.models.res_config_settings.ResConfigSettings {
  alias_domain_id
  email_primary_color
  email_secondary_color
  external_email_server_default
  fail_counter
  google_translate_api_key
  module_google_gmail
  module_microsoft_outlook
  restrict_template_rendering
  sfu_server_key
  sfu_server_url
  tenor_api_key
  tenor_content_filter
  tenor_gif_limit
  twilio_account_sid
  twilio_account_token
  use_twilio_rtc_servers
  open_email_layout()
  open_mail_templates()
}
class "ResConfigSettings" as odoo_src.odoo.addons.base_geolocalize.models.res_config_settings.ResConfigSettings {
  geoloc_provider_googlemap_key
  geoloc_provider_id
  geoloc_provider_techname
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr_recruitment.models.res_config_settings.ResConfigSettings {
  group_applicant_cv_display
  module_hr_recruitment_extract
  module_hr_recruitment_survey
  module_website_hr_recruitment
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_jo_edi_extended.models.res_config_settings.ResConfigSettings {
  l10n_jo_edi_demo_mode
}
class "ResConfigSettings" as odoo_src.odoo.addons.account_check_printing.models.res_config_settings.ResConfigSettings {
  account_check_printing_date_label
  account_check_printing_layout
  account_check_printing_margin_left
  account_check_printing_margin_right
  account_check_printing_margin_top
  account_check_printing_multi_stub
}
class "ResConfigSettings" as odoo_src.odoo.addons.digest.models.res_config_settings.ResConfigSettings {
  digest_emails
  digest_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.google_recaptcha.models.res_config_settings.ResConfigSettings {
  recaptcha_min_score
  recaptcha_private_key
  recaptcha_public_key
}
class "ResConfigSettings" as odoo_src.odoo.addons.base_vat.models.res_config_settings.ResConfigSettings {
  vat_check_vies
}
class "ResConfigSettings" as odoo_src.odoo.addons.account_peppol.models.res_config_settings.ResConfigSettings {
  account_peppol_contact_email
  account_peppol_eas
  account_peppol_edi_identification
  account_peppol_edi_mode
  account_peppol_edi_user
  account_peppol_endpoint
  account_peppol_migration_key
  account_peppol_mode_constraint
  account_peppol_phone_number
  account_peppol_proxy_state
  account_peppol_purchase_journal_id
  action_open_peppol_form()
  button_account_peppol_configure_services()
  button_deregister_peppol_participant()
  button_migrate_peppol_registration()
  button_peppol_smp_registration()
  button_update_peppol_user_data()
}
class "ResConfigSettings" as odoo_src.odoo.addons.mrp.models.res_config_settings.ResConfigSettings {
  group_mrp_byproducts
  group_mrp_reception_report
  group_mrp_routings
  group_mrp_workorder_dependencies
  group_unlocked_by_default
  manufacturing_lead
  module_mrp_mps
  module_mrp_plm
  module_mrp_subcontracting
  module_quality_control
  module_quality_control_worksheet
  use_manufacturing_lead
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_es_pos.models.res_config_settings.ResConfigSettings {
  pos_l10n_es_simplified_invoice_journal_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.crm.models.res_config_settings.ResConfigSettings {
  crm_auto_assignment_action
  crm_auto_assignment_interval_number
  crm_auto_assignment_interval_type
  crm_auto_assignment_run_datetime
  crm_use_auto_assignment
  group_use_lead
  group_use_recurring_revenues
  is_membership_multi
  lead_enrich_auto
  lead_mining_in_pipeline
  module_crm_iap_enrich
  module_crm_iap_mine
  module_website_crm_iap_reveal
  predictive_lead_scoring_field_labels
  predictive_lead_scoring_fields
  predictive_lead_scoring_fields_str
  predictive_lead_scoring_start_date
  predictive_lead_scoring_start_date_str
  action_crm_assign_leads()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_ar_withholding.models.res_config_settings.ResConfigSettings {
  l10n_ar_tax_base_account_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.lunch.models.res_config_settings.ResConfigSettings {
  company_lunch_minimum_threshold
  company_lunch_notify_message
  currency_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.partner_autocomplete.models.res_config_settings.ResConfigSettings {
  partner_autocomplete_insufficient_credit
  redirect_to_buy_autocomplete_credit()
}
class "ResConfigSettings" as odoo_src.odoo.addons.auth_oauth.models.res_config_settings.ResConfigSettings {
  auth_oauth_google_client_id
  auth_oauth_google_enabled
  server_uri_google
  get_uri()
  get_values()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.auth_ldap.models.res_config_settings.ResConfigSettings {
  ldaps
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr_presence.models.res_config_settings.ResConfigSettings {
  create(vals)
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr_timesheet.models.res_config_settings.ResConfigSettings {
  is_encode_uom_days
  module_project_timesheet_holidays
  project_time_mode_id
  reminder_allow
  reminder_user_allow
  timesheet_encode_method
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_es.models.res_config_settings.ResConfigSettings {
  l10n_es_simplified_invoice_limit
}
class "ResConfigSettings" as odoo_src.odoo.addons.mass_mailing.models.res_config_settings.ResConfigSettings {
  group_mass_mailing_campaign
  mass_mailing_mail_server_id
  mass_mailing_outgoing_mail_server
  mass_mailing_reports
  mass_mailing_split_contact_name
  show_blacklist_buttons
  get_values()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.res_config_settings.ResConfigSettings {
  l10n_vn_edi_default_symbol
  l10n_vn_edi_password
  l10n_vn_edi_username
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_in_withholding.models.res_config_settings.ResConfigSettings {
  l10n_in_withholding_account_id
  l10n_in_withholding_journal_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.res_config_settings.ResConfigSettings {
  withholding_tax_base_account_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr_expense.models.res_config_settings.ResConfigSettings {
  company_expense_allowed_payment_method_line_ids
  expense_journal_id
  expense_outstanding_account_id
  hr_expense_alias_domain_id
  hr_expense_alias_prefix
  hr_expense_use_mailgateway
  module_hr_expense_extract
  module_hr_payroll_expense
  get_values()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_my_edi.models.res_config_settings.ResConfigSettings {
  l10n_my_accept_processing
  l10n_my_edi_company_vat
  l10n_my_edi_default_import_journal_id
  l10n_my_edi_mode
  l10n_my_edi_proxy_user_id
  action_l10n_my_edi_allow_processing()
  action_l10n_my_edi_unregister()
  action_open_company_form()
}
class "ResConfigSettings" as odoo_src.odoo.addons.microsoft_outlook.models.res_config_settings.ResConfigSettings {
  microsoft_outlook_client_identifier
  microsoft_outlook_client_secret
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_pl.models.res_config_settings.ResConfigSettings {
  l10n_pl_reports_tax_office_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.point_of_sale.models.res_config_settings.ResConfigSettings {
  account_default_pos_receivable_account_id
  barcode_nomenclature_id
  is_kiosk_mode
  module_pos_adyen
  module_pos_mercado_pago
  module_pos_paytm
  module_pos_preparation_display
  module_pos_pricer
  module_pos_razorpay
  module_pos_six
  module_pos_stripe
  module_pos_viva_wallet
  point_of_sale_ticket_portal_url_display_mode
  point_of_sale_ticket_unique_code
  point_of_sale_use_ticket_qr_code
  pos_allowed_pricelist_ids
  pos_amount_authorized_diff
  pos_auto_validate_terminal_payment
  pos_available_pricelist_ids
  pos_basic_receipt
  pos_cash_control
  pos_cash_rounding
  pos_company_has_template
  pos_config_id
  pos_customer_display_bg_img
  pos_customer_display_bg_img_name
  pos_customer_display_type
  pos_default_bill_ids
  pos_default_fiscal_position_id
  pos_fiscal_position_ids
  pos_has_active_session
  pos_iface_available_categ_ids
  pos_iface_big_scrollbars
  pos_iface_cashdrawer
  pos_iface_electronic_scale
  pos_iface_print_auto
  pos_iface_print_skip_screen
  pos_iface_print_via_proxy
  pos_iface_scan_via_proxy
  pos_iface_tax_included
  pos_iface_tipproduct
  pos_invoice_journal_id
  pos_is_closing_entry_by_product
  pos_is_header_or_footer
  pos_is_margins_costs_accessible_to_every_user
  pos_is_order_printer
  pos_is_posbox
  pos_journal_id
  pos_limit_categories
  pos_manual_discount
  pos_module_pos_avatax
  pos_module_pos_discount
  pos_module_pos_hr
  pos_module_pos_restaurant
  pos_module_pos_sms
  pos_note_ids
  pos_only_round_cash_method
  pos_order_edit_tracking
  pos_orderlines_sequence_in_cart_by_category
  pos_other_devices
  pos_payment_method_ids
  pos_picking_policy
  pos_picking_type_id
  pos_pricelist_id
  pos_printer_ids
  pos_proxy_ip
  pos_receipt_footer
  pos_receipt_header
  pos_restrict_price_control
  pos_rounding_method
  pos_route_id
  pos_selectable_categ_ids
  pos_sequence_id
  pos_set_maximum_difference
  pos_ship_later
  pos_show_category_images
  pos_show_product_images
  pos_tax_regime_selection
  pos_tip_product_id
  pos_trusted_config_ids
  pos_use_pricelist
  pos_warehouse_id
  sale_tax_id
  update_stock_quantities
  action_pos_config_create_new()
  create(vals_list)
  pos_open_ui()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.res_config_settings.ResConfigSettings {
  l10n_eg_client_identifier
  l10n_eg_client_secret
  l10n_eg_invoicing_threshold
  l10n_eg_production_env
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr.models.res_config_settings.ResConfigSettings {
  hr_employee_self_edit
  hr_presence_control_email
  hr_presence_control_email_amount
  hr_presence_control_ip
  hr_presence_control_ip_list
  hr_presence_control_login
  module_hr_attendance
  module_hr_homeworking
  module_hr_presence
  module_hr_skills
  resource_calendar_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.microsoft_calendar.models.res_config_settings.ResConfigSettings {
  cal_microsoft_client_id
  cal_microsoft_client_secret
  cal_microsoft_sync_paused
}
class "ResConfigSettings" as odoo_src.odoo.addons.auth_password_policy.models.res_config_settings.ResConfigSettings {
  minlength
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.res_config_settings.ResConfigSettings {
  l10n_es_edi_verifactu_certificate_ids
  l10n_es_edi_verifactu_required
  l10n_es_edi_verifactu_special_vat_regime
  l10n_es_edi_verifactu_test_environment
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_ke_edi_tremol.models.res_config_settings.ResConfigSettings {
  l10n_ke_cu_proxy_address
}
class "ResConfigSettings" as odoo_src.odoo.addons.maintenance.models.res_config_settings.ResConfigSettings {
  module_maintenance_worksheet
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_tr_nilvera.models.res_config_settings.ResConfigSettings {
  l10n_tr_nilvera_api_key
  l10n_tr_nilvera_environment
  l10n_tr_nilvera_purchase_journal_id
  nilvera_ping()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_hu_edi.models.res_config_settings.ResConfigSettings {
  l10n_hu_edi_is_active
  l10n_hu_edi_password
  l10n_hu_edi_replacement_key
  l10n_hu_edi_server_mode
  l10n_hu_edi_signature_key
  l10n_hu_edi_username
  l10n_hu_tax_regime
  create(vals_list)
}
class "ResConfigSettings" as odoo_src.odoo.addons.google_gmail.models.res_config_settings.ResConfigSettings {
  google_gmail_client_identifier
  google_gmail_client_secret
}
class "ResConfigSettings" as odoo_src.odoo.addons.account.models.res_config_settings.ResConfigSettings {
  account_cash_basis_base_account_id
  account_default_credit_limit
  account_discount_expense_allocation_id
  account_discount_income_allocation_id
  account_fiscal_country_id
  account_journal_early_pay_discount_gain_account_id
  account_journal_early_pay_discount_loss_account_id
  account_journal_suspense_account_id
  account_price_include
  account_storno
  account_use_credit_limit
  autopost_bills
  chart_template
  check_account_audit_trail
  country_code
  currency_exchange_journal_id
  currency_id
  display_invoice_amount_total_words
  display_invoice_tax_company_currency
  expense_currency_exchange_account_id
  group_analytic_accounting : bool
  group_cash_rounding
  group_sale_delivery_address
  group_show_purchase_receipts
  group_show_sale_receipts
  group_warning_account
  has_accounting_entries
  has_chart_of_accounts
  income_currency_exchange_account_id
  incoterm_id
  invoice_terms
  invoice_terms_html
  is_account_peppol_eligible
  module_account_accountant
  module_account_bank_statement_extract
  module_account_bank_statement_import_camt
  module_account_bank_statement_import_csv
  module_account_bank_statement_import_ofx
  module_account_bank_statement_import_qif
  module_account_batch_payment
  module_account_budget
  module_account_check_printing
  module_account_extract
  module_account_intrastat
  module_account_invoice_extract
  module_account_iso20022
  module_account_payment
  module_account_peppol
  module_account_reports
  module_account_sepa_direct_debit
  module_currency_rate_live
  module_l10n_eu_oss
  module_product_margin
  module_snailmail_account
  preview_ready
  purchase_tax_id
  qr_code
  quick_edit_mode
  sale_tax_id
  tax_calculation_rounding_method
  tax_cash_basis_journal_id
  tax_exigibility
  terms_type
  transfer_account_id
  use_invoice_terms
  action_update_terms()
  onchange_analytic_accounting()
  onchange_module_account_budget()
  reload_template()
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.fleet.models.res_config_settings.ResConfigSettings {
  delay_alert_contract
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_ro_edi.models.res_config_settings.ResConfigSettings {
  l10n_ro_edi_access_expiry_date
  l10n_ro_edi_access_token
  l10n_ro_edi_callback_url
  l10n_ro_edi_client_id
  l10n_ro_edi_client_secret
  l10n_ro_edi_oauth_error
  l10n_ro_edi_refresh_expiry_date
  l10n_ro_edi_refresh_token
  l10n_ro_edi_test_env
  button_l10n_ro_edi_generate_token()
}
class "ResConfigSettings" as odoo_src.odoo.addons.account_payment.wizards.res_config_settings.ResConfigSettings {
  pay_invoices_online
}
class "ResConfigSettings" as odoo_src.odoo.addons.auth_totp_mail_enforce.models.res_config_settings.ResConfigSettings {
  auth_totp_enforce
  auth_totp_policy
  get_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.event.models.res_config_settings.ResConfigSettings {
  barcode_nomenclature_id
  google_maps_static_api_key
  google_maps_static_api_secret
  module_event_booth
  module_event_sale
  module_pos_event
  module_website_event_exhibitor
  module_website_event_meet
  module_website_event_sale
  module_website_event_track
  module_website_event_track_live
  module_website_event_track_quiz
  use_event_barcode
  use_google_maps_static_api
  create(vals_list)
  write(vals)
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_fr_hr_holidays.models.res_config_settings.ResConfigSettings {
  l10n_fr_reference_leave_type
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.models.res_config_settings.ResConfigSettings {
  l10n_in_edi_ewaybill_password
  l10n_in_edi_ewaybill_username
  l10n_in_edi_ewaybill_test()
}
class "ResConfigSettings" as odoo_src.odoo.addons.analytic.models.res_config_settings.ResConfigSettings {
  group_analytic_accounting
}
class "ResConfigSettings" as odoo_src.odoo.addons.base.models.res_config.ResConfigSettings {
  display_name
  action_open_template_user()
  cancel()
  copy(default)
  create(vals_list)
  default_get(fields)
  execute()
  get_config_warning(msg)
  get_option_name(full_field_name)
  get_option_path(menu_xml_id)
  get_values()
  onchange_module(field_value, module_name)
  set_values()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_it_edi.models.res_config_settings.ResConfigSettings {
  company_parent_id
  is_edi_proxy_active
  l10n_it_edi_demo_mode
  l10n_it_edi_proxy_current_state
  l10n_it_edi_register
  use_root_proxy_user
  button_create_proxy_user()
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_jo_edi.models.res_config_settings.ResConfigSettings {
  l10n_jo_edi_client_identifier
  l10n_jo_edi_secret_key
  l10n_jo_edi_sequence_income_source
  l10n_jo_edi_taxpayer_type
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_es_edi_tbai.models.res_config_settings.ResConfigSettings {
  l10n_es_tbai_certificate_ids
  l10n_es_tbai_tax_agency
  l10n_es_tbai_test_env
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_in.models.res_config_settings.ResConfigSettings {
  group_l10n_in_reseller
  l10n_in_edi_production_env
  l10n_in_hsn_code_digit
  module_l10n_in_edi
  module_l10n_in_edi_ewaybill
  module_l10n_in_enet_batch_payment
  module_l10n_in_gstin_status
  module_l10n_in_withholding
  l10n_in_edi_buy_iap()
}
class "ResConfigSettings" as odoo_src.odoo.addons.hr_contract.models.res_config_settings.ResConfigSettings {
  contract_expiration_notice_period
  work_permit_expiration_notice_period
}
class "ResConfigSettings" as odoo_src.odoo.addons.base_setup.models.res_config_settings.ResConfigSettings {
  active_user_count
  company_count
  company_country_code
  company_id
  company_informations
  company_name
  external_report_layout_id
  group_multi_currency
  is_root_company
  language_count
  module_account_inter_company_rules
  module_auth_ldap
  module_auth_oauth
  module_base_geolocalize
  module_base_import
  module_google_calendar
  module_google_recaptcha
  module_mail_plugin
  module_microsoft_calendar
  module_partner_autocomplete
  module_product_images
  module_sms
  module_voip
  module_web_unsplash
  module_website_cf_turnstile
  profiling_enabled_until
  report_footer
  show_effect
  user_default_rights
  edit_external_header()
  open_company()
  open_default_user()
}
class "ResCountry" as odoo_src.odoo.addons.l10n_ar.models.res_country.ResCountry {
  l10n_ar_afip_code
  l10n_ar_legal_entity_vat
  l10n_ar_natural_vat
  l10n_ar_other_vat
}
class "ResCountry" as odoo_src.odoo.addons.payment.models.res_country.ResCountry {
  is_stripe_supported_country
}
class "ResCountry" as odoo_src.odoo.addons.point_of_sale.models.res_country.ResCountry {
}
class "ResCountryState" as odoo_src.odoo.addons.point_of_sale.models.res_country_state.ResCountryState {
}
class "ResCurrency" as odoo_src.odoo.addons.l10n_ar.models.res_currency.ResCurrency {
  l10n_ar_afip_code
}
class "ResCurrency" as odoo_src.odoo.addons.l10n_cl.models.res_currency.ResCurrency {
  l10n_cl_currency_code
  l10n_cl_short_name
}
class "ResCurrency" as odoo_src.odoo.addons.point_of_sale.models.res_currency.ResCurrency {
}
class "ResCurrency" as odoo_src.odoo.addons.account.models.res_currency.ResCurrency {
  display_rounding_warning
  fiscal_country_codes
  write(vals)
}
class "ResCurrencyRate" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.res_currency_rate.ResCurrencyRate {
}
class "ResDevice" as odoo_src.odoo.addons.base.models.res_device.ResDevice {
  init()
  revoke()
}
class "ResDeviceLog" as odoo_src.odoo.addons.base.models.res_device.ResDeviceLog {
  browser
  city
  country
  device_type
  first_activity
  ip_address
  is_current
  last_activity
  linked_ip_addresses
  platform
  revoked
  session_identifier
  user_id
  init()
}
class "ResGroups" as odoo_src.odoo.addons.mail.models.discuss.res_groups.ResGroups {
  write(vals)
}
class "ResGroups" as odoo_src.odoo.addons.bus.models.res_groups.ResGroups {
}
class "ResLang" as odoo_src.odoo.addons.point_of_sale.models.res_lang.ResLang {
}
class "ResLang" as odoo_src.odoo.addons.http_routing.models.res_lang.ResLang {
}
class "ResPartner" as odoo_src.odoo.addons.auth_signup.models.res_partner.ResPartner {
  signup_type
  action_signup_prepare()
  signup_cancel()
  signup_get_auth_param()
  signup_prepare(signup_type)
}
class "ResPartner" as odoo_src.odoo.addons.l10n_hu.models.res_partner.ResPartner {
  l10n_hu_eu_vat
}
class "ResPartner" as odoo_src.odoo.addons.l10n_rs_edi.models.res_partner.ResPartner {
  l10n_rs_edi_public_funds
  l10n_rs_edi_registration_number
}
class "ResPartner" as odoo_src.odoo.addons.l10n_gr_edi.models.res_partner.ResPartner {
  l10n_gr_edi_branch_number
}
class "ResPartner" as odoo_src.odoo.addons.l10n_sa_edi.models.res_partner.ResPartner {
  l10n_sa_additional_identification_number
  l10n_sa_additional_identification_scheme
  l10n_sa_edi_building_number
  l10n_sa_edi_plot_identification
}
class "ResPartner" as odoo_src.odoo.addons.l10n_br.models.res_partner.ResPartner {
  l10n_br_ie_code
  l10n_br_im_code
  l10n_br_isuf_code
}
class "ResPartner" as odoo_src.odoo.addons.l10n_dk.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_au.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ar.models.res_partner.ResPartner {
  l10n_ar_afip_responsibility_type_id
  l10n_ar_formatted_vat
  l10n_ar_gross_income_number
  l10n_ar_gross_income_type
  l10n_ar_vat
  check_vat()
  ensure_vat()
  l10n_ar_identification_validation()
}
class "ResPartner" as odoo_src.odoo.addons.mail_plugin.models.res_partner.ResPartner {
  iap_enrich_info
  iap_search_domain
  create(vals_list)
  write(vals)
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ph.models.res_partner.ResPartner {
  branch_code
  first_name
  last_name
  middle_name
}
class "ResPartner" as odoo_src.odoo.addons.l10n_sg.models.res_partner.ResPartner {
  l10n_sg_unique_entity_number
}
class "ResPartner" as odoo_src.odoo.addons.l10n_latam_base.models.res_partner.ResPartner {
  l10n_latam_identification_type_id
  vat
  check_vat()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_uy.models.res_partner.ResPartner {
  check_vat()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_dk_oioubl.models.res_partner.ResPartner {
  invoice_edi_format
}
class "ResPartner" as odoo_src.odoo.addons.mrp_subcontracting.models.res_partner.ResPartner {
  bom_ids
  is_subcontractor
  picking_ids
  production_ids
  property_stock_subcontractor
}
class "ResPartner" as odoo_src.odoo.addons.mail.models.discuss.res_partner.ResPartner {
  channel_ids
  get_mention_suggestions_from_channel(channel_id, search, limit)
  search_for_channel_invite(search_term, channel_id, limit)
}
class "ResPartner" as odoo_src.odoo.addons.base_geolocalize.models.res_partner.ResPartner {
  date_localization
  geo_localize()
  write(vals)
}
class "ResPartner" as odoo_src.odoo.addons.payment.models.res_partner.ResPartner {
  payment_token_count
  payment_token_ids
}
class "ResPartner" as odoo_src.odoo.addons.base_vat.models.res_partner.ResPartner {
  perform_vies_validation
  vies_valid
  vies_vat_to_check
  check_vat()
  check_vat_al(vat)
  check_vat_br(vat)
  check_vat_ch(vat)
  check_vat_cr(vat)
  check_vat_de(vat)
  check_vat_ec(vat)
  check_vat_gr(vat)
  check_vat_gt(vat)
  check_vat_hu(vat)
  check_vat_id(vat)
  check_vat_ie(vat)
  check_vat_il(vat)
  check_vat_in(vat)
  check_vat_ma(vat)
  check_vat_mx(vat)
  check_vat_no(vat)
  check_vat_pe(vat)
  check_vat_ph(vat)
  check_vat_ro(vat)
  check_vat_ru(vat)
  check_vat_sa(vat)
  check_vat_t(vat)
  check_vat_tr(vat)
  check_vat_ua(vat)
  check_vat_uy(vat)
  check_vat_ve(vat)
  check_vat_vn(vat)
  create(vals_list)
  fix_eu_vat_number(country_id, vat)
  format_vat_ch(vat)
  format_vat_eu(vat)
  format_vat_sm(vat)
  is_valid_ruc_ec(vat)
  simple_vat_check(country_code, vat_number)
  write(values)
}
class "ResPartner" as odoo_src.odoo.addons.account_peppol.models.res_partner.ResPartner {
  available_peppol_eas : list
  available_peppol_edi_formats
  available_peppol_sending_methods
  invoice_sending_method
  peppol_eas
  peppol_verification_state
  button_account_peppol_check_partner_endpoint(company)
  create(vals_list)
  write(vals)
}
class "ResPartner" as odoo_src.odoo.addons.l10n_pe_pos.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_th.models.res_partner.ResPartner {
  l10n_th_branch_name
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ar_withholding.models.res_partner.ResPartner {
  l10n_ar_partner_tax_ids
}
class "ResPartner" as odoo_src.odoo.addons.partner_autocomplete.models.res_partner.ResPartner {
  additional_info
  partner_gid
  autocomplete(query, timeout)
  autocomplete_by_name(query, query_country_id, timeout)
  autocomplete_by_vat(vat, query_country_id, timeout)
  check_gst_in(vat)
  enrich_by_domain(domain, timeout)
  enrich_by_duns(duns, timeout)
  enrich_by_gst(gst, timeout)
  enrich_company(company_domain, partner_gid, vat, timeout)
  iap_partner_autocomplete_add_tags(unspsc_codes)
  read_by_vat(vat, timeout)
}
class "ResPartner" as odoo_src.odoo.addons.bus.models.res_partner.ResPartner {
  im_status
}
class "ResPartner" as odoo_src.odoo.addons.l10n_cl.models.res_country.ResPartner {
  l10n_cl_customs_abbreviation
  l10n_cl_customs_code
  l10n_cl_customs_name
}
class "ResPartner" as odoo_src.odoo.addons.l10n_cl.models.res_partner.ResPartner {
  l10n_cl_activity_description
  l10n_cl_sii_taxpayer_type
  create(vals_list)
  write(values)
}
class "ResPartner" as odoo_src.odoo.addons.loyalty.models.res_partner.ResPartner {
  loyalty_card_count
  action_view_loyalty_cards()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_jp_ubl_pint.models.res_partner.ResPartner {
  invoice_edi_format
}
class "ResPartner" as odoo_src.odoo.addons.hr_homeworking_calendar.models.res_partner.ResPartner {
  get_worklocation(start_date, end_date)
}
class "ResPartner" as odoo_src.odoo.addons.l10n_fr.models.res_partner.ResPartner {
  siret
}
class "ResPartner" as odoo_src.odoo.addons.l10n_es.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.res_partner.ResPartner {
  invoice_edi_format
  l10n_vn_edi_symbol
}
class "ResPartner" as odoo_src.odoo.addons.l10n_it_edi_doi.models.res_partner.ResPartner {
  l10n_it_edi_doi_ids
  l10n_it_edi_doi_action_open_declarations()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_nz.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_no.models.res_partner.ResPartner {
  l10n_no_bronnoysund_number
}
class "ResPartner" as odoo_src.odoo.addons.l10n_my_edi.models.res_partner.ResPartner {
  l10n_my_edi_display_tin_warning
  l10n_my_identification_number
  l10n_my_identification_number_placeholder
  l10n_my_identification_type
  l10n_my_tin_validation_state
  action_validate_tin()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ma.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_be.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_pl.models.res_partner.ResPartner {
  l10n_pl_links_with_customer
}
class "ResPartner" as odoo_src.odoo.addons.l10n_pe.models.res_partner.ResPartner {
  city_id
  l10n_pe_district
  l10n_pe_district_name
}
class "ResPartner" as odoo_src.odoo.addons.hr_holidays.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.point_of_sale.models.res_partner.ResPartner {
  pos_order_count
  pos_order_ids
  action_view_pos_order()
  open_commercial_entity()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.res_partner.ResPartner {
  l10n_eg_building_no
}
class "ResPartner" as odoo_src.odoo.addons.l10n_sg_ubl_pint.models.res_partner.ResPartner {
  invoice_edi_format
}
class "ResPartner" as odoo_src.odoo.addons.l10n_se.models.res_partner.ResPartner {
  l10n_se_check_vendor_ocr
  l10n_se_default_vendor_payment_ref
  onchange_l10n_se_default_vendor_payment_ref()
}
class "ResPartner" as odoo_src.odoo.addons.delivery.models.res_partner.ResPartner {
  property_delivery_carrier_id
}
class "ResPartner" as odoo_src.odoo.addons.l10n_id_efaktur.models.res_partner.ResPartner {
  l10n_id_kode_transaksi
  l10n_id_nik
  l10n_id_pkp
}
class "ResPartner" as odoo_src.odoo.addons.l10n_my_ubl_pint.models.res_partner.ResPartner {
  invoice_edi_format
  sst_registration_number
  ttx_registration_number
}
class "ResPartner" as odoo_src.odoo.addons.l10n_es_edi_verifactu.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ke_edi_tremol.models.res_partner.ResPartner {
  l10n_ke_exemption_number
}
class "ResPartner" as odoo_src.odoo.addons.l10n_tr_nilvera.models.res_partner.ResPartner {
  invoice_edi_format
  l10n_tr_nilvera_customer_alias_id
  l10n_tr_nilvera_customer_alias_ids
  l10n_tr_nilvera_customer_status
  check_nilvera_customer()
}
class "ResPartner" as odoo_src.odoo.addons.hr_homeworking.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.l10n_hu_edi.models.res_partner.ResPartner {
  l10n_hu_group_vat
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ro.models.res_partner.ResPartner {
  nrc
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ar_pos.models.res_partner.ResPartner {
}
class "ResPartner" as odoo_src.odoo.addons.account_edi_ubl_cii.models.res_partner.ResPartner {
  available_peppol_eas
  invoice_edi_format
  is_peppol_edi_format
  is_ubl_format
  peppol_eas
  peppol_endpoint
}
class "ResPartner" as odoo_src.odoo.addons.l10n_in_gstin_status.models.res_partner.ResPartner {
  l10n_in_gstin_verified_date
  l10n_in_gstin_verified_status
  action_l10n_in_verify_gstin_status()
}
class "ResPartner" as odoo_src.odoo.addons.account.models.partner.ResPartner {
  autopost_bills
  bank_account_count
  contract_ids
  credit
  credit_limit
  credit_to_invoice
  currency_id
  customer_rank
  days_sales_outstanding
  debit
  debit_limit
  display_invoice_edi_format
  display_invoice_template_pdf_report_id
  duplicate_bank_partner_ids
  duplicated_bank_account_partners_count
  fiscal_country_codes
  ignore_abnormal_invoice_amount
  ignore_abnormal_invoice_date
  invoice_edi_format
  invoice_edi_format_store
  invoice_ids
  invoice_sending_method
  invoice_template_pdf_report_id
  invoice_warn
  invoice_warn_msg
  is_coa_installed
  journal_item_count
  name
  partner_company_registry_placeholder
  partner_vat_placeholder
  property_account_payable_id
  property_account_position_id
  property_account_receivable_id
  property_inbound_payment_method_line_id
  property_outbound_payment_method_line_id
  property_payment_term_id
  property_supplier_payment_term_id
  ref_company_ids
  show_credit_limit
  supplier_invoice_count
  supplier_rank
  total_invoiced
  trust
  use_partner_credit_limit
  action_open_business_doc()
  action_view_partner_invoices()
  action_view_partner_with_same_bank()
  can_edit_vat()
  create(vals_list)
  get_partner_localisation_fields_required_to_invoice(country_id)
  write(vals)
}
class "ResPartner" as odoo_src.odoo.addons.fleet.models.res_partner.ResPartner {
  plan_to_change_bike
  plan_to_change_car
}
class "ResPartner" as odoo_src.odoo.addons.l10n_my_edi_extended.models.res_partner.ResPartner {
  l10n_my_edi_industrial_classification
  l10n_my_edi_malaysian_tin
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ro_edi.models.res_partner.ResPartner {
  invoice_edi_format
}
class "ResPartner" as odoo_src.odoo.addons.l10n_co.models.res_partner.ResPartner {
  check_vat()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_anz_ubl_pint.models.res_partner.ResPartner {
  invoice_edi_format
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ca.models.res_partner.ResPartner {
  l10n_ca_pst
}
class "ResPartner" as odoo_src.odoo.addons.l10n_tr_nilvera_edispatch.models.res_partner.ResPartner {
  l10n_tr_nilvera_edispatch_customs_zip
}
class "ResPartner" as odoo_src.odoo.addons.event.models.res_partner.ResPartner {
  event_count
  static_map_url
  static_map_url_is_valid
  action_event_view()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_ec.models.res_partner.ResPartner {
  l10n_ec_vat_validation
  check_vat()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_it_edi.models.res_partner.ResPartner {
  invoice_edi_format
  l10n_it_codice_fiscale
  l10n_it_pa_index
  l10n_it_pec_email
  validate_codice_fiscale()
}
class "ResPartner" as odoo_src.odoo.addons.l10n_in.models.res_partner.ResPartner {
  display_pan_warning
  l10n_in_gst_state_warning
  l10n_in_gst_treatment
  l10n_in_pan
  state_id
  action_update_state_as_per_gstin()
  check_vat_in(vat)
  onchange_vat()
}
class "ResPartnerAutocompleteSync" as odoo_src.odoo.addons.partner_autocomplete.models.res_partner_autocomplete_sync.ResPartnerAutocompleteSync {
  partner_id
  synched
  {abstract}add_to_queue(partner_id)
  {abstract}start_sync(batch_size)
}
class "ResPartnerBank" as odoo_src.odoo.addons.account_qr_code_emv.models.res_bank.ResPartnerBank {
  display_qr_setting
  include_reference
  proxy_type
  proxy_value
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_mx.models.res_bank.ResPartnerBank {
  fiscal_country_codes
  l10n_mx_edi_clabe
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_br.models.res_partner_bank.ResPartnerBank {
  proxy_type
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_kh.models.res_bank.ResPartnerBank {
  l10n_kh_merchant_id
  proxy_type
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_au.models.res_partner_bank.ResPartnerBank {
  aba_bsb
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_ar.models.res_partner_bank.ResPartnerBank {
  retrieve_acc_type(acc_number)
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_sg.models.res_bank.ResPartnerBank {
  proxy_type
}
class "ResPartnerBank" as odoo_src.odoo.addons.base_iban.models.res_partner_bank.ResPartnerBank {
  check_iban(iban)
  create(vals_list)
  get_bban()
  retrieve_acc_type(acc_number)
  write(vals)
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_th.models.res_bank.ResPartnerBank {
  proxy_type
}
class "ResPartnerBank" as odoo_src.odoo.addons.account_qr_code_sepa.models.res_bank.ResPartnerBank {
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_hk.models.res_bank.ResPartnerBank {
  proxy_type
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_us.models.res_partner_bank.ResPartnerBank {
  aba_routing
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_vn.models.res_bank.ResPartnerBank {
  proxy_type
}
class "ResPartnerBank" as odoo_src.odoo.addons.hr.models.res_partner.ResPartnerBank {
}
class "ResPartnerBank" as odoo_src.odoo.addons.account.models.res_partner_bank.ResPartnerBank {
  acc_holder_name
  acc_number
  active
  allow_out_payment
  bank_id
  currency_id
  duplicate_bank_partner_ids
  has_iban_warning
  has_money_transfer_warning
  journal_id
  lock_trust_fields
  money_transfer_service
  partner_country_name
  partner_customer_rank
  partner_id
  partner_supplier_rank
  related_moves
  user_has_group_validate_bank_account
  build_qr_code_base64(amount, free_communication, structured_communication, currency, debtor_partner, qr_method, silent_errors)
  build_qr_code_url(amount, free_communication, structured_communication, currency, debtor_partner, qr_method, silent_errors)
  create(vals_list)
  default_get(fields_list)
  get_available_qr_methods_in_sequence()
  unlink()
  write(vals)
}
class "ResPartnerBank" as odoo_src.odoo.addons.l10n_ch.models.res_bank.ResPartnerBank {
  l10n_ch_display_qr_bank_options
  l10n_ch_qr_iban
  create(vals_list)
  write(vals)
}
class "ResPartnerBank" as odoo_src.odoo.addons.base.models.res_bank.ResPartnerBank {
  acc_holder_name
  acc_number
  acc_type
  active
  allow_out_payment
  bank_bic
  bank_id
  bank_name
  company_id
  country_code
  currency_id
  partner_id
  sanitized_acc_number
  sequence
  action_archive_bank()
  get_supported_account_types()
  retrieve_acc_type(acc_number)
  unlink()
}
class "ResPartnerIap" as odoo_src.odoo.addons.mail_plugin.models.res_partner_iap.ResPartnerIap {
  iap_enrich_info
  iap_search_domain
  partner_id
}
class "ResPartnerIndustry" as odoo_src.odoo.addons.base.models.res_partner.ResPartnerIndustry {
  active
  full_name
  name
}
class "ResPartnerMondialRelay" as odoo_src.odoo.addons.delivery_mondialrelay.models.res_partner.ResPartnerMondialRelay {
  is_mondialrelay
}
class "ResUsers" as odoo_src.odoo.addons.auth_signup.models.res_users.ResUsers {
  state
  action_reset_password()
  authenticate(db, credential, user_agent_env)
  copy(default)
  create(vals_list)
  reset_password(login)
  send_unregistered_user_reminder()
  signup(values, token)
  web_create_users(emails)
}
class "ResUsers" as odoo_src.odoo.addons.hr_holidays_attendance.models.res_users.ResUsers {
  SELF_READABLE_FIELDS
  request_overtime
}
class "ResUsers" as odoo_src.odoo.addons.mail.models.discuss.res_users.ResUsers {
  create(vals_list)
  unlink()
  write(vals)
}
class "ResUsers" as odoo_src.odoo.addons.hr_recruitment.models.res_users.ResUsers {
}
class "ResUsers" as odoo_src.odoo.addons.digest.models.res_users.ResUsers {
  create(vals_list)
}
class "ResUsers" as odoo_src.odoo.addons.lunch.models.res_users.ResUsers {
  favorite_lunch_product_ids
  last_lunch_location_id
}
class "ResUsers" as odoo_src.odoo.addons.bus.models.res_users.ResUsers {
  im_status
}
class "ResUsers" as odoo_src.odoo.addons.auth_oauth.models.res_users.ResUsers {
  oauth_access_token
  oauth_provider_id
  oauth_uid
  auth_oauth(provider, params)
}
class "ResUsers" as odoo_src.odoo.addons.base_import.models.base_import.ResUsers {
}
class "ResUsers" as odoo_src.odoo.addons.hr_gamification.models.res_users.ResUsers {
  badge_ids
  goal_ids
}
class "ResUsers" as odoo_src.odoo.addons.point_of_sale.models.res_users.ResUsers {
}
class "ResUsers" as odoo_src.odoo.addons.auth_password_policy.models.res_users.ResUsers {
  get_password_policy()
}
class "ResUsers" as odoo_src.odoo.addons.base_setup.models.res_users.ResUsers {
  web_create_users(emails)
}
class "ResUsersDeletion" as odoo_src.odoo.addons.base.models.res_users_deletion.ResUsersDeletion {
  state
  user_id
  user_id_int
}
class "ResUsersLog" as odoo_src.odoo.addons.hr_presence.models.res_users_log.ResUsersLog {
  create_uid
  ip
}
class "ResUsersLog" as odoo_src.odoo.addons.base.models.res_users.ResUsersLog {
}
class "ResUsersSettings" as odoo_src.odoo.addons.im_livechat.models.res_users_settings.ResUsersSettings {
  livechat_lang_ids
  livechat_username
}
class "ResUsersSettings" as odoo_src.odoo.addons.google_calendar.models.res_users_settings.ResUsersSettings {
  google_calendar_cal_id
  google_calendar_rtoken
  google_calendar_sync_token
  google_calendar_token
  google_calendar_token_validity
  google_synchronization_stopped
}
class "ResUsersSettings" as odoo_src.odoo.addons.calendar.models.res_users_settings.ResUsersSettings {
  calendar_default_privacy
}
class "ResUsersSettings" as odoo_src.odoo.addons.mail.models.res_users_settings.ResUsersSettings {
  channel_notifications
  is_discuss_sidebar_category_channel_open
  is_discuss_sidebar_category_chat_open
  mute_until_dt
  push_to_talk_key
  use_push_to_talk
  voice_active_duration
  volume_settings_ids
  set_custom_notifications(custom_notifications)
  set_res_users_settings(new_settings)
  set_volume_setting(partner_id, volume, guest_id)
}
class "ResUsersSettings" as odoo_src.odoo.addons.bus.models.res_users_settings.ResUsersSettings {
}
class "ResUsersSettings" as odoo_src.odoo.addons.microsoft_calendar.models.res_users_settings.ResUsersSettings {
  microsoft_calendar_sync_token
  microsoft_last_sync_date
  microsoft_synchronization_stopped
}
class "ResUsersSettings" as odoo_src.odoo.addons.base.models.res_users_settings.ResUsersSettings {
  user_id
  set_res_users_settings(new_settings)
}
class "ResUsersSettingsVolumes" as odoo_src.odoo.addons.mail.models.res_users_settings_volumes.ResUsersSettingsVolumes {
  guest_id
  partner_id
  user_setting_id
  volume
  init()
}
class "ResetGoogleAccount" as odoo_src.odoo.addons.google_calendar.wizard.reset_account.ResetGoogleAccount {
  delete_policy
  sync_policy
  user_id
  reset_account()
}
class "ResetMicrosoftAccount" as odoo_src.odoo.addons.microsoft_calendar.wizard.reset_account.ResetMicrosoftAccount {
  delete_policy
  sync_policy
  user_id
  reset_account()
}
class "ResetViewArchWizard" as odoo_src.odoo.addons.base.models.ir_ui_view.ResetViewArchWizard {
  arch_diff
  arch_to_compare
  compare_view_id
  has_diff
  reset_mode
  view_id
  view_name
  default_get(fields)
  reset_view_button()
}
class "Resource" as odoo_src.odoo.addons.hr_skills.models.resource_resource.Resource {
  employee_skill_ids
}
class "ResourceCalendar" as odoo_src.odoo.addons.hr_work_entry_contract.models.resource_calendar.ResourceCalendar {
}
class "ResourceCalendar" as odoo_src.odoo.addons.hr_holidays.models.resource.ResourceCalendar {
  associated_leaves_count
}
class "ResourceCalendar" as odoo_src.odoo.addons.hr.models.resource_calendar.ResourceCalendar {
}
class "ResourceCalendar" as odoo_src.odoo.addons.hr_contract.models.resource.ResourceCalendar {
  contracts_count
  action_open_contracts()
  transfer_leaves_to(other_calendar, resources, from_date)
}
class "ResourceCalendarAttendance" as odoo_src.odoo.addons.hr_work_entry.models.resource.ResourceCalendarAttendance {
  work_entry_type_id
}
class "ResourceCalendarLeave" as odoo_src.odoo.addons.hr_work_entry.models.resource.ResourceCalendarLeave {
  work_entry_type_id
}
class "ResourceCalendarLeaves" as odoo_src.odoo.addons.hr_contract.models.resource_calendar_leaves.ResourceCalendarLeaves {
}
class "ResourceResource" as odoo_src.odoo.addons.hr.models.resource.ResourceResource {
  department_id
  employee_id
  hr_icon_display
  job_title
  show_hr_icon_display
  user_id
  work_email
  work_phone
}
class "ResourceResource" as odoo_src.odoo.addons.hr_contract.models.resource_resource.ResourceResource {
}
class "ResumeLine" as odoo_src.odoo.addons.hr_skills_survey.models.hr_resume_line.ResumeLine {
  department_id
  display_type
  expiration_status
  survey_id
}
class "ResumeLine" as odoo_src.odoo.addons.hr_skills_slides.models.hr_resume_line.ResumeLine {
  channel_id
  course_url
  display_type
}
class "ResumeLine" as odoo_src.odoo.addons.hr_skills.models.hr_resume_line.ResumeLine {
  date_end
  date_start
  description
  display_type
  employee_id
  line_type_id
  name
}
class "ResumeLineType" as odoo_src.odoo.addons.hr_skills.models.hr_resume_line_type.ResumeLineType {
  name
  sequence
}
class "ReturnPicking" as odoo_src.odoo.addons.mrp_subcontracting.wizard.stock_picking_return.ReturnPicking {
}
class "ReturnPickingLine" as odoo_src.odoo.addons.mrp_subcontracting.wizard.stock_picking_return.ReturnPickingLine {
}
class "Routing" as odoo_src.odoo.addons.http_routing.controllers.main.Routing {
  get_website_translations(unique, lang, mods)
}
class "RtcController" as odoo_src.odoo.addons.mail.controllers.discuss.rtc.RtcController {
  audio_worklet_processor()
  channel_call_cancel_invitation(channel_id, member_ids)
  channel_call_join(channel_id, check_rtc_session_ids, camera)
  channel_call_leave(channel_id)
  channel_ping(channel_id, rtc_session_id, check_rtc_session_ids)
  session_call_notify(peer_notifications)
  session_update_and_broadcast(session_id, values)
}
class "SInvoiceSymbol" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.sinvoice.SInvoiceSymbol {
  invoice_template_id
  name
}
class "SInvoiceTemplate" as odoo_src.odoo.addons.l10n_vn_edi_viettel.models.sinvoice.SInvoiceTemplate {
  invoice_symbols_ids
  name
  template_invoice_type
}
class "SMSComposer" as odoo_src.odoo.addons.mass_mailing_sms.wizard.sms_composer.SMSComposer {
  mailing_id
  mass_sms_allow_unsubscribe
  utm_campaign_id
}
class "SMTPConnection" as odoo_src.odoo.addons.base.models.ir_mail_server.SMTPConnection {
  from_filter
  smtp_from : NoneType
}
class "SaleAdvancePaymentInv" as odoo_src.odoo.addons.l10n_in_sale.wizard.sale_make_invoice_advance.SaleAdvancePaymentInv {
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_in_sale.models.sale_order.SaleOrder {
  l10n_in_gst_treatment
  l10n_in_reseller_partner_id
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_ec_website_sale.models.sale_order.SaleOrder {
}
class "SaleOrder" as odoo_src.odoo.addons.mass_mailing_sale.models.sale_order.SaleOrder {
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_it_edi_doi.models.sale_order.SaleOrder {
  l10n_it_edi_doi_date
  l10n_it_edi_doi_id
  l10n_it_edi_doi_not_yet_invoiced
  l10n_it_edi_doi_use
  l10n_it_edi_doi_warning
  action_confirm()
  action_open_declaration_of_intent()
  action_quotation_send()
  action_quotation_sent()
  copy_data(default)
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_it_edi_sale.models.sale_order.SaleOrder {
  l10n_it_cig
  l10n_it_cup
  l10n_it_origin_document_date
  l10n_it_origin_document_name
  l10n_it_origin_document_type
  l10n_it_partner_pa
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_fi_sale.models.sale.SaleOrder {
  compute_payment_reference_finnish(number)
  get_finnish_check_digit(base_number)
  number2numeric(number)
  write(values)
}
class "SaleOrder" as odoo_src.odoo.addons.event_sale.models.sale_order.SaleOrder {
  attendee_count
  action_confirm()
  action_view_attendee_list()
  write(vals)
}
class "SaleOrder" as odoo_src.odoo.addons.event_booth_sale.models.sale_order.SaleOrder {
  event_booth_count
  event_booth_ids
  action_confirm()
  action_view_booth_list()
}
class "SaleOrder" as odoo_src.odoo.addons.delivery.models.sale_order.SaleOrder {
  carrier_id
  delivery_message
  delivery_set
  is_all_service
  pickup_location_data
  recompute_delivery_price
  shipping_weight
  action_open_delivery_wizard()
  onchange_order_line()
  set_delivery_line(carrier, amount)
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_br_sales.models.sale_order.SaleOrder {
}
class "SaleOrder" as odoo_src.odoo.addons.l10n_ar_website_sale.models.sale_order.SaleOrder {
}
class "SaleOrderLine" as odoo_src.odoo.addons.event_sale.models.sale_order_line.SaleOrderLine {
  event_id
  event_ticket_id
  registration_ids
}
class "SaleOrderLine" as odoo_src.odoo.addons.event_booth_sale.models.sale_order_line.SaleOrderLine {
  event_booth_category_id
  event_booth_ids
  event_booth_pending_ids
  event_booth_registration_ids
  event_id : NoneType
  is_event_booth
}
class "SaleOrderLine" as odoo_src.odoo.addons.delivery.models.sale_order_line.SaleOrderLine {
  is_delivery
  product_qty
  recompute_delivery_price
  unlink()
}
class "SaleOrderMondialRelay" as odoo_src.odoo.addons.delivery_mondialrelay.models.sale_order.SaleOrderMondialRelay {
  action_confirm()
}
class "SassStylesheetAsset" as odoo_src.odoo.addons.base.models.assetsbundle.SassStylesheetAsset {
  indent : NoneType
  reindent : str
  rx_indent
  get_command()
  get_source()
  minify()
}
class "SavepointCaseWithUserDemo" as odoo_src.odoo.addons.base.tests.common.SavepointCaseWithUserDemo {
  setUpClass()
}
class "ScheduledMessage" as odoo_src.odoo.addons.mail.models.mail_scheduled_message.ScheduledMessage {
  attachment_ids
  author_id
  body
  is_note
  model
  notification_parameters
  partner_ids
  res_id
  scheduled_date
  subject
  create(vals_list)
  open_edit_form()
  post_message()
  unlink()
  write(vals)
}
class "ScssStylesheetAsset" as odoo_src.odoo.addons.base.models.assetsbundle.ScssStylesheetAsset {
  bootstrap_path
  output_style : str
  precision : int
  compile(source)
  get_command()
}
class "SelectionConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.SelectionConverter {
  get_available_options()
  record_to_html(record, field_name, options)
  value_to_html(value, options)
}
class "SequenceMixin" as odoo_src.odoo.addons.account.models.sequence_mixin.SequenceMixin {
  month : str
  prefix : str
  prefix2 : str
  prefix3 : str
  seq : str
  sequence_number
  sequence_prefix
  suffix : str
  year : str
  year_end : str
  init()
  write(vals)
}
class "Serial" as odoo_src.odoo.addons.hw_escpos.escpos.printer.Serial {
  baudrate : int
  bytesize : int
  devfile : str
  device
  timeout : int
  open()
}
class "Serialized" as odoo_src.odoo.addons.base_sparse_field.models.fields.Serialized {
  column_type : tuple
  prefetch : bool
  type : str
  convert_to_cache(value, record, validate)
  convert_to_column_insert(value, record, values, validate)
  convert_to_record(value, record)
}
class "ServerAction" as odoo_src.odoo.addons.base_automation.models.ir_actions_server.ServerAction {
  base_automation_id
  name
  usage
}
class "ServerActions" as odoo_src.odoo.addons.mail.models.ir_actions_server.ServerActions {
  activity_date_deadline_range
  activity_date_deadline_range_type
  activity_note
  activity_summary
  activity_type_id
  activity_user_field_name
  activity_user_id
  activity_user_type
  mail_post_autofollow
  mail_post_method
  partner_ids
  state
  template_id
}
class "Session" as odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.TestIrMailServerSMTPD.setUpClass.Session {
  login_data
}
class "SessionWebsite" as odoo_src.odoo.addons.http_routing.controllers.main.SessionWebsite {
  logout(redirect)
}
class "SetupBarBankConfigWizard" as odoo_src.odoo.addons.account.wizard.setup_wizards.SetupBarBankConfigWizard {
  bank_bic
  company_id
  linked_journal_id
  new_journal_name
  num_journals_without_account
  res_partner_bank_id
  create(vals_list)
  default_linked_journal_id()
  set_linked_journal_id()
  validate()
}
class "SignedIntConverter" as odoo_src.odoo.addons.base.models.ir_http.SignedIntConverter {
  num_convert : int
  regex : str
}
class "<color:red>SignupError</color>" as odoo_src.odoo.addons.auth_signup.models.res_partner.SignupError {
}
class "Skill" as odoo_src.odoo.addons.hr_skills.models.hr_skill.Skill {
  color
  name
  sequence
  skill_type_id
}
class "SkillLevel" as odoo_src.odoo.addons.hr_skills.models.hr_skill_level.SkillLevel {
  default_level
  level_progress
  name
  skill_type_id
  create(vals_list)
  write(vals)
}
class "SkillType" as odoo_src.odoo.addons.hr_skills.models.hr_skill_type.SkillType {
  active
  color
  name
  skill_ids
  skill_level_ids
  copy_data(default)
}
class "SkillsTestUI" as odoo_src.odoo.addons.hr_skills.tests.test_ui.SkillsTestUI {
  test_ui()
}
class "SlideChannelPartner" as odoo_src.odoo.addons.hr_skills_slides.models.slide_channel.SlideChannelPartner {
}
class "SmsSms" as odoo_src.odoo.addons.mass_mailing_sms.models.sms_sms.SmsSms {
  mailing_id
  mailing_trace_ids
}
class "SmsTemplate" as odoo_src.odoo.addons.event_sms.models.sms_template.SmsTemplate {
  unlink()
}
class "SmsTracker" as odoo_src.odoo.addons.mass_mailing_sms.models.sms_tracker.SmsTracker {
  SMS_STATE_TO_TRACE_STATUS : dict
  mailing_trace_id
}
class "SriPayment" as odoo_src.odoo.addons.l10n_ec.models.l10n_ec_sri_payment.SriPayment {
  active
  code
  name
}
class "Stage" as odoo_src.odoo.addons.crm.models.crm_stage.Stage {
  fold
  is_won
  name
  requirements
  sequence
  team_count
  team_id
  default_get(fields)
}
class "StockForecasted" as odoo_src.odoo.addons.mrp.report.stock_forecasted.StockForecasted {
}
class "StockLandedCost" as odoo_src.odoo.addons.mrp_landed_costs.models.stock_landed_cost.StockLandedCost {
  mrp_production_ids
  target_model
}
class "StockLocation" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_location.StockLocation {
  is_subcontracting_location
  subcontractor_ids
  create(vals_list)
  write(values)
}
class "StockLot" as odoo_src.odoo.addons.mrp.models.stock_lot.StockLot {
}
class "StockMove" as odoo_src.odoo.addons.l10n_in_purchase_stock.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.l10n_in_sale_stock.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_move.StockMove {
  is_subcontract
  show_subcontracting_details_visible
  action_show_details()
  action_show_subcontract_details()
  copy_data(default)
  create(vals_list)
  write(values)
}
class "StockMove" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.models.stock_move.StockMove {
  company_currency_id
  ewaybill_price_unit
  ewaybill_tax_ids
  l10n_in_ewaybill_id
}
class "StockMove" as odoo_src.odoo.addons.mrp.models.stock_move.StockMove {
  allowed_operation_ids
  bom_line_id
  byproduct_id
  consume_unbuild_id
  cost_share
  created_production_id
  description_bom_line
  is_done
  manual_consumption
  operation_id
  order_finished_lot_id
  product_qty_available
  product_virtual_available
  production_id
  quantity
  raw_material_production_id
  should_consume_qty
  unbuild_id
  unit_factor
  workorder_id
  action_add_from_catalog_byproduct()
  action_add_from_catalog_raw()
  action_explode()
  action_open_reference()
  action_show_details()
  create(vals_list)
  default_get(fields_list)
  write(vals)
}
class "StockMove" as odoo_src.odoo.addons.mrp_account.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.l10n_in_stock.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_subcontracting_purchase.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_repair.models.repair.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_repair.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.point_of_sale.models.stock_picking.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_subcontracting_account.models.stock_move.StockMove {
}
class "StockMove" as odoo_src.odoo.addons.mrp_subcontracting_landed_costs.models.stock_move.StockMove {
}
class "StockMoveLine" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_move_line.StockMoveLine {
  location_id
  write(vals)
}
class "StockMoveLine" as odoo_src.odoo.addons.mrp.models.stock_move.StockMoveLine {
  description_bom_line
  production_id
  workorder_id
  create(values)
  write(vals)
}
class "StockPicking" as odoo_src.odoo.addons.l10n_in_purchase_stock.models.stock_picking.StockPicking {
}
class "StockPicking" as odoo_src.odoo.addons.l10n_in_sale_stock.models.stock_picking.StockPicking {
}
class "StockPicking" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_picking.StockPicking {
  display_action_record_components
  move_line_ids_without_package
  action_record_components()
}
class "StockPicking" as odoo_src.odoo.addons.l10n_it_stock_ddt.models.stock_picking.StockPicking {
  l10n_it_ddt_number
  l10n_it_parcels
  l10n_it_show_print_ddt_button
  l10n_it_transport_method
  l10n_it_transport_method_details
  l10n_it_transport_reason
}
class "StockPicking" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.models.stock_picking.StockPicking {
  l10n_in_ewaybill_id
  action_l10n_in_ewaybill_create()
  action_open_l10n_in_ewaybill()
}
class "StockPicking" as odoo_src.odoo.addons.mrp.models.stock_picking.StockPicking {
  has_kits
  production_count
  production_ids
  action_detailed_operations()
  action_view_mrp_production()
  get_action_click_graph()
}
class "StockPicking" as odoo_src.odoo.addons.l10n_in_stock.models.stock_picking.StockPicking {
}
class "StockPicking" as odoo_src.odoo.addons.mrp_subcontracting_purchase.models.stock_picking.StockPicking {
  subcontracting_source_purchase_count
  action_view_subcontracting_source_purchase()
}
class "StockPicking" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.stock_picking.StockPicking {
}
class "StockPicking" as odoo_src.odoo.addons.delivery_stock_picking_batch.models.stock_picking.StockPicking {
}
class "StockPicking" as odoo_src.odoo.addons.point_of_sale.models.stock_picking.StockPicking {
  pos_order_id
  pos_session_id
}
class "StockPicking" as odoo_src.odoo.addons.mrp_subcontracting_account.models.stock_picking.StockPicking {
  action_view_stock_valuation_layers()
}
class "StockPicking" as odoo_src.odoo.addons.l10n_tr_nilvera_edispatch.models.stock_picking.StockPicking {
  l10n_tr_nilvera_buyer_id
  l10n_tr_nilvera_buyer_originator_id
  l10n_tr_nilvera_carrier_id
  l10n_tr_nilvera_delivery_date
  l10n_tr_nilvera_delivery_notes
  l10n_tr_nilvera_delivery_printed_number
  l10n_tr_nilvera_dispatch_state
  l10n_tr_nilvera_dispatch_type
  l10n_tr_nilvera_driver_ids
  l10n_tr_nilvera_edispatch_warnings
  l10n_tr_nilvera_seller_supplier_id
  l10n_tr_nilvera_trailer_plate_ids
  l10n_tr_vehicle_plate
  action_generate_l10n_tr_edispatch_xml(is_list)
  action_mark_l10n_tr_edispatch_status()
  button_validate()
}
class "StockPickingBatch" as odoo_src.odoo.addons.l10n_ro_edi_stock_batch.models.stock_picking_batch.StockPickingBatch {
  l10n_ro_edi_stock_available_end_loc_types
  l10n_ro_edi_stock_available_operation_scopes
  l10n_ro_edi_stock_available_start_loc_types
  l10n_ro_edi_stock_document_ids
  l10n_ro_edi_stock_document_uit
  l10n_ro_edi_stock_enable
  l10n_ro_edi_stock_enable_amend
  l10n_ro_edi_stock_enable_fetch
  l10n_ro_edi_stock_enable_send
  l10n_ro_edi_stock_end_bcp
  l10n_ro_edi_stock_end_customs_office
  l10n_ro_edi_stock_end_loc_type
  l10n_ro_edi_stock_fields_readonly
  l10n_ro_edi_stock_operation_scope
  l10n_ro_edi_stock_operation_type
  l10n_ro_edi_stock_remarks
  l10n_ro_edi_stock_start_bcp
  l10n_ro_edi_stock_start_customs_office
  l10n_ro_edi_stock_start_loc_type
  l10n_ro_edi_stock_state
  l10n_ro_edi_stock_trailer_1_number
  l10n_ro_edi_stock_trailer_2_number
  l10n_ro_edi_stock_vehicle_number
  action_done()
  action_l10n_ro_edi_stock_fetch_status()
  action_l10n_ro_edi_stock_send_etransport()
}
class "StockPickingBatch" as odoo_src.odoo.addons.delivery_stock_picking_batch.models.stock_picking_batch.StockPickingBatch {
}
class "StockPickingType" as odoo_src.odoo.addons.l10n_it_stock_ddt.models.stock_picking.StockPickingType {
  l10n_it_ddt_sequence_id
  create(vals_list)
  write(vals)
}
class "StockPickingType" as odoo_src.odoo.addons.mrp.models.stock_picking.StockPickingType {
  auto_print_done_mrp_lot
  auto_print_done_mrp_product_labels
  auto_print_done_production_order
  auto_print_generated_mrp_lot
  auto_print_mrp_reception_report
  auto_print_mrp_reception_report_labels
  code
  count_mo_in_progress
  count_mo_late
  count_mo_to_close
  count_mo_todo
  count_mo_waiting
  done_mrp_lot_label_to_print
  generated_mrp_lot_label_to_print
  mrp_product_label_to_print
  use_create_components_lots
  get_mrp_stock_picking_action_picking_type()
}
class "StockPickingType" as odoo_src.odoo.addons.delivery_stock_picking_batch.models.stock_picking.StockPickingType {
  batch_group_by_carrier
  batch_max_weight
  weight_uom_name
}
class "StockPickingType" as odoo_src.odoo.addons.point_of_sale.models.stock_picking.StockPickingType {
}
class "StockPickingType" as odoo_src.odoo.addons.l10n_tr_nilvera_edispatch.models.stock_picking_type.StockPickingType {
}
class "StockQuant" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_quant.StockQuant {
  is_subcontract
}
class "StockQuant" as odoo_src.odoo.addons.mrp.models.stock_quant.StockQuant {
}
class "StockRule" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_rule.StockRule {
}
class "StockRule" as odoo_src.odoo.addons.mrp.models.stock_rule.StockRule {
  action
}
class "StockRule" as odoo_src.odoo.addons.mrp_subcontracting_purchase.models.stock_rule.StockRule {
}
class "StockRule" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.stock_rule.StockRule {
}
class "StockRule" as odoo_src.odoo.addons.point_of_sale.models.stock_rule.StockRule {
}
class "StockScrap" as odoo_src.odoo.addons.mrp.models.stock_scrap.StockScrap {
  bom_id
  location_id
  product_is_kit
  product_template
  production_id
  scrap_qty : int
  workorder_id
  do_replenish(values)
}
class "StockValuationLayer" as odoo_src.odoo.addons.mrp_account.models.stock_valuation_layer.StockValuationLayer {
}
class "StockValuationLayer" as odoo_src.odoo.addons.mrp_subcontracting_purchase.models.stock_valuation_layer.StockValuationLayer {
}
class "StockWarehouse" as odoo_src.odoo.addons.mrp_subcontracting.models.stock_warehouse.StockWarehouse {
  subcontracting_mto_pull_id
  subcontracting_pull_id
  subcontracting_resupply_type_id
  subcontracting_route_id
  subcontracting_to_resupply
  subcontracting_type_id
  create(vals_list)
  get_rules_dict()
  write(vals)
}
class "StockWarehouse" as odoo_src.odoo.addons.mrp.models.stock_warehouse.StockWarehouse {
  manu_type_id
  manufacture_mto_pull_id
  manufacture_pull_id
  manufacture_steps
  manufacture_to_resupply
  pbm_loc_id
  pbm_mto_pull_id
  pbm_route_id
  pbm_type_id
  sam_loc_id
  sam_rule_id
  sam_type_id
  get_rules_dict()
  write(vals)
}
class "StockWarehouse" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.stock_warehouse.StockWarehouse {
  subcontracting_dropshipping_pull_id
  subcontracting_dropshipping_to_resupply
  create(vals_list)
  update_global_route_dropship_subcontractor()
  write(vals)
}
class "StockWarehouseOrderpoint" as odoo_src.odoo.addons.mrp.models.stock_orderpoint.StockWarehouseOrderpoint {
  bom_id
  manufacturing_visibility_days
  show_bom
}
class "StockWarehouseOrderpoint" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.models.stock_orderpoint.StockWarehouseOrderpoint {
}
class "StockWarnInsufficientQtyUnbuild" as odoo_src.odoo.addons.mrp.wizard.stock_warn_insufficient_qty.StockWarnInsufficientQtyUnbuild {
  unbuild_id
  action_done()
}
class "Store" as odoo_src.odoo.addons.mail.tools.discuss.Store {
  data : dict
  add()
  get_result()
  many()
  many_ids()
  one()
  one_id()
}
class "StripeCommon" as odoo_src.odoo.addons.payment_stripe.tests.common.StripeCommon {
  setUpClass()
}
class "StripeController" as odoo_src.odoo.addons.payment_stripe.controllers.main.StripeController {
  WEBHOOK_AGE_TOLERANCE : int
  stripe_apple_pay_get_domain_association_file()
  stripe_return()
  stripe_webhook()
}
class "StripeTest" as odoo_src.odoo.addons.payment_stripe.tests.test_stripe.StripeTest {
  test_create_account_link_pass_required_parameters()
  test_do_not_create_webhook_if_already_done()
  test_onboarding_action_redirect_to_url()
  test_only_create_webhook_if_not_already_done()
  test_processing_values()
  test_tx_state_after_send_capture_request()
  test_tx_state_after_send_void_request()
  test_webhook_notification_confirms_transaction()
  test_webhook_notification_tokenizes_payment_method()
  test_webhook_notification_triggers_signature_check()
}
class "StructuredReferenceTest" as odoo_src.odoo.addons.account.tests.test_structured_reference.StructuredReferenceTest {
  test_structured_reference()
  test_structured_reference_be()
  test_structured_reference_fi()
  test_structured_reference_iso()
  test_structured_reference_nl()
  test_structured_reference_no_se()
  test_structured_reference_si()
}
class "StyleStack" as odoo_src.odoo.addons.hw_escpos.escpos.escpos.StyleStack {
  cmds : dict
  defaults : dict
  stack : list
  types : dict
  enforce_type(attr, val)
  get(style)
  pop()
  push(style)
  set(style)
  to_escpos()
}
class "StylesheetAsset" as odoo_src.odoo.addons.base.models.assetsbundle.StylesheetAsset {
  bundle_version
  rtl : bool
  rx_charset
  rx_import
  rx_sourceMap
  rx_url
  get_source()
  minify()
  unique_descriptor()
}
class "SupplierInfo" as odoo_src.odoo.addons.mrp_subcontracting.models.product.SupplierInfo {
  is_subcontractor
}
class "SurveyInvite" as odoo_src.odoo.addons.hr_recruitment_survey.wizard.survey_invite.SurveyInvite {
  applicant_id
  action_invite()
}
class "SurveySurvey" as odoo_src.odoo.addons.hr_skills_survey.models.survey_survey.SurveySurvey {
  certification_validity_months
}
class "SurveySurvey" as odoo_src.odoo.addons.hr_recruitment_survey.models.survey_survey.SurveySurvey {
  allowed_survey_types
  hr_job_ids
  survey_type
  action_survey_user_input_completed()
  get_formview_id(access_uid)
}
class "SurveyUserInput" as odoo_src.odoo.addons.hr_skills_survey.models.survey_user.SurveyUserInput {
}
class "SurveyUserInput" as odoo_src.odoo.addons.hr_recruitment_survey.models.survey_user_input.SurveyUserInput {
  applicant_id
}
class "SwissSetupBarBankConfigWizard" as odoo_src.odoo.addons.l10n_ch.wizard.setup_wizards.SwissSetupBarBankConfigWizard {
  l10n_ch_display_qr_bank_options
  l10n_ch_qr_iban
}
class "TEST_SMTP" as odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.TestIrMailServerSMTPD.setUpClass.TEST_SMTP {
  starttls()
}
class "TEST_SMTP_SSL" as odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.TestIrMailServerSMTPD.setUpClass.TEST_SMTP_SSL {
}
class "TOTP" as odoo_src.odoo.addons.auth_totp.models.totp.TOTP {
  match(code, t, window, timestep)
}
class "TOTPWizard" as odoo_src.odoo.addons.auth_totp.wizard.auth_totp_wizard.TOTPWizard {
  code
  qrcode
  secret
  url
  user_id
  enable()
}
class "Task" as odoo_src.odoo.addons.hr_timesheet.models.project_task.Task {
  SELF_READABLE_FIELDS
  allocated_hours
  allow_timesheets
  analytic_account_active
  display_name
  effective_hours
  encode_uom_in_days
  overtime
  progress
  project_id
  remaining_hours
  remaining_hours_percentage
  subtask_effective_hours
  timesheet_ids
  total_hours_spent
  action_view_subtask_timesheet()
}
class "<color:red>TaxClosingNonPostedDependingMovesError</color>" as odoo_src.odoo.addons.account.models.exceptions.TaxClosingNonPostedDependingMovesError {
}
class "TaxOffice" as odoo_src.odoo.addons.l10n_pl.models.l10n_pl_tax_office.TaxOffice {
  code
  name
}
class "TaxReportTest" as odoo_src.odoo.addons.account.tests.test_tax_report.TaxReportTest {
  setUpClass()
  test_add_expression()
  test_change_engine_shared_tags()
  test_change_engine_without_formula()
  test_change_formula_multiple_fields()
  test_create_shared_tags()
  test_edit_multi_line_tagname_all_different_new()
  test_tag_recreation_archived()
  test_tax_report_change_country()
  test_unlink_report_line_tags_used_by_amls()
  test_unlink_report_line_tags_used_by_other_expression()
  test_write_multi_no_change()
  test_write_single_line_tagname_not_shared()
  test_write_single_line_tagname_shared()
}
class "Team" as odoo_src.odoo.addons.crm.models.crm_team.Team {
  alias_id
  alias_name : bool
  assignment_auto_enabled
  assignment_domain
  assignment_enabled
  assignment_max
  assignment_optout
  lead_all_assigned_month_count
  lead_all_assigned_month_exceeded
  lead_properties_definition
  lead_unassigned_count
  opportunities_amount
  opportunities_count
  opportunities_overdue_amount
  opportunities_overdue_count
  use_leads
  use_opportunities
  action_assign_leads()
  action_opportunity_forecast()
  action_primary_channel_button()
  action_your_pipeline()
  unlink()
  write(vals)
}
class "TeamMember" as odoo_src.odoo.addons.crm.models.crm_team_member.TeamMember {
  assignment_domain
  assignment_enabled
  assignment_max
  assignment_optout
  lead_day_count
  lead_month_count
}
class "TemplateResetMixin" as odoo_src.odoo.addons.mail.models.template_reset_mixin.TemplateResetMixin {
  template_fs
  create(vals_list)
  reset_template()
}
class "TermsController" as odoo_src.odoo.addons.account.controllers.terms.TermsController {
  terms_conditions()
}
class "Test01ClassCleanups" as odoo_src.odoo.addons.base.tests.test_test_suite.Test01ClassCleanups {
  cleanup : bool
  executed : bool
  setUpClass()
  {abstract}test_dummy()
}
class "Test02ClassCleanupsCheck" as odoo_src.odoo.addons.base.tests.test_test_suite.Test02ClassCleanupsCheck {
  test_classcleanups()
}
class "TestACL" as odoo_src.odoo.addons.base.tests.test_acl.TestACL {
  setUpClass()
  test_field_crud_restriction()
  test_field_visibility_restriction()
  test_fields_browse_restriction()
  test_get_views_fields()
  test_m2o_field_create_edit()
  test_view_create_edit_button()
}
class "TestAPI" as odoo_src.odoo.addons.base.tests.test_api.TestAPI {
  assertIsNull(value, model)
  assertIsRecord(value, model)
  assertIsRecordset(value, model)
  setUpClass()
  test_00_query()
  test_01_query_offset()
  test_02_query_limit()
  test_03_query_offset_limit()
  test_04_query_count()
  test_05_immutable()
  test_06_fields()
  test_07_null()
  test_40_new_new()
  test_45_new_new()
  test_50_environment()
  test_56_environment_uid_origin()
  test_60_cache()
  test_60_prefetch()
  test_60_prefetch_model()
  test_60_prefetch_read()
  test_60_reversed()
  test_70_one()
  test_80_contains()
  test_80_filter()
  test_80_lazy_contains()
  test_80_lazy_set_operations()
  test_80_map()
  test_80_set_operations()
  test_80_sorted()
  test_group_on()
}
class "TestAPIKeys" as odoo_src.odoo.addons.base.tests.test_xmlrpc.TestAPIKeys {
  setUp()
  setUpClass()
  test_delete()
  test_disabled()
  test_key()
  test_trivial()
  test_wrongpw()
}
class "TestAccessRights" as odoo_src.odoo.addons.calendar.tests.test_access_rights.TestAccessRights {
  create_event(user)
  read_event(user, events, field)
  setUpClass()
  test_admin_cant_edit_uninvited_private_events()
  test_admin_cant_fetch_uninvited_private_events()
  test_admin_edit_uninvited_non_private_events()
  test_check_private_event_conditions_by_internal_user()
  test_edit_private_event_of_other_user()
  test_event_default_privacy_as_private()
  test_hide_sensitive_fields_private_events_from_uninvited_admins()
  test_meeting_edit_access_notification_handle_in_odoo()
  test_privacy()
  test_private_and_public()
  test_private_attendee()
  test_read_group_agg()
  test_read_group_list()
  test_read_group_private()
  test_read_group_public()
  test_recurring_event_with_alarms_for_non_admin()
  test_user_update_calendar_default_privacy()
}
class "TestAccessRights" as odoo_src.odoo.addons.base.tests.test_views.TestAccessRights {
  test_access()
}
class "TestAccessRightsCreate" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsCreate {
  test_base_user_create_other()
  test_base_user_create_self()
  test_holidays_manager_create_other()
  test_holidays_manager_create_self()
  test_holidays_user_create_other()
  test_holidays_user_create_self()
}
class "TestAccessRightsEmployeeManager" as odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsEmployeeManager {
  setUpClass()
  test_manager_approve_own()
  test_manager_approve_request_allocation()
  test_manager_refuse_request_allocation()
  test_manager_request_allocation_other()
}
class "TestAccessRightsHolidayManager" as odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsHolidayManager {
  test_holiday_manager_can_approve_own()
  test_holiday_manager_refuse_validated()
}
class "TestAccessRightsHolidayUser" as odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsHolidayUser {
  test_holiday_user_cannot_approve_own()
  test_holiday_user_request_allocation()
}
class "TestAccessRightsRead" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsRead {
  test_leave_read_by_user_other()
  test_leave_read_by_user_other_browse()
  test_leave_read_by_user_own()
}
class "TestAccessRightsSimpleUser" as odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsSimpleUser {
  test_simple_user_request_allocation()
  test_simple_user_request_allocation_no_validation()
  test_simple_user_request_allocation_no_validation_other()
  test_simple_user_reset_to_draft()
}
class "TestAccessRightsUnlink" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsUnlink {
  test_leave_unlink_confirm_by_user()
  test_leave_unlink_confirm_in_past_by_user()
  test_leave_unlink_validate_by_user()
}
class "TestAccessRightsWrite" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsWrite {
  test_leave_creation_for_other_user()
  test_leave_double_validate()
  test_leave_double_validate_holiday_manager()
  test_leave_hr_to_validate_by_holiday_user()
  test_leave_hr_to_validate_by_manager()
  test_leave_hr_to_validate_by_user()
  test_leave_manager_to_validate_by_holiday_user()
  test_leave_manager_to_validate_by_user()
  test_leave_messaging_by_user()
  test_leave_update_by_user()
  test_leave_update_by_user_other()
}
class "TestAccountAccount" as odoo_src.odoo.addons.account.tests.test_account_account.TestAccountAccount {
  setUpClass()
  test_account_accessible_by_search_in_sudo_mode()
  test_account_code_mapping()
  test_account_code_mapping_create()
  test_account_company()
  test_account_group_hierarchy_consistency()
  test_account_name_onchange()
  test_account_opening_balance()
  test_compute_account()
  test_compute_account_type()
  test_compute_current_balance()
  test_create_account()
  test_ensure_code_unique()
  test_generate_account_suggestions()
  test_get_closest_parent_account()
  test_muticompany_account_groups()
  test_name_create()
  test_name_create_account_code_only()
  test_name_create_account_name_with_number()
  test_placeholder_code()
  test_remove_account_from_account_group()
  test_search_new_account_code()
  test_shared_accounts()
  test_toggle_reconcile()
  test_toggle_reconcile_with_partials()
  test_unmerge()
  test_write_on_code_from_branch()
}
class "TestAccountAnalyticAccount" as odoo_src.odoo.addons.account.tests.test_account_analytic.TestAccountAnalyticAccount {
  create_invoice(partner, product)
  get_analytic_lines(invoice)
  setUpClass()
  test_analytic_applicability_multiple_prefixes()
  test_analytic_distribution_multiple_prefixes()
  test_analytic_distribution_with_discount()
  test_analytic_dynamic_update()
  test_analytic_lines()
  test_analytic_lines_partner_compute()
  test_analytic_lines_rounding()
  test_applicability_score()
  test_changing_analytic_company()
  test_cross_analytics_computing()
  test_get_relevant_plans_in_multi_company()
  test_mandatory_plan_validation()
  test_mandatory_plan_validation_mass_posting()
  test_model_application()
  test_model_score()
  test_model_sequence()
  test_move_with_analytic_lines()
  test_synchronization_between_analytic_distribution_and_analytic_lines()
  test_tax_line_sync_with_analytic()
}
class "TestAccountBankStatementLine" as odoo_src.odoo.addons.account.tests.test_account_bank_statement.TestAccountBankStatementLine {
  assertBankStatementLine(statement_line, expected_statement_line_vals, expected_move_line_vals)
  create_bank_transaction(amount, date, amount_currency, currency, statement, partner, journal, sequence)
  setUpClass()
  test_bank_transaction_creation_with_default_journal_entry_date()
  test_constraints()
  test_create_statement_line_with_inconsistent_currencies()
  test_edition_journal_curr_1_statement_curr_2()
  test_edition_journal_curr_1_statement_false()
  test_edition_journal_curr_2_statement_curr_1()
  test_edition_journal_curr_2_statement_curr_3()
  test_edition_journal_curr_2_statement_false()
  test_for_presence_single_suspense_line()
  test_prepare_counterpart_amounts_using_st_line_rate()
  test_statement_attachments()
  test_statement_balance_warnings()
  test_statement_line_move_onchange_1()
  test_statement_line_ordering()
  test_statement_reverse_keeps_partner()
  test_statement_split()
  test_statement_valid_complete_1()
  test_statement_with_canceled_lines()
  test_zero_amount_journal_curr_1_statement_curr_2()
  test_zero_amount_journal_curr_2_statement_curr_1()
  test_zero_amount_journal_curr_2_statement_curr_3()
  test_zero_amount_statement_line()
}
class "TestAccountCZ" as odoo_src.odoo.addons.l10n_cz.tests.test_moves.TestAccountCZ {
  setUpClass()
  test_cz_bank_rec_no_taxable_supply_date()
  test_cz_out_invoice_onchange_accounting_date()
}
class "TestAccountComposerPerformance" as odoo_src.odoo.addons.account.tests.test_account_move_send.TestAccountComposerPerformance {
  default_env_context()
  setUp()
  setUpClass()
  test_assert_initial_values()
  test_invoice_sent_to_additional_partner()
  test_move_composer_multi()
  test_move_composer_single()
  test_move_composer_single_lang()
  test_move_composer_with_dynamic_reports()
}
class "TestAccountDebitNote" as odoo_src.odoo.addons.account_debit_note.tests.test_out_debit_note.TestAccountDebitNote {
  test_00_debit_note_out_invoice()
  test_10_debit_note_in_refund()
}
class "TestAccountDigest" as odoo_src.odoo.addons.account.tests.test_digest.TestAccountDigest {
  setUpClass()
  test_kpi_account_total_revenue_value()
}
class "TestAccountEarlyPaymentDiscount" as odoo_src.odoo.addons.account.tests.test_early_payment_discount.TestAccountEarlyPaymentDiscount {
  setUpClass()
  test_early_payment_date_eligibility()
  test_early_payment_date_eligibility2()
  test_early_payment_end_date()
  test_epd_entry_tag_invert_with_distinct_negative_invoice_line()
  test_epd_multiple_repartition_lines()
  test_epd_validation_on_payment_terms()
  test_fixed_tax_amount_discounted_payment_mixed()
  test_intracomm_bill_with_early_payment_included()
  test_invoice_report_without_invoice_date()
  test_mixed_early_discount_with_tag_on_tax_base_line()
  test_mixed_epd_with_draft_invoice()
  test_mixed_epd_with_rounding_issue()
  test_mixed_epd_with_tax_deleted_line()
  test_mixed_epd_with_tax_included()
  test_mixed_epd_with_tax_no_duplication()
  test_mixed_epd_with_tax_refund()
  test_register_discounted_payment_multi_line_discount()
  test_register_discounted_payment_on_single_invoice()
  test_register_discounted_payment_on_single_invoice_with_fixed_tax_1()
  test_register_discounted_payment_on_single_invoice_with_fixed_tax_2()
  test_register_discounted_payment_on_single_invoice_with_tax()
  test_register_discounted_payment_on_single_out_invoice_with_tax()
  test_register_payment_batch_excluded()
  test_register_payment_batch_included()
  test_register_payment_batch_mixed()
  test_register_payment_batch_mixed_one_too_late()
  test_register_payment_batch_with_discount_and_without_discount()
  test_register_payment_batch_without_discount()
}
class "TestAccountEdi" as odoo_src.odoo.addons.account_edi.tests.test_edi.TestAccountEdi {
  setUpClass()
  test_cron_self_trigger()
  test_cron_triggers()
  test_edi_flow()
  test_edi_flow_two_steps()
  test_export_edi()
  test_invoice_ready_to_be_sent()
  test_prepare_jobs_batching()
  test_prepare_jobs_no_batching()
  test_warning_is_retried()
}
class "TestAccountEdiUblCii" as odoo_src.odoo.addons.account_edi_ubl_cii.tests.test_ubl_cii.TestAccountEdiUblCii {
  import_attachment(attachment, journal)
  setUpClass()
  test_actual_delivery_date_in_cii_xml()
  test_billing_date_in_cii_xml()
  test_export_import_billing_dates()
  test_export_import_product()
  test_export_import_product_new()
  test_import_discount()
  test_import_partner_fields()
  test_import_partner_peppol_fields()
  test_import_tax_prediction()
  test_payment_means_code_in_facturx_xml()
  test_peppol_eas_endpoint_compute()
}
class "TestAccountEdiUblCiiTaxExtension" as odoo_src.odoo.addons.account_edi_ubl_cii_tax_extension.tests.test_ubl_cii_tax_extension.TestAccountEdiUblCiiTaxExtension {
  setUpClass()
  test_tax_subtotal()
}
class "TestAccountFleet" as odoo_src.odoo.addons.account_fleet.tests.test_account_fleet.TestAccountFleet {
  test_transfer_wizard_vehicle_info_propagation()
}
class "TestAccountIncomingSupplierInvoice" as odoo_src.odoo.addons.account.tests.test_account_incoming_supplier_invoice.TestAccountIncomingSupplierInvoice {
  attachment_number
  default_env_context()
  setUpClass()
  test_extend_with_attachments()
  test_supplier_invoice_forwarded_by_internal_user_without_supplier()
  test_supplier_invoice_forwarded_by_internal_with_internal_in_body()
  test_supplier_invoice_forwarded_by_internal_with_supplier_in_body()
  test_supplier_invoice_mailed_from_supplier()
  with_simulated_embedded_xml(pdf)
  with_success_decoder(omit)
}
class "TestAccountInvoiceReport" as odoo_src.odoo.addons.account.tests.test_account_invoice_report.TestAccountInvoiceReport {
  assertInvoiceReportValues(expected_values_list)
  setUpClass()
  test_avg_price_calculation()
  test_inventory_margin_currency()
  test_invoice_report_multicompany_product_cost()
  test_invoice_report_multiple_types()
}
class "TestAccountJournal" as odoo_src.odoo.addons.account.tests.test_account_journal.TestAccountJournal {
  setUpClass()
  test_account_control_create_journal_entry()
  test_account_control_existing_journal_entry()
  test_account_journal_add_new_payment_method_multi()
  test_account_journal_duplicates()
  test_archive_multiple_journals()
  test_archive_used_journal()
  test_changing_journal_company()
  test_constraint_currency_consistency_with_accounts()
  test_remove_payment_method_lines()
}
class "TestAccountJournalAlias" as odoo_src.odoo.addons.account.tests.test_account_journal.TestAccountJournalAlias {
  setUpClass()
  test_alias_create_unique()
  test_alias_from_type()
  test_alias_name_creation()
  test_alias_name_form()
  test_use_default_account_from_journal()
}
class "TestAccountJournalDashboard" as odoo_src.odoo.addons.account.tests.test_account_journal_dashboard.TestAccountJournalDashboard {
  test_bank_journal_different_currency()
  test_bank_journal_with_default_account_as_outstanding_account_payments()
  test_customer_invoice_dashboard()
  test_gap_in_sequence_warning()
  test_purchase_journal_numbers_and_sums()
  test_sale_purchase_journal_for_multi_currency_sale()
  test_sale_purchase_journal_for_purchase()
  test_to_check_amount_different_currency()
  test_to_check_posted()
}
class "TestAccountJournalDashboardCommon" as odoo_src.odoo.addons.account.tests.test_account_journal_dashboard_common.TestAccountJournalDashboardCommon {
  assertDashboardPurchaseSaleData(journal, number_draft, sum_draft, number_waiting, sum_waiting, number_late, sum_late, currency)
  setUpClass()
}
class "<color:red>TestAccountLockException</color>" as odoo_src.odoo.addons.account.tests.test_account_lock_exception.TestAccountLockException {
  setUpClass()
  test_company_lock_date()
  test_expired_exception()
  test_global_exception_move_edit_multi_user()
  test_hard_lock_date()
  test_revoked_exception()
  test_user_exception_branch()
  test_user_exception_insufficient()
  test_user_exception_move_edit_multi_user()
  test_user_exception_remove_lock_date()
  test_user_exception_wrong_company()
  test_user_exception_wrong_field()
}
class "TestAccountMergeCommon" as odoo_src.odoo.addons.account.tests.common.TestAccountMergeCommon {
}
class "TestAccountMergeWizard" as odoo_src.odoo.addons.account.tests.test_account_merge_wizard.TestAccountMergeWizard {
  setUpClass()
  test_can_merge_accounts_if_one_is_hashed()
  test_cannot_merge_same_company()
  test_cannot_merge_two_hashed_accounts()
  test_merge()
  test_merge_accounts_company_dependent_related()
}
class "TestAccountMove" as odoo_src.odoo.addons.account.tests.test_account_move_entry.TestAccountMove {
  account
  included_percent_tax
  default_env_context()
  setUpClass()
  test_account_move_inactive_currency_raise_error_on_post()
  test_add_followers_on_post()
  test_always_exigible_caba_account()
  test_balance_modification_auto_balancing()
  test_cache_invalidation()
  test_change_journal_account_move()
  test_change_journal_posted_before()
  test_change_journal_sequence_number()
  test_cumulated_balance()
  test_custom_currency_on_account_1()
  test_entry_reverse_storno()
  test_fiscal_position_multicompany()
  test_included_tax()
  test_invoice_like_entry_reverse_caba()
  test_journal_entry_clear_taxes()
  test_line_steal()
  test_manually_modifying_taxes()
  test_misc_draft_reconciled_entries_1()
  test_misc_fiscalyear_lock_date_1()
  test_misc_fiscalyear_lock_date_2()
  test_misc_move_onchange()
  test_misc_prevent_edit_tax_on_posted_moves()
  test_misc_prevent_unlink_posted_items()
  test_misc_tax_autobalance()
  test_misc_tax_lock_date_1()
  test_misc_with_taxes_reverse()
  test_modify_posted_move_readonly_fields()
  test_move_line_rounding()
  test_out_invoice_auto_post_at_date()
  test_out_invoice_auto_post_monthly()
  test_posting_future_invoice_fails()
  test_reset_draft_exchange_move()
  test_validate_move_wizard_with_auto_post_entry()
}
class "TestAccountMoveAttachment" as odoo_src.odoo.addons.account.tests.test_account_move_attachment.TestAccountMoveAttachment {
  test_preserving_manually_added_attachments()
}
class "TestAccountMoveAutoPost" as odoo_src.odoo.addons.account.tests.test_account_move_auto_post.TestAccountMoveAutoPost {
  setUpClass()
  test_auto_post_infinite_loop()
}
class "TestAccountMoveDE" as odoo_src.odoo.addons.l10n_de.tests.test_account_move.TestAccountMoveDE {
  setUpClass()
  test_missing_invoice_delivery_date()
}
class "TestAccountMoveDateAlgorithm" as odoo_src.odoo.addons.account.tests.test_account_move_date_algorithm.TestAccountMoveDateAlgorithm {
  setUpClass()
  test_caba_with_different_lock_dates()
  test_caba_with_lock_date()
  test_in_invoice_date_with_lock_date()
  test_in_invoice_reverse_date_with_lock_date()
  test_in_refund_date_with_lock_date()
  test_in_refund_reverse_date_with_lock_date()
  test_lock_date_exceptions()
  test_out_invoice_date_with_lock_date()
  test_out_invoice_reverse_date_with_lock_date()
  test_out_refund_date_with_lock_date()
  test_out_refund_reverse_date_with_lock_date()
  test_reconcile_with_lock_date()
  test_unreconcile_with_lock_date()
}
class "TestAccountMoveDuplicate" as odoo_src.odoo.addons.account.tests.test_account_move_duplicate.TestAccountMoveDuplicate {
  setUpClass()
  test_in_invoice_multiple_duplicate_reference_batch()
  test_in_invoice_single_duplicate_reference()
  test_in_invoice_single_duplicate_reference_diff_date()
  test_in_invoice_single_duplicate_reference_with_form()
  test_out_invoice_single_duplicate_reference()
}
class "TestAccountMoveInInvoiceOnchanges" as odoo_src.odoo.addons.account.tests.test_account_move_in_invoice.TestAccountMoveInInvoiceOnchanges {
  setUp()
  setUpClass()
  setup_armageddon_tax(tax_name, company_data)
  test_compute_cash_rounding_lines()
  test_duplicate_invoice_with_separate_discount_acccount()
  test_fiduciary_mode_date_suggestion()
  test_in_invoice_change_period_accrual_1()
  test_in_invoice_create_1()
  test_in_invoice_create_refund()
  test_in_invoice_create_refund_multi_currency()
  test_in_invoice_line_onchange_business_fields_1()
  test_in_invoice_line_onchange_cash_rounding_1()
  test_in_invoice_line_onchange_currency_1()
  test_in_invoice_line_onchange_partner_1()
  test_in_invoice_line_onchange_product_1()
  test_in_invoice_line_onchange_product_2_with_fiscal_pos()
  test_in_invoice_line_onchange_product_2_with_fiscal_pos_2()
  test_in_invoice_line_onchange_taxes_1()
  test_in_invoice_line_product_taxes_on_branch()
  test_in_invoice_line_tax_line_delete()
  test_in_invoice_onchange_invoice_date()
  test_in_invoice_onchange_invoice_date_2()
  test_in_invoice_onchange_past_invoice_1()
  test_in_invoice_payment_register_wizard()
  test_in_invoice_reverse_caba()
  test_in_invoice_switch_type_1()
  test_in_invoice_switch_type_2()
  test_in_invoice_with_down_payment_caba()
  test_in_invoice_write_1()
  test_manual_label_change_on_payment_term_line()
  test_onchange_journal_currency()
  test_onchange_payment_reference()
  test_payment_move_state()
  test_purchase_uom_on_vendor_bills()
  test_taxes_onchange_product_uom_and_price_unit()
}
class "TestAccountMoveInRefundOnchanges" as odoo_src.odoo.addons.account.tests.test_account_move_in_refund.TestAccountMoveInRefundOnchanges {
  setUp()
  setUpClass()
  setup_armageddon_tax(tax_name, company_data)
  test_in_refund_create_1()
  test_in_refund_create_storno()
  test_in_refund_line_onchange_business_fields_1()
  test_in_refund_line_onchange_cash_rounding_1()
  test_in_refund_line_onchange_currency_1()
  test_in_refund_line_onchange_partner_1()
  test_in_refund_line_onchange_product_1()
  test_in_refund_line_onchange_taxes_1()
  test_in_refund_onchange_past_invoice_1()
  test_in_refund_reverse_caba()
  test_in_refund_with_down_payment_caba()
  test_in_refund_write_1()
}
class "TestAccountMoveInalterableHash" as odoo_src.odoo.addons.account.tests.test_account_inalterable_hash.TestAccountMoveInalterableHash {
  setUpClass()
  test_account_group_account_secured()
  test_account_move_hash_integrity_report()
  test_account_move_hash_versioning_1()
  test_account_move_hash_versioning_2()
  test_account_move_hash_versioning_3()
  test_account_move_hash_versioning_v1_to_v2()
  test_account_move_hash_versioning_v2_to_v3()
  test_account_move_hash_versioning_v3_to_v4()
  test_account_move_hash_with_cash_rounding()
  test_account_move_inalterable_hash()
  test_account_move_unhashed_entries()
  test_error_on_unreconciled_bank_statement_lines()
  test_hash_multiyear()
  test_hash_on_lock_date()
  test_inalterable_hash_verification_by_batches()
  test_no_hash_if_hole_in_sequence()
  test_retroactive_hash_multiple_journals()
  test_retroactive_hash_vendor_bills()
  test_retroactive_hashing()
  test_retroactive_hashing_backwards_compatibility()
  test_retroactive_hashing_before_current()
  test_wizard_backwards_compatibility()
  test_wizard_hashes_all_journals()
  test_wizard_ignores_sequence_prefixes_with_unreconciled_entries()
}
class "TestAccountMoveOutInvoiceOnchanges" as odoo_src.odoo.addons.account.tests.test_account_move_out_invoice.TestAccountMoveOutInvoiceOnchanges {
  setUp()
  setUpClass()
  test_account_on_invoice_line_product_removal()
  test_before_initial_rate()
  test_change_currency_id()
  test_change_first_journal_move_sequence()
  test_change_journal_currency()
  test_compute_name_payment_reference()
  test_date_reversal_exchange_move()
  test_discount_allocation_account_on_invoice()
  test_discount_allocation_account_on_invoice_currency_change()
  test_invoice_copy_data()
  test_invoice_currency_mismatch_account_currency()
  test_invoice_journal_account_check_constraints()
  test_invoice_mass_posting()
  test_invoice_with_empty_currency()
  test_keep_receivable()
  test_lines_recomputation_after_currency_rate_change()
  test_narration_preserved_when_use_invoice_terms_disabled()
  test_no_taxes_on_payment_term_line()
  test_on_quick_encoding_non_accounting_lines()
  test_out_invoice_bank_partner()
  test_out_invoice_caba_on_payment()
  test_out_invoice_change_period_accrual_1()
  test_out_invoice_change_period_past_move_date()
  test_out_invoice_change_to_future_period_accrual_1()
  test_out_invoice_copy_custom_date()
  test_out_invoice_create_1()
  test_out_invoice_create_child_partner()
  test_out_invoice_create_cross_branch_refund()
  test_out_invoice_create_refund()
  test_out_invoice_create_refund_auto_post()
  test_out_invoice_create_refund_multi_currency()
  test_out_invoice_depreciated_account()
  test_out_invoice_filter_zero_balance_lines()
  test_out_invoice_line_onchange_analytic()
  test_out_invoice_line_onchange_analytic_2()
  test_out_invoice_line_onchange_business_fields_1()
  test_out_invoice_line_onchange_cash_rounding_1()
  test_out_invoice_line_onchange_currency_1()
  test_out_invoice_line_onchange_partner_1()
  test_out_invoice_line_onchange_product_1()
  test_out_invoice_line_onchange_product_2_with_fiscal_pos_1()
  test_out_invoice_line_onchange_product_2_with_fiscal_pos_2()
  test_out_invoice_line_onchange_rounding_price_subtotal_1()
  test_out_invoice_line_onchange_rounding_price_subtotal_2()
  test_out_invoice_line_onchange_taxes_1()
  test_out_invoice_line_onchange_taxes_2_price_unit_tax_included()
  test_out_invoice_line_product_taxes_on_branch()
  test_out_invoice_line_tax_fixed_price_include_free_product()
  test_out_invoice_line_taxes_fixed_price_include_free_product()
  test_out_invoice_multi_company()
  test_out_invoice_multi_date_change_period_accrual()
  test_out_invoice_multiple_switch_payment_terms()
  test_out_invoice_note_and_tax_partner_is_set()
  test_out_invoice_onchange_invoice_date()
  test_out_invoice_partner_context()
  test_out_invoice_post_1()
  test_out_invoice_post_2()
  test_out_invoice_recomputation_receivable_lines()
  test_out_invoice_reverse_caba()
  test_out_invoice_reverse_move_tags()
  test_out_invoice_rounding_recomputation_receivable_lines()
  test_out_invoice_switch_out_refund_1()
  test_out_invoice_switch_out_refund_2()
  test_out_invoice_switch_out_refund_3()
  test_out_invoice_switch_out_refund_4()
  test_out_invoice_tax_tags()
  test_out_invoice_with_down_payment_caba()
  test_out_invoice_write_1()
  test_out_invoice_write_2()
  test_payment_term_line_fiscal_position()
  test_post_valid_invoices_when_auto_post()
  test_quick_edit_total_amount()
  test_quick_edit_total_amount_with_mixed_epd()
  test_quick_edit_total_amount_with_reverse_charge()
  test_tax_grid_remove_tax()
  test_update_lines_date_when_invoice_date_changes()
}
class "TestAccountMoveOutRefundOnchanges" as odoo_src.odoo.addons.account.tests.test_account_move_out_refund.TestAccountMoveOutRefundOnchanges {
  setUp()
  setUpClass()
  test_out_refund_create_1()
  test_out_refund_create_storno()
  test_out_refund_line_onchange_business_fields_1()
  test_out_refund_line_onchange_cash_rounding_1()
  test_out_refund_line_onchange_currency_1()
  test_out_refund_line_onchange_partner_1()
  test_out_refund_line_onchange_product_1()
  test_out_refund_line_onchange_taxes_1()
  test_out_refund_reverse_caba()
  test_out_refund_with_down_payment_caba()
  test_out_refund_write_1()
}
class "TestAccountMovePaymentsWidget" as odoo_src.odoo.addons.account.tests.test_account_move_payments_widget.TestAccountMovePaymentsWidget {
  setUpClass()
  test_outstanding_payments_foreign_currency()
  test_outstanding_payments_single_currency()
  test_payments_with_exchange_difference_invoice()
  test_payments_with_exchange_difference_payment()
}
class "TestAccountMoveReconcile" as odoo_src.odoo.addons.account.tests.test_account_move_reconcile.TestAccountMoveReconcile {
  assertAmountsGroupByAccount(amount_per_account)
  assertFullReconcile(full_reconcile, lines)
  assertFullReconcileAccount(full_reconcile, account)
  setUpClass()
  test_caba_dest_acc_reconciliation_partial_pmt()
  test_caba_double_tax_negative_line()
  test_caba_foreign_vat()
  test_caba_mix_reconciliation()
  test_caba_rounding_adjustment_monocurrency()
  test_caba_rounding_adjustment_multicurrency()
  test_caba_tax_group()
  test_caba_undo_reconciliation()
  test_cash_basis_full_refund()
  test_cash_basis_taxline_without_account()
  test_cash_basis_with_analytic_distribution()
  test_cash_basis_with_analytic_distribution_analytic_tax()
  test_full_reconcile_bunch_lines()
  test_full_reconcile_foreign_currency_rounding_difference_credit_larger()
  test_full_reconcile_foreign_currency_rounding_difference_debit_larger()
  test_invoice_draft_fully_paid_if_zero()
  test_matching_loop()
  test_matching_number_full_reconcile()
  test_matching_number_partial_multi_reconcile()
  test_matching_number_partial_multi_separate_reconcile()
  test_matching_number_partial_single_reconcile()
  test_matching_number_unreconcile_multi()
  test_matching_number_unreconcile_single()
  test_migration_to_new_reconciliation_multiple_currencies_fix_residual_with_writeoff()
  test_migration_to_new_reconciliation_same_foreign_currency()
  test_modify_all_reconciled_lines()
  test_partial_payments_auto_validation()
  test_reconcile_cash_basis_exchange_difference_transfer_account_check_entries_1()
  test_reconcile_cash_basis_exchange_difference_transfer_account_check_entries_2()
  test_reconcile_cash_basis_exchange_difference_transfer_account_check_entries_3()
  test_reconcile_cash_basis_exchange_difference_transfer_account_check_entries_4()
  test_reconcile_cash_basis_refund_multicurrency()
  test_reconcile_cash_basis_revert()
  test_reconcile_cash_basis_tax_grid_multi_taxes()
  test_reconcile_cash_basis_tax_grid_refund()
  test_reconcile_cash_basis_tax_grid_reversal()
  test_reconcile_cash_basis_workflow_multi_currency()
  test_reconcile_cash_basis_workflow_single_currency()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_credit_expense_full_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_credit_expense_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_credit_income_full_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_credit_income_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_debit_expense_full_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_debit_expense_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_debit_income_full_payment()
  test_reconcile_exchange_difference_on_partial_one_credit_foreign_currency_debit_income_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_credit_expense_full_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_credit_expense_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_credit_income_full_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_credit_income_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_debit_expense_full_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_debit_expense_partial_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_debit_income_full_payment()
  test_reconcile_exchange_difference_on_partial_one_debit_foreign_currency_debit_income_partial_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_credit_expense_full_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_credit_expense_partial_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_credit_income_full_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_credit_income_partial_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_debit_expense_full_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_debit_expense_partial_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_debit_income_full_payment()
  test_reconcile_exchange_difference_on_partial_same_foreign_currency_debit_income_partial_payment()
  test_reconcile_foreign_currency_rounding_issue()
  test_reconcile_import()
  test_reconcile_invoice_company_curr_payment_foreign_curr()
  test_reconcile_lines_corner_case_1_zero_balance_different_foreign_currency()
  test_reconcile_lines_corner_case_1_zero_balance_same_foreign_currency()
  test_reconcile_lines_corner_case_2_zero_amount_currency_same_foreign_currency()
  test_reconcile_lines_corner_case_3_zero_balance_one_foreign_currency()
  test_reconcile_lines_corner_case_4_zero_amount_currency_multiple_currencies()
  test_reconcile_lines_corner_case_5_zero_balance_in_one_line_same_foreign_currency()
  test_reconcile_lines_multiple_in_foreign_currency()
  test_reconcile_one_foreign_currency_fallback_company_currency()
  test_reconcile_partial_exchange_rounding_issue()
  test_reconcile_payment_custom_rate()
  test_reconcile_payment_with_no_exchange_diff_journal()
  test_reconcile_plan()
  test_reconcile_rounding_issue()
  test_reconcile_special_mexican_workflow_1()
  test_reconcile_special_mexican_workflow_2()
  test_reconciliation_currency_exchange_matching_number()
  test_reverse_exchange_difference()
  test_reverse_with_multiple_lines()
}
class "TestAccountMoveSend" as odoo_src.odoo.addons.account.tests.test_account_move_send.TestAccountMoveSend {
  setUpClass()
  test_cron_notifications()
  test_error_but_continue()
  test_get_invoice_report_filename()
  test_get_sending_settings()
  test_invoice_email_subtitle()
  test_invoice_mail_attachments_widget()
  test_invoice_multi()
  test_invoice_multi_email_missing()
  test_invoice_multi_with_edi()
  test_invoice_single()
  test_invoice_web_service_after_pdf_rendering()
  test_is_move_sent_state()
  test_link_pdf_webservice_fails_after()
  test_link_pdf_webservice_fails_before()
  test_no_sending_method_selected()
  test_proforma_pdf()
  test_send_and_print_cron()
  test_with_draft_invoices()
  test_with_empty_mail_template_multi()
  test_with_empty_mail_template_single()
}
class "TestAccountMoveSendCommon" as odoo_src.odoo.addons.account.tests.test_account_move_send.TestAccountMoveSendCommon {
  create_send_and_print(invoices)
  setUpClass()
}
class "TestAccountPartner" as odoo_src.odoo.addons.account.tests.test_account_partner.TestAccountPartner {
  test_account_move_count()
  test_days_sales_outstanding()
  test_manually_write_partner_id()
  test_manually_write_partner_id_different_vat()
}
class "TestAccountPayment" as odoo_src.odoo.addons.account.tests.test_account_payment.TestAccountPayment {
  setUpClass()
  test_attachments_send_multiple()
  test_compute_currency_id()
  test_empty_string_payment_method()
  test_invoice_paid_hook_called_in_various_scenarios()
  test_journal_change_and_change_names()
  test_journal_onchange()
  test_payment_amount_without_move()
  test_payment_confirmation_with_bank_outstanding_account()
  test_payment_journal_onchange()
  test_payment_move_sync_create_write()
  test_payment_move_sync_onchange()
  test_payment_move_sync_update_journal_custom_accounts()
  test_payment_state_with_unreconciliable_outstanding_account()
  test_payment_without_default_company_account()
  test_payments_copy_data()
  test_payments_epd_eligible_on_move_with_payment()
  test_payments_invoice_payment_state_without_outstanding_accounts()
  test_reconciliation_payment_states()
  test_reconciliation_payment_states_reverse_payment_move()
  test_reconciliation_with_old_oustanding_account()
  test_resequence_change_payment_name()
  test_suggested_default_partner_bank()
  test_vendor_payment_save_user_selected_journal_id()
}
class "TestAccountPayment" as odoo_src.odoo.addons.account_payment.tests.test_account_payment.TestAccountPayment {
  test_action_post_calls_send_payment_request_only_once()
  test_full_amount_available_for_refund_when_not_yet_refunded()
  test_full_amount_available_for_refund_when_refunds_are_pending()
  test_generate_payment_link_with_no_invoice_line()
  test_no_amount_available_for_refund_when_fully_refunded()
  test_no_amount_available_for_refund_when_no_tx()
  test_no_amount_available_for_refund_when_not_supported()
  test_no_full_amount_available_for_refund_when_partially_refunded()
  test_no_payment_for_validations()
  test_payment_invoice_same_receivable()
  test_payments_for_source_tx_with_children()
  test_post_process_does_not_fail_on_cancelled_invoice()
  test_prevent_unlink_apml_with_active_provider()
  test_provider_journal_assignation()
  test_refunds_count()
  test_vendor_payment_name_remains_same_after_repost()
}
class "TestAccountPaymentDuplicateMoves" as odoo_src.odoo.addons.account.tests.test_account_payment_duplicate.TestAccountPaymentDuplicateMoves {
  setUpClass()
  test_duplicate_payments()
  test_in_payment_multiple_duplicate_inbound_batch()
  test_in_payment_multiple_duplicate_multiple_journals()
  test_register_payment_different_payment_types()
  test_register_payment_single_batch_duplicate_payments()
}
class "TestAccountPaymentItems" as odoo_src.odoo.addons.account.tests.test_account_payment_items.TestAccountPaymentItems {
  create_bill(due_date, discount_days)
  create_payment_term(due_date, discount_days)
  setUpClass()
  test_payment_date()
  test_search_payment_date()
}
class "TestAccountPaymentMethodLine" as odoo_src.odoo.addons.account.tests.test_account_payment_method_line.TestAccountPaymentMethodLine {
  partner_d
  assertRegisterPayment(expected_journal, expected_payment_method, move_partner, payment_method_line)
  setUpClass()
  test_move_register_payment_view()
  test_move_register_payment_wizard()
  test_multiple_moves_register_payment()
}
class "TestAccountPaymentRegister" as odoo_src.odoo.addons.account.tests.test_account_payment_register.TestAccountPaymentRegister {
  get_wizard_available_journals(wizard)
  setUpClass()
  test_branch_user_register_payment()
  test_epd_and_cash_rounding()
  test_group_payment_method_with_and_without_discount()
  test_group_payment_method_with_and_without_discount_and_refund()
  test_installment_mode_multiple_batches()
  test_installment_mode_single_batch()
  test_keep_user_amount()
  test_payment_method_different_type_single_batch_not_grouped()
  test_payment_register_with_next_payment_date()
  test_payment_with_branch()
  test_register_foreign_currency_on_invoice_exchange_writeoff_account()
  test_register_foreign_currency_on_payment_exchange_writeoff_account()
  test_register_payment_constraints()
  test_register_payment_different_type_single_batch_not_grouped()
  test_register_payment_doesnt_send_email()
  test_register_payment_inbound_multiple_bank_account()
  test_register_payment_invoice_comp_curr_payment_foreign_curr()
  test_register_payment_invoice_foreign_curr_payment_comp_curr()
  test_register_payment_multi_batches_grouped()
  test_register_payment_multi_batches_not_grouped()
  test_register_payment_multi_currency_rounding_issue_negative_delta()
  test_register_payment_multi_currency_rounding_issue_positive_delta()
  test_register_payment_multi_currency_rounding_issue_writeoff_higher_amount_reconcile_negative_delta()
  test_register_payment_multi_currency_rounding_issue_writeoff_higher_amount_reconcile_positive_delta()
  test_register_payment_multi_currency_rounding_issue_writeoff_lower_amount_keep_open()
  test_register_payment_multi_currency_rounding_issue_writeoff_lower_amount_reconcile_negative_delta()
  test_register_payment_multi_currency_rounding_issue_writeoff_lower_amount_reconcile_positive_delta()
  test_register_payment_multiple_batch_grouped_with_credit_note()
  test_register_payment_single_batch_grouped_keep_open_higher_amount()
  test_register_payment_single_batch_grouped_keep_open_lower_amount()
  test_register_payment_single_batch_grouped_with_credit_note()
  test_register_payment_single_batch_grouped_writeoff_higher_amount_credit()
  test_register_payment_single_batch_grouped_writeoff_higher_amount_debit()
  test_register_payment_single_batch_grouped_writeoff_lower_amount_credit()
  test_register_payment_single_batch_grouped_writeoff_lower_amount_debit()
  test_register_payment_single_batch_not_grouped()
  test_suggested_default_partner_bank_inbound_payment()
  test_suggested_default_partner_bank_outbound_payment()
}
class "TestAccountPaymentTerms" as odoo_src.odoo.addons.account.tests.test_payment_term.TestAccountPaymentTerms {
  assertPaymentTerm(pay_term, invoice_date, dates)
  setUpClass()
  test_payment_term()
  test_payment_term_compute_method_early_excluded()
  test_payment_term_compute_method_with_cash_discount()
  test_payment_term_compute_method_with_cash_discount_and_cash_rounding()
  test_payment_term_compute_method_without_cash_discount()
  test_payment_term_compute_method_without_cash_discount_with_cash_rounding()
  test_payment_term_days_end_of_month_days_next_month_0()
  test_payment_term_days_end_of_month_nb_days_0()
  test_payment_term_days_end_of_month_nb_days_15()
  test_payment_term_days_end_of_month_on_the()
  test_payment_term_labels()
  test_payment_term_last_balance_line_with_fixed()
  test_payment_term_last_balance_line_with_fixed_negative()
  test_payment_term_last_balance_line_with_fixed_negative_fixed()
  test_payment_term_multi_company()
  test_payment_term_percent_round_calculation()
  test_payment_term_residual_amount_on_last_line()
  test_payment_term_residual_amount_on_last_line_with_fixed_amount_multi_currency()
  test_wrong_payment_term()
}
class "TestAccountReport" as odoo_src.odoo.addons.account.tests.test_account_report.TestAccountReport {
  test_copy_report()
}
class "TestAccountSubcontractingFlows" as odoo_src.odoo.addons.mrp_subcontracting_account.tests.test_subcontracting_account.TestAccountSubcontractingFlows {
  customer_location
  stock_location
  supplier_location
  uom_unit
  test_input_output_accout_with_subcontract()
  test_subcontract_cost_different_when_standard_price()
  test_subcontracting_account_backorder()
  test_subcontracting_account_flow_1()
  test_subcontracting_account_flow_2()
  test_tracked_compo_and_backorder()
}
class "TestAccountTax" as odoo_src.odoo.addons.account.tests.test_account_tax.TestAccountTax {
  default_env_context()
  flush_tracking()
  setUpClass()
  set_up_and_use_tax()
  test_changing_tax_company()
  test_logging_of_repartition_lines_addition_when_tax_is_used()
  test_logging_of_repartition_lines_removal_when_tax_is_used()
  test_logging_of_repartition_lines_reordering_when_tax_is_used()
  test_logging_of_repartition_lines_update_when_tax_is_used()
  test_logging_of_tax_update_when_tax_is_used()
  test_tax_is_used_when_in_transactions()
  test_tax_no_duplicate_in_repartition_line()
}
class "TestAccountTaxDetailsReport" as odoo_src.odoo.addons.account.tests.test_account_move_line_tax_details.TestAccountTaxDetailsReport {
  assertTaxDetailsValues(tax_details, expected_values_list)
  assertTotalAmounts(moves, tax_details)
  setUpClass()
  test_affect_base_amount_1()
  test_affect_base_amount_2()
  test_affect_base_amount_3()
  test_affect_base_amount_4()
  test_affect_base_amount_5()
  test_affect_base_amount_6()
  test_amounts_sign()
  test_broken_configuration()
  test_fixed_tax_with_negative_balance()
  test_fixed_tax_with_negative_quantity()
  test_mixing_tax_inside_and_outside_a_group_of_taxes()
  test_multiple_same_tax_lines()
  test_multiple_same_tax_lines_multi_currencies_manual_edition()
  test_multiple_same_tax_lines_with_analytic()
  test_partitioning_lines_by_moves()
  test_percent_tax_with_negative_balance()
  test_round_globally_rounding()
  test_round_per_line_update()
  test_tax_on_payment()
}
class "TestAccountUblCii" as odoo_src.odoo.addons.account_edi_ubl_cii.tests.test_partner_peppol_fields.TestAccountUblCii {
  check_peppol_vals(partner, expected, reset)
  test_partner_ubl_cii_formats()
  test_peppol_eas_endpoint()
}
class "TestAccountUpdateTaxTagsWizard" as odoo_src.odoo.addons.account_update_tax_tags.tests.test_account_update_tax_tags_wizard.TestAccountUpdateTaxTagsWizard {
  create_invoice(move_type, invoice_amount, currency_id)
  setUpClass()
  test_child_tax_multiple_parent_raises()
  test_update_all_move_type()
  test_update_amls_all_states()
  test_update_caba_taxes_with_negative_line()
  test_update_child_tax()
  test_update_date_from()
  test_update_move_type_entry()
  test_update_multi_company()
  test_update_multiple_taxes()
  test_update_no_tag_after()
  test_update_no_tag_before()
  test_update_tax_tags()
  test_update_with_caba_taxes()
}
class "TestAccrualAllocations" as odoo_src.odoo.addons.hr_holidays.tests.test_accrual_allocations.TestAccrualAllocations {
  assert_allocation_and_balance(allocation, expected_allocation_value, expected_balance_value, msg)
  setAllocationCreateDate(allocation_id, date)
  setUpClass()
  test_accrual_allocation_data_persists()
  test_accrual_allocation_data_with_different_units()
  test_accrual_allocation_data_with_different_units_and_used_days()
  test_accrual_allocation_data_with_different_units_half_day()
  test_accrual_allocation_date_in_the_future()
  test_accrual_allocation_with_virtual_future_leaves()
  test_accrual_allocation_without_working_hours()
  test_accrual_carrover_other_period_end_multi_level()
  test_accrual_carryover_at_allocation()
  test_accrual_carryover_at_other()
  test_accrual_creation_for_history()
  test_accrual_creation_on_anterior_date()
  test_accrual_days_left_under_carryover_maximum()
  test_accrual_hours_with_max_carryover()
  test_accrual_immediate_cron_run()
  test_accrual_leaves_cancel_cron()
  test_accrual_leaves_taken_maximum()
  test_accrual_leaves_taken_maximum_hours()
  test_accrual_lost_first_january()
  test_accrual_lost_previous_days()
  test_accrual_maximum_leaves()
  test_accrual_maximum_leaves_no_limit()
  test_accrual_period_start()
  test_accrual_period_start_level_transfer()
  test_accrual_period_start_multiple_runs()
  test_accrual_period_start_past_start_date()
  test_accrual_plan_with_multiple_levels()
  test_accrual_plan_with_multiple_levels_2()
  test_accrual_skipped_period()
  test_accrual_transition_after_period()
  test_accrual_transition_immediately()
  test_accrual_unlink()
  test_accrual_unused_accrual_reset_to_lost()
  test_accrual_with_report_creation_for_history()
  test_added_type_during_onchange()
  test_cache_invalidation_with_future_leaves()
  test_cancel_invalid_leaves_with_regular_and_accrual_allocations()
  test_carried_over_days_expiry()
  test_carried_over_days_expiry_date_computation()
  test_carried_over_days_expiry_date_computation_2()
  test_carried_over_days_expiry_date_computation_3()
  test_carried_over_days_expiry_date_computation_4()
  test_carried_over_days_expiry_date_computation_5()
  test_carriedover_days_expiration_reset()
  test_check_gain()
  test_check_lastcall_change_regular_to_accrual()
  test_check_max_value()
  test_check_max_value_hours()
  test_compute_allocation_days_after_adding_employee()
  test_consistency_between_cap_accrued_time_and_maximum_leave()
  test_frequency_bimonthly()
  test_frequency_biyearly()
  test_frequency_daily()
  test_frequency_hourly_calendar()
  test_frequency_hourly_worked_hours()
  test_frequency_monthly()
  test_frequency_weekly()
  test_frequency_yearly()
  test_future_accural_time()
  test_future_accural_time_with_leaves_taken_in_the_past()
  test_matching_accrual_and_carryover_dates()
  test_matching_carryover_and_level_transition_dates()
  test_no_days_accrued_on_carryover_date()
  test_set_accrual_allocation_to_zero_from_ui()
  test_start_accrual_gain_time_immediately()
  test_three_levels_accrual()
  test_time_off_balance_computation()
  test_time_off_using_expiring_carried_over_days()
  test_unused_accrual_lost()
  test_unused_accrual_postponed()
  test_unused_accrual_postponed_2()
  test_unused_accrual_postponed_limit()
  test_unused_accrual_postponed_limit_2()
  test_validate_leaves_with_more_days_than_allocation()
  test_yearly_cap()
  test_yearly_cap_constraint()
}
class "TestAccrualAllocations" as odoo_src.odoo.addons.hr_holidays.tests.test_past_accruals.TestAccrualAllocations {
  setUpClass()
}
class "TestAccrualAllocationsAttendance" as odoo_src.odoo.addons.hr_holidays_attendance.tests.test_accrual_allocations.TestAccrualAllocationsAttendance {
  setUpClass()
  test_accrual_allocation_based_on_attendance()
  test_frequency_hourly_attendance()
}
class "TestAcessRightsStates" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAcessRightsStates {
  test_base_user_reset_current_leave()
  test_base_user_reset_other_employee_leave()
  test_base_user_reset_other_employee_leave_and_is_leave_manager_id()
  test_base_user_reset_refused_leave()
  test_holiday_manager_reset_current_leave()
  test_holiday_manager_reset_his_leave()
  test_holiday_manager_reset_other_employee_leave()
  test_holiday_manager_reset_other_employee_leave_and_is_leave_manager_id()
  test_holiday_manager_reset_refused_leave()
  test_holiday_manager_reset_self_and_is_manager_id()
  test_holiday_user_reset_current_leave()
  test_holiday_user_reset_his_leave()
  test_holiday_user_reset_other_employee_leave()
  test_holiday_user_reset_other_employee_leave_and_is_leave_manager_id()
  test_holiday_user_reset_refused_leave()
  test_holiday_user_reset_self_and_is_manager_id()
  test_reset_confirm_status()
}
class "TestActivitySchedule" as odoo_src.odoo.addons.hr.tests.test_mail_activity_plan.TestActivitySchedule {
  test_department()
  test_res_model_compatibility()
  test_responsible()
}
class "TestActivitySchedule" as odoo_src.odoo.addons.hr_fleet.tests.test_mail_activity_plan.TestActivitySchedule {
  setUpClass()
  test_responsible()
}
class "TestActivitySchedule" as odoo_src.odoo.addons.hr_contract.tests.test_mail_activity_plan.TestActivitySchedule {
  setUpClass()
  test_default_due_date()
}
class "TestAddonsFileAccess" as odoo_src.odoo.addons.base.tests.test_misc.TestAddonsFileAccess {
  assertCanRead(path, needle, mode, filter_ext)
  assertCannotAccess(path, ExceptionType, filter_ext)
  assertCannotRead(path, ExceptionType, filter_ext)
  test_file_open()
  test_file_path()
}
class "TestAggregatePdfReports" as odoo_src.odoo.addons.base.tests.test_reports.TestAggregatePdfReports {
  assert_report_creation(report_ref, records, record_to_report)
  setUpClass()
  test_aggregate_report_with_some_resources_reloaded_from_attachment()
  test_aggregate_report_with_some_resources_reloaded_from_attachment_with_multiple_page_report()
}
class "TestAlarm" as odoo_src.odoo.addons.lunch.tests.test_alert.TestAlarm {
  test_cron_sync_active()
  test_cron_sync_create()
  test_cron_sync_nextcall()
}
class "TestAllFilters" as odoo_src.odoo.addons.base.tests.test_ir_filters.TestAllFilters {
  check_filter(name, model, domain, fields, groupby, order, context)
  test_filters()
}
class "TestAllViews" as odoo_src.odoo.addons.base.tests.test_views.TestAllViews {
  test_views()
}
class "TestAllocationRights" as odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAllocationRights {
  request_allocation(user, values)
  setUpClass()
}
class "TestAllocations" as odoo_src.odoo.addons.hr_holidays.tests.test_allocations.TestAllocations {
  change_allocation_type_day()
  change_allocation_type_hours()
  setUpClass()
  test_allocation_category()
  test_allocation_department()
  test_allocation_dropdown_after_period()
  test_allocation_hourly_leave_type()
  test_allocation_multi_employee()
  test_allocation_request_day()
  test_allocation_request_half_days()
  test_allocation_type_hours_with_resource_calendar()
  test_allocation_whole_company()
  test_allowed_change_allocation()
  test_automatic_allocation_type()
  test_create_allocation_from_company_with_no_employee_for_current_user()
  test_disallowed_change_allocation_with_overlapping_allocations()
  test_employee_holidays_archived_display()
  test_leave_allocation_and_leave_request()
  test_leave_allocation_by_removing_employee()
}
class "TestAnalyticAccount" as odoo_src.odoo.addons.mrp_account.tests.test_analytic_account.TestAnalyticAccount {
  test_mandatory_analytic_plan_bom()
  test_mandatory_analytic_plan_workcenter()
}
class "TestAnalyticAccount" as odoo_src.odoo.addons.analytic.tests.test_analytic_account.TestAnalyticAccount {
  analytic_plan
  analytic_sub_plan
  analytic_sub_sub_plan
  setUpClass()
  test_aggregates()
  test_all_account_count_with_subplans()
  test_analytic_account_branches()
  test_analytic_distribution_model()
  test_analytic_plan_account_child()
  test_change_parent_plan()
  test_change_parent_plan_conflict()
  test_change_parent_plan_with_intermediate()
  test_change_plan()
  test_change_plan_conflict()
  test_change_plan_no_conflict()
  test_create_analytic_with_minimal_access()
  test_get_plans_with_option()
  test_get_plans_without_options()
  test_order_analytic_distribution_model()
}
class "TestAnalyticDynamicUpdate" as odoo_src.odoo.addons.analytic.tests.test_analytic_dynamic_update.TestAnalyticDynamicUpdate {
  test_configurations()
}
class "TestAnalyticMixin" as odoo_src.odoo.addons.analytic.tests.test_analytic_mixin.TestAnalyticMixin {
  adm_com_marketing_ad
  adm_commercial_ad
  adm_rd_ad
  adm_sales_admin_ad
  adm_without_ad
  adm_without_ad_1
  setUpClass()
  test_filtered_domain()
}
class "TestAnalyticPlanOperations" as odoo_src.odoo.addons.analytic.tests.test_plan_operations.TestAnalyticPlanOperations {
  test_delete_plan()
  test_delete_plan_with_view()
  test_delete_subplan()
  test_demote_plan()
  test_promote_subplan()
  test_rename_plan()
  test_validate_company_plans()
  test_validate_deleted_account()
}
class "TestAnswerEvents" as odoo_src.odoo.addons.microsoft_calendar.tests.test_answer_events.TestAnswerEvents {
  simple_event
  setUp()
  test_answer_event_with_external_organizer(mock_answer, mock_get_single_event)
  test_attendee_accepts_event_from_odoo_calendar(mock_answer, mock_get_single_event)
  test_attendee_accepts_event_from_outlook_calendar(mock_get_events)
  test_attendee_accepts_event_from_outlook_calendar_synced_by_organizer(mock_get_events)
  test_attendee_declines_event_from_odoo_calendar(mock_answer, mock_get_single_event)
  {abstract}test_attendee_declines_event_from_outlook_calendar()
  test_attendee_declines_event_from_outlook_calendar_synced_by_organizer(mock_get_events)
  test_sync_data_with_stopped_sync()
}
class "TestAnyfy" as odoo_src.odoo.addons.base.tests.test_expression.TestAnyfy {
  test_and_multiple_fields()
  test_and_multiple_many2one_with_subfield()
  test_and_multiple_one2many_with_subfield()
  test_not_and_multiple_many2one_field_with_subfield()
  test_not_and_multiple_one2many_field_with_subfield()
  test_not_or_multiple_fields()
  test_not_or_multiple_many2one_field_with_subfield()
  test_not_or_multiple_one2many_field_with_subfield()
  test_not_single_field()
  test_not_single_many2one_with_subfield()
  test_not_single_one2many_with_subfield()
  test_or_multiple_fields()
  test_or_multiple_many2one_with_subfield()
  test_or_multiple_one2many_with_subfield()
  test_single_field()
  test_single_many2one_with_subfield()
  test_single_one2many_with_subfield()
  test_true_leaf_as_list()
}
class "TestAnzUBLPint" as odoo_src.odoo.addons.l10n_anz_ubl_pint.tests.test_anz_ubl_pint.TestAnzUBLPint {
  setUpClass()
  test_invoice()
}
class "TestApplyInheritanceMoveSpecs" as odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritanceMoveSpecs {
  base_arch
  wrapped_arch
  apply_spec(arch, spec)
  setUp()
  test_incorrect_move_1()
  test_incorrect_move_2()
  test_incorrect_move_3()
  test_move_after()
  test_move_before()
  test_move_inside()
  test_move_replace()
  test_move_with_other_1()
  test_move_with_other_2()
  test_move_with_tail()
}
class "TestApplyInheritanceSpecs" as odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritanceSpecs {
  adv_arch
  base_arch
  setUp()
  test_delete()
  test_incorrect_version()
  test_insert_after()
  test_insert_before()
  test_insert_inside()
  test_invalid_position()
  test_replace_inner()
  test_replace_outer()
  test_target_not_found()
  test_unpack_data()
}
class "TestApplyInheritanceWrapSpecs" as odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritanceWrapSpecs {
  base_arch
  apply_spec(spec)
  setUp()
  test_replace()
}
class "TestApplyInheritedArchs" as odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritedArchs {
}
class "TestAr" as odoo_src.odoo.addons.l10n_ar.tests.common.TestAr {
  setUpClass()
}
class "TestAttachmentController" as odoo_src.odoo.addons.mail.tests.test_attachment_controller.TestAttachmentController {
  test_attachment_partner()
  test_send_attachment_without_body()
}
class "TestAttachmentControllerCommon" as odoo_src.odoo.addons.mail.tests.test_attachment_controller.TestAttachmentControllerCommon {
  setUpClass()
}
class "TestAttendances" as odoo_src.odoo.addons.hr_contract.tests.test_attendances.TestAttendances {
  setUpClass()
  test_incoming_overlapping_contract()
}
class "TestAuditTrail" as odoo_src.odoo.addons.account.tests.test_audit_trail.TestAuditTrail {
  assertTrail(trail, expected)
  create_move()
  get_trail(move)
  setUpClass()
  test_can_unlink_draft()
  test_cant_unlink_message()
  test_cant_unlink_posted()
  test_cant_unlink_tracking_value()
  test_cant_unown_message()
  test_content()
  test_partner_notif()
  test_partner_unlink()
}
class "TestAuditTrailDE" as odoo_src.odoo.addons.l10n_de.tests.test_audit_trail.TestAuditTrailDE {
  setUpClass()
  test_audit_trail_de()
  test_audit_trail_write()
}
class "TestAuthLDAP" as odoo_src.odoo.addons.auth_ldap.tests.test_auth_ldap.TestAuthLDAP {
  opener
  setUp()
  setUpClass()
  test_auth_ldap()
}
class "TestAuthSignupFlow" as odoo_src.odoo.addons.auth_signup.tests.test_auth_signup.TestAuthSignupFlow {
  default_values
  setUp()
  test_compute_signup_url()
  test_confirmation_mail_free_signup()
  test_copy_multiple_users()
  test_notify_unregistered()
}
class "TestAuthSignupFlowWith2faEnforced" as odoo_src.odoo.addons.auth_totp_mail_enforce.tests.test_auth_signup.TestAuthSignupFlowWith2faEnforced {
  setUp()
  test_signup_with_2fa_enforced()
}
class "TestAutoJoin" as odoo_src.odoo.addons.base.tests.test_expression.TestAutoJoin {
  test_auto_join()
  test_nullfields()
}
class "TestAutoPostBills" as odoo_src.odoo.addons.account_edi_ubl_cii.tests.test_autopost_bills.TestAutoPostBills {
  assert_wizard(post_result, expected_nb_bills)
  import_facturx(filename, ref)
  test_autopost_bills()
}
class "TestAutomaticLeaveDates" as odoo_src.odoo.addons.hr_holidays.tests.test_automatic_leave_dates.TestAutomaticLeaveDates {
  setUpClass()
  test_2weeks_calendar()
  test_2weeks_calendar_next_week()
  test_attendance_next_day()
  test_attendance_on_morning()
  test_attendance_previous_day()
  test_multiple_attendance_on_morning()
  test_no_attendances()
  test_single_attendance_on_morning_and_afternoon()
}
class "TestAutomation" as odoo_src.odoo.addons.base_automation.tests.test_automation.TestAutomation {
  test_01_on_create_or_write()
  test_02_on_create_or_write_restricted()
  test_03_on_change_restricted()
  test_04_on_create_or_write_differentiate()
  test_create_automation_rule_for_valid_model()
}
class "TestAvatarAcl" as odoo_src.odoo.addons.mail.tests.discuss.test_avatar_acl.TestAvatarAcl {
  get_avatar_url(record, add_token)
  test_guest_open_guest_avatar()
  test_guest_open_guest_avatar_with_channel()
  test_guest_open_partner_avatar()
  test_guest_open_partner_avatar_with_channel()
  test_partner_open_guest_avatar()
  test_partner_open_guest_avatar_with_channel()
  test_partner_open_partner_avatar()
  test_portal_open_partner_avatar()
  test_portal_open_partner_avatar_with_channel()
}
class "TestAvatarMixin" as odoo_src.odoo.addons.base.tests.test_avatar_mixin.TestAvatarMixin {
  external_partner
  user_without_image
  user_without_name
  setUp()
  test_content_of_generated_partner_avatar()
  test_external_partner_has_default_placeholder_image_as_avatar()
  test_partner_and_user_have_the_same_avatar()
  test_partner_has_avatar_even_if_it_has_no_image()
  test_partner_without_name_has_default_placeholder_image_as_avatar()
}
class "TestBIR2307Generation" as odoo_src.odoo.addons.l10n_ph.tests.test_bir_2307_generation.TestBIR2307Generation {
  setUpClass()
  test_01_no_atc()
  test_02_simple_atc()
  test_03_atc_affected_by_vat()
  test_04_multi_currency()
  test_bir_2307_company()
}
class "TestBarcode" as odoo_src.odoo.addons.base.tests.test_barcode.TestBarcode {
  test_barcode_check_digit()
  test_barcode_encoding()
}
class "TestBarcodeGS1Nomenclature" as odoo_src.odoo.addons.barcodes_gs1_nomenclature.tests.test_barcodes_gs1_nomenclature.TestBarcodeGS1Nomenclature {
  test_gs1_date_to_date()
  test_gs1_extanded_barcode_1()
  test_gs1_extanded_barcode_2_decimal()
}
class "TestBarcodeNomenclature" as odoo_src.odoo.addons.barcodes.tests.test_barcode_nomenclature.TestBarcodeNomenclature {
  setUpClass()
  test_barcode_nomenclature_parse_barcode_ean13_01()
  test_barcode_nomenclature_parse_barcode_ean13_02_sequence()
  test_barcode_nomenclature_parse_barcode_ean8_01()
  test_barcode_nomenclature_parse_barcode_ean8_02_validation_error()
  test_barcode_nomenclature_parse_barcode_ean8_03_value()
  test_barcode_nomenclature_parse_barcode_ean8_04_multiple_rules()
  test_barcode_uri_conversion()
}
class "TestBinaryController" as odoo_src.odoo.addons.mail.tests.test_binary_controller.TestBinaryController {
  test_open_partner_avatar()
  test_open_partner_avatar_has_message()
}
class "TestBinaryControllerCommon" as odoo_src.odoo.addons.mail.tests.test_binary_controller.TestBinaryControllerCommon {
  setUpClass()
}
class "TestBoM" as odoo_src.odoo.addons.mrp.tests.test_bom.TestBoM {
  car
  car_color_attribute_line
  car_color_blue
  car_color_red
  car_gps_attribute_line
  car_gps_no
  car_gps_yes
  color_attribute
  color_blue
  color_red
  dashboard
  dashboard_color_attribute_line
  dashboard_color_blue
  dashboard_color_red
  dashboard_gps_attribute_line
  dashboard_gps_no
  dashboard_gps_yes
  gps
  gps_attribute
  gps_no
  gps_yes
  paint
  paint_color_attribute_line
  paint_color_blue
  paint_color_red
  product_10
  product_9
  setUpClass()
  test_01_explode()
  test_02_explode_rounding()
  test_10_variants()
  test_11_multi_level_variants()
  test_12_multi_level_variants2()
  test_13_bom_kit_qty()
  test_13_bom_kit_qty_multi_uom()
  test_13_negative_on_hand_qty()
  test_14_bom_kit_qty_multi_uom()
  test_19_bom_kit_field_is_kits_bom_with_product_id()
  test_19_bom_kit_field_is_kits_bom_without_product_id()
  test_20_bom_report()
  test_21_bom_report_variant()
  test_22_bom_report_recursive_bom()
  test_archive_operation()
  test_archive_operations()
  test_availability_bom_type_kit()
  test_bom_document()
  test_bom_generated_from_mo()
  test_bom_generated_from_mo_with_byproducts()
  test_bom_generated_from_mo_with_different_uom()
  test_bom_kit_with_sub_kit()
  test_bom_never_attribute()
  test_bom_never_attribute_mix()
  test_bom_overview_for_product_template_with_dynamic_variants()
  test_bom_report_capacity_with_duplicate_components()
  test_bom_report_capacity_with_quantity_of_0()
  test_bom_report_dozens()
  test_bom_report_same_component()
  test_bom_updates_mo()
  test_bom_updates_mo_after_updating_operations()
  test_bom_updates_mo_with_different_uom()
  test_bom_updates_mo_with_pre_prod_picking()
  test_component_when_bom_change()
  test_compute_days_to_prepare_from_mo_if_unavailable()
  test_copy_bom_with_operations()
  test_cycle_on_bom_creation()
  test_cycle_on_bom_sequencing()
  test_cycle_on_bom_unarchive()
  test_cycle_on_legit_apply_variants()
  test_cycle_on_line_creation()
  test_cycle_on_line_update()
  test_indirect_cycle_on_bom_creation()
  test_manual_consumption_bom_line()
  test_operation_blocked_by_another_operation()
  test_replenishment()
  test_report_data_bom_with_0_qty()
  test_update_bom_in_routing_workcenter()
  test_update_operations()
  test_validate_bom_line_with_different_product_variant()
  test_validate_bom_line_with_variant_of_bom_product()
  test_validate_no_bom_line_with_same_product()
  test_validate_no_bom_line_with_same_product_variant()
  test_workorders_on_bom_changes()
}
class "TestBomPrice" as odoo_src.odoo.addons.mrp_account.tests.test_bom_price.TestBomPrice {
  test_00_compute_price()
  test_01_compute_price_operation_cost()
  test_02_compute_byproduct_price()
}
class "TestBomPriceCommon" as odoo_src.odoo.addons.mrp_account.tests.test_bom_price.TestBomPriceCommon {
  setUpClass()
}
class "TestBomPriceSubcontracting" as odoo_src.odoo.addons.mrp_subcontracting_account.tests.test_subcontracting_account.TestBomPriceSubcontracting {
  test_01_compute_price_subcontracting_cost()
  test_02_compute_price_subcontracting_cost()
}
class "TestBrazilianAddress" as odoo_src.odoo.addons.l10n_br_website_sale.tests.test_address.TestBrazilianAddress {
  test_brazilian_address_frontend()
}
class "TestBusController" as odoo_src.odoo.addons.bus.tests.test_health.TestBusController {
  test_health()
}
class "TestBusGC" as odoo_src.odoo.addons.bus.tests.test_bus_gc.TestBusGC {
  test_custom_gc_retention_window()
  test_default_gc_retention_window()
}
class "TestBusPresence" as odoo_src.odoo.addons.mail.tests.discuss.test_bus_presence.TestBusPresence {
  test_receive_presences_as_guest()
  test_receive_presences_as_internal()
  test_receive_presences_as_portal()
}
class "TestBusPresence" as odoo_src.odoo.addons.bus.tests.test_bus_presence.TestBusPresence {
  test_bus_presence_auto_vacuum()
  test_im_status_invalidation()
}
class "TestCIIFR" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_cii_fr.TestCIIFR {
  setUpClass()
  setup_independent_company()
  test_encoding_in_attachment_facturx()
  test_export_import_invoice()
  test_export_import_refund()
  test_export_pdf()
  test_export_tax_included()
  test_export_with_fixed_taxes_case1()
  test_export_with_fixed_taxes_case2()
  test_export_with_fixed_taxes_case3()
  test_facturx_has_no_negative_lines()
  test_import_and_create_partner_facturx()
  test_import_fixed_taxes()
  test_import_fnfe_examples()
  test_import_in_journal_facturx()
  test_import_partner_facturx()
  test_import_tax_included()
}
class "TestCIIUS" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_cii_us.TestCIIUS {
  setUpClass()
  test_import_facturx_us_company()
  test_print_pdf_us_company()
}
class "TestCRMLead" as odoo_src.odoo.addons.crm.tests.test_crm_lead.TestCRMLead {
  assertLeadAddress(lead, street, street2, city, lead_zip, state, country)
  setUpClass()
  test_crm_lead_contact_fields_mixed()
  test_crm_lead_create_pipe_data()
  test_crm_lead_creation_no_partner()
  test_crm_lead_creation_partner()
  test_crm_lead_creation_partner_address()
  test_crm_lead_creation_partner_company()
  test_crm_lead_creation_partner_no_address()
  test_crm_lead_currency_sync()
  test_crm_lead_date_closed()
  test_crm_lead_lost_date_closed()
  test_crm_lead_meeting_display_fields()
  test_crm_lead_partner_sync()
  test_crm_lead_partner_sync_email_phone()
  test_crm_lead_partner_sync_email_phone_corner_cases()
  test_crm_lead_stages()
  test_crm_lead_unlink_calendar_event()
  test_crm_lead_update_contact()
  test_crm_lead_update_dates()
  test_crm_team_alias()
  test_crm_team_alias_helper()
  test_mailgateway()
  test_phone_mobile_search()
  test_phone_mobile_search_format()
  test_phone_mobile_update()
}
class "TestCRMLead" as odoo_src.odoo.addons.crm.tests.test_crm_lead_duplicates.TestCRMLead {
  setUpClass()
  test_assert_initial_values()
  test_crm_lead_duplicates_fetch()
  test_crm_lead_email_domain_criterion()
  test_iap_tools()
}
class "TestCRMLead" as odoo_src.odoo.addons.crm_sms.tests.test_crm_lead.TestCRMLead {
  test_phone_mobile_update()
}
class "TestCRMLeadMultiCompany" as odoo_src.odoo.addons.crm.tests.test_crm_lead_multicompany.TestCRMLeadMultiCompany {
  setUpClass()
  test_gateway_incompatible_company_error_on_incoming_email()
  test_initial_data()
  test_lead_mc_company_computation()
  test_lead_mc_company_computation_env_team_norestrict()
  test_lead_mc_company_computation_env_user_restrict()
  test_lead_mc_company_computation_partner_restrict()
  test_lead_mc_company_form()
  test_lead_mc_company_form_progressives_setup()
  test_lead_mc_company_form_w_partner_id()
}
class "TestCRMLeadSmartCalendar" as odoo_src.odoo.addons.crm.tests.test_crm_lead_smart_calendar.TestCRMLeadSmartCalendar {
  setUpClass()
  test_meeting_creation_from_lead_form()
  test_meeting_view_parameters_1()
  test_meeting_view_parameters_2()
}
class "TestCRMPLS" as odoo_src.odoo.addons.crm.tests.test_crm_pls.TestCRMPLS {
  generate_leads_with_tags(tag_ids)
  setUpClass()
  test_crm_lead_pls_update()
  test_pls_no_share_stage()
  test_predictive_lead_scoring()
  test_predictive_lead_scoring_always_won()
  test_settings_pls_start_date()
  test_team_unlink()
}
class "TestCalendar" as odoo_src.odoo.addons.calendar.tests.test_calendar.TestCalendar {
  CalendarEvent
  event_tech_presentation
  setUp()
  test_activity_event_multiple_meetings()
  test_discuss_videocall()
  test_event_activity()
  test_event_activity_timezone()
  test_event_activity_user_sync()
  test_event_allday()
  test_event_allday_activity_timezone()
  test_event_creation_internal_user_invitation_ics()
  test_event_creation_mail()
  test_event_creation_sudo_other_company()
  test_event_duplication_allday()
  test_event_order()
  test_event_privacy_domain()
  test_meeting_creation_from_partner_form()
  test_recurring_around_dst()
  test_recurring_ny()
  test_search_current_attendee_status()
}
class "TestCalendarController" as odoo_src.odoo.addons.calendar.tests.test_calendar_controller.TestCalendarController {
  event
  other_user
  partner
  user
  setUp()
  test_accept_meeting_authenticated()
  test_accept_meeting_unauthenticated()
}
class "TestCalendarSms" as odoo_src.odoo.addons.calendar_sms.tests.test_calendar_sms.TestCalendarSms {
  setUpClass()
  test_attendees_with_number()
  test_send_reminder_match_both_events()
}
class "TestCalendarTours" as odoo_src.odoo.addons.calendar.tests.test_calendar.TestCalendarTours {
  test_calendar_decline_tour()
  test_calendar_decline_with_everybody_filter_tour()
  test_calendar_delete_tour()
  test_calendar_month_view_start_hour_displayed()
  test_calendar_res_id_fallback_when_res_id_is_0()
  test_default_duration()
}
class "TestCalendarWithRecurrence" as odoo_src.odoo.addons.maintenance.tests.test_calendar_with_recurrence.TestCalendarWithRecurrence {
  test_dblclick_event_from_calendar()
  test_drag_and_drop_calendar_event()
}
class "TestCallbacks" as odoo_src.odoo.addons.base.tests.test_misc.TestCallbacks {
  test_aggregate()
  test_callback()
  test_reentrant()
}
class "TestCaseIndexation" as odoo_src.odoo.addons.attachment_indexation.tests.test_indexation.TestCaseIndexation {
  test_attachment_pdf_indexation()
}
class "TestCertificationFlow" as odoo_src.odoo.addons.hr_skills_survey.tests.test_certification_flow.TestCertificationFlow {
  setUpClass()
  test_resume_line_creation()
}
class "TestChangeDepartment" as odoo_src.odoo.addons.hr_holidays.tests.test_change_department.TestChangeDepartment {
  HolidaysEmployeeGroup
  holidays_status_1
  test_employee_change_department_request_change_department()
}
class "TestChannel" as odoo_src.odoo.addons.hr.tests.test_channel.TestChannel {
  setUpClass()
  test_auto_subscribe_department()
}
class "TestChannelInternals" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_channel.TestChannelInternals {
  setUpClass()
  test_channel_chat_message_post_should_update_last_interest_dt()
  test_channel_command_help_in_channel()
  test_channel_command_help_in_group()
  test_channel_info_get()
  test_channel_info_get_should_update_last_interest_dt()
  test_channel_info_mark_as_read()
  test_channel_member_cannot_be_public_user()
  test_channel_members()
  test_channel_message_post_should_not_allow_adding_wrong_parent()
  test_channel_message_post_with_voice_attachment()
  test_channel_notification()
  test_channel_private_unfollow()
  test_channel_recipients_channel()
  test_channel_recipients_chat()
  test_channel_recipients_mention()
  test_channel_should_generate_correct_default_avatar()
  test_channel_unfollow_should_not_post_message_if_the_partner_has_been_removed()
  test_channel_unsubscribe_auto()
  test_channel_user_synchronize()
  test_channel_write_should_send_notification()
  test_channel_write_should_send_notification_if_image_128_changed()
  test_create_chat_channel_should_only_pin_the_channel_for_the_current_user()
  test_mail_message_starred_group()
  test_multi_company_chat()
  test_set_last_seen_message_should_send_notification_only_once()
}
class "TestChannelRTC" as odoo_src.odoo.addons.mail.tests.discuss.test_rtc.TestChannelRTC {
  maxDiff : NoneType
  test_01_join_call()
  test_10_start_call_in_chat_should_invite_all_members_to_call()
  test_11_start_call_in_group_should_invite_all_members_to_call()
  test_20_join_call_should_cancel_pending_invitations()
  test_21_leave_call_should_cancel_pending_invitations()
  test_25_lone_call_participant_leaving_call_should_cancel_pending_invitations()
  test_30_add_members_while_in_call_should_invite_new_members_to_call()
  test_40_leave_call_should_remove_existing_sessions_of_user_in_channel_and_return_data()
  test_50_garbage_collect_should_remove_old_sessions_and_notify_data()
  test_51_action_disconnect_should_remove_selected_session_and_notify_data()
  test_60_rtc_sync_sessions_should_gc_and_return_outdated_and_active_sessions()
}
class "TestChartTemplate" as odoo_src.odoo.addons.account.tests.test_chart_template.TestChartTemplate {
  setUpClass()
  test_branch()
  test_change_coa()
  test_chart_template_company_without_country()
  test_command_int_values()
  test_inactive_tag_tax()
  test_install_with_translations()
  test_new_tax_rate()
  test_parsed_csv_submodel_being_loaded()
  test_parsed_csv_submodel_being_updated()
  test_remove_fiscal_position_try_loading_force_create_false()
  test_signed_and_unsigned_tags_tax()
  test_unknown_company_fields()
  test_update_account_codes_conflict()
  test_update_reload_no_new_data()
  test_update_tax_with_non_existent_tag()
  test_update_taxes_children_tax_ids()
  test_update_taxes_children_tax_ids_inactive()
  test_update_taxes_conflict_name()
  test_update_taxes_creation()
  test_update_taxes_multi_company()
  test_update_taxes_recreation()
  test_update_taxes_removed_from_templates()
  test_update_taxes_update()
  test_update_taxes_update_rounding()
}
class "TestChorusProXml" as odoo_src.odoo.addons.l10n_fr_facturx_chorus_pro.tests.test_chorus_pro_xml.TestChorusProXml {
  setUpClass()
  test_export_invoice_chorus_pro()
  test_export_invoice_chorus_pro_new()
}
class "TestChromeBrowser" as odoo_src.odoo.addons.base.tests.test_http_case.TestChromeBrowser {
  browser
  setUp()
  test_screencasts()
}
class "TestChromeBrowserOddDimensions" as odoo_src.odoo.addons.base.tests.test_http_case.TestChromeBrowserOddDimensions {
  browser_size : str
}
class "TestClLatamDocumentType" as odoo_src.odoo.addons.l10n_cl.tests.test_latam_document_type.TestClLatamDocumentType {
  setUpClass()
  test_document_type_not_modified_when_partner_changes()
}
class "TestClassSetup" as odoo_src.odoo.addons.base.tests.test_test_suite.TestClassSetup {
  setUpClass()
  {abstract}test_method()
}
class "TestClassTeardown" as odoo_src.odoo.addons.base.tests.test_test_suite.TestClassTeardown {
  tearDownClass()
  {abstract}test_method()
}
class "TestClocCustomization" as odoo_src.odoo.addons.base.tests.test_cloc.TestClocCustomization {
  create_field(name)
  create_server_action(name)
  create_xml_id(module, name, rec)
  test_cloc_exclude_xml_id()
  test_field_no_xml_id()
  test_ignore_auto_generated_computed_field()
  test_several_xml_id()
}
class "TestClocFields" as odoo_src.odoo.addons.base_import_module.tests.test_cloc.TestClocFields {
  create_studio_module()
  test_count_attachment_imported_module()
  test_count_qweb_imported_module()
  test_exclude_attachment_imported_module()
  test_exclude_cloc_imported_module()
  test_exclude_qweb()
  test_fields_from_import_module()
  test_fields_from_studio()
  test_fields_module_name()
}
class "TestClocParser" as odoo_src.odoo.addons.base.tests.test_cloc.TestClocParser {
  test_parser()
}
class "TestClocStdNoCusto" as odoo_src.odoo.addons.base.tests.test_cloc.TestClocStdNoCusto {
  test_no_custo_install()
}
class "TestCloudStorageAttachmentController" as odoo_src.odoo.addons.cloud_storage_google.tests.test_cloud_storage_google_attachment_controller.TestCloudStorageAttachmentController {
  test_cloud_storage_google_attachment_upload()
}
class "TestCloudStorageAttachmentController" as odoo_src.odoo.addons.cloud_storage_azure.tests.test_cloud_storage_azure_attachment_controller.TestCloudStorageAttachmentController {
  test_cloud_storage_azure_attachment_upload()
}
class "TestCloudStorageAzure" as odoo_src.odoo.addons.cloud_storage_azure.tests.test_cloud_storage_azure.TestCloudStorageAzure {
  test_azure_url_validation()
  test_cloud_storage_attachments()
  test_generate_sas_url()
  test_get_user_delegation_key_success()
  test_get_user_delegation_key_wrong_account()
  test_get_user_delegation_key_wrong_info()
  test_get_user_delegation_key_wrong_secret()
  test_uninstall_fail()
  test_uninstall_success()
}
class "TestCloudStorageAzureCommon" as odoo_src.odoo.addons.cloud_storage_azure.tests.test_cloud_storage_azure.TestCloudStorageAzureCommon {
  DUMMY_AZURE_ACCOUNT_NAME : str
  DUMMY_AZURE_CLIENT_ID : str
  DUMMY_AZURE_CLIENT_SECRET : str
  DUMMY_AZURE_TENANT_ID : str
  DUMMY_USER_DELEGATION_KEY
  DUMMY_USER_DELEGATION_KEY_XML : bytes
  container_name : str
  setUp()
}
class "TestCloudStorageGoogle" as odoo_src.odoo.addons.cloud_storage_google.tests.test_cloud_storage_google.TestCloudStorageGoogle {
  test_generate_signed_url()
  test_uninstall_fail()
  test_uninstall_success()
}
class "TestCloudStorageGoogleCommon" as odoo_src.odoo.addons.cloud_storage_google.tests.test_cloud_storage_google.TestCloudStorageGoogleCommon {
  DUMMY_GOOGLE_ACCOUNT_INFO : str
  bucket_name : str
  setUp()
}
class "TestCommand" as odoo_src.odoo.addons.base.tests.test_upgrade_code.TestCommand {
  run_command()
  setUpClass()
  test_upgrade_code_example()
  test_upgrade_code_help()
  test_upgrade_code_standalone()
}
class "TestCommon" as odoo_src.odoo.addons.microsoft_calendar.tests.common.TestCommon {
  attendee_user
  end_date : datetime
  expected_odoo_event_from_outlook : dict
  expected_odoo_recurrency_events_from_outlook
  expected_odoo_recurrency_from_outlook : dict
  organizer_user
  recurrence
  recurrence_end_date
  recurrent_base_event
  recurrent_event_from_outlook_attendee
  recurrent_event_from_outlook_organizer : list
  recurrent_event_interval : int
  recurrent_event_ms_values : dict
  recurrent_event_values : dict
  recurrent_events
  recurrent_events_count : int
  several_events
  simple_event
  simple_event_from_outlook_attendee : dict
  simple_event_from_outlook_organizer : dict
  simple_event_ms_values : dict
  simple_event_values : dict
  start_date : datetime
  assert_dict_equal(dict1, dict2)
  assert_odoo_event(odoo_event, expected_values)
  assert_odoo_recurrence(odoo_recurrence, expected_values)
  call_post_commit_hooks()
  create_events_for_tests()
  mock_datetime_and_now(mock_dt)
  setUp()
  sync_odoo_recurrences_with_outlook_feature()
}
class "TestCommonCustomFields" as odoo_src.odoo.addons.base.tests.test_ir_actions.TestCommonCustomFields {
  COMODEL : str
  MODEL : str
  create_field(name)
  create_view(name)
  setUp()
}
class "TestCommonTimesheet" as odoo_src.odoo.addons.hr_timesheet.tests.test_timesheet.TestCommonTimesheet {
  setUpClass()
}
class "TestCompany" as odoo_src.odoo.addons.mail.tests.test_res_company.TestCompany {
  test_company_colors()
}
class "TestCompany" as odoo_src.odoo.addons.base.tests.test_res_company.TestCompany {
  test_check_active()
  test_create_branch_with_default_parent_id()
  test_logo_check()
}
class "TestCompanyBranch" as odoo_src.odoo.addons.account.tests.test_company_branch.TestCompanyBranch {
  setUpClass()
  test_branch_should_keep_parent_company_currency()
  test_change_record_company()
  test_chart_template_loading()
  test_lock_dates()
  test_reconciliation()
  test_reconciliation_foreign_currency()
  test_switch_company_currency()
}
class "TestCompanyDependent" as odoo_src.odoo.addons.base.tests.test_orm.TestCompanyDependent {
  test_orm_ondelete_restrict()
}
class "TestCompanyLeave" as odoo_src.odoo.addons.hr_holidays.tests.test_company_leave.TestCompanyLeave {
  setUpClass()
  test_01_leave_whole_company()
  test_02_leave_whole_company()
  test_03_leave_whole_company()
  test_04_leave_whole_company()
  test_06_leave_whole_company()
  test_07_leave_whole_company()
}
class "TestComputeRankCommon" as odoo_src.odoo.addons.gamification.tests.test_karma_tracking.TestComputeRankCommon {
  setUpClass()
  test_00_initial_compute()
  test_01_switch_rank()
  test_02_update_rank_without_switch()
  test_03_test_bulk_call()
  test_get_next_rank()
}
class "TestConfigManager" as odoo_src.odoo.addons.base.tests.test_configmanager.TestConfigManager {
  maxDiff : NoneType
  setUp()
  test_01_default_config()
  test_02_config_file()
  test_03_save_default_options()
  test_04_odoo16_config_file()
  test_05_repeat_parse_config()
  test_06_cli()
}
class "TestConsumeComponent" as odoo_src.odoo.addons.mrp.tests.test_consume_component.TestConsumeComponent {
  test_automatic_consume_new_added_component()
  test_no_component_consumption_on_lot_removal()
  test_option_enabled_and_qty_available()
  test_option_enabled_and_qty_not_available()
  test_option_enabled_and_qty_partially_available()
  test_tracked_production_2_steps_manufacturing()
}
class "TestConsumeComponentCommon" as odoo_src.odoo.addons.mrp.tests.test_consume_component.TestConsumeComponentCommon {
  create_bom_lines(bom, products, quantities)
  create_mo(template, count)
  create_quant(product, qty, offset, name)
  executeConsumptionTriggers(mrp_productions)
  setUpClass()
}
class "TestContractCalendars" as odoo_src.odoo.addons.hr_contract.tests.test_calendar_sync.TestContractCalendars {
  setUpClass()
  test_contract_state_incoming_to_open()
  test_contract_transfer_leaves()
  test_set_fully_flexible_contract_should_change_resource_calendar()
}
class "TestContractCommon" as odoo_src.odoo.addons.hr_contract.tests.common.TestContractCommon {
  setUpClass()
}
class "TestContractPublicAccess" as odoo_src.odoo.addons.hr_contract.tests.test_access.TestContractPublicAccess {
  setUpClass()
  test_manager()
  test_manager_access_read()
  test_manager_access_search()
}
class "TestController" as odoo_src.odoo.addons.html_editor.tests.test_controller.TestController {
  setUpClass()
  test_01_upload_document()
  test_03_get_image_info()
  test_04_admin_attachment()
  test_05_internal_link_preview()
}
class "TestControllerCommon" as odoo_src.odoo.addons.mail.tests.test_controller_common.TestControllerCommon {
  setUpClass()
}
class "TestCorsLivechat" as odoo_src.odoo.addons.im_livechat.tests.test_cors_livechat.TestCorsLivechat {
  setUpClass()
  test_access_denied_for_wrong_channel()
  test_access_routes_with_valid_guest_token()
  test_ignore_guest_cookie()
  test_ignore_user_cookie()
}
class "TestCreateEvents" as odoo_src.odoo.addons.microsoft_calendar.tests.test_create_events.TestCreateEvents {
  employee_emp
  holiday
  hr_leave_type
  rd_dept
  response_from_outlook_organizer
  response_from_outlook_organizer_1
  user_employee
  user_hrmanager
  test_create_duplicate_event_microsoft_calendar(mock_insert, mock_get_events)
  test_create_event_for_another_user(mock_insert, mock_get_events)
  test_create_event_with_default_and_undefined_sensitivity()
  test_create_event_with_sync_config_paused(mock_insert)
  test_create_recurrent_event_from_outlook_attendee_calendar(mock_get_events)
  test_create_recurrent_event_from_outlook_organizer_calendar(mock_get_events)
  test_create_recurrent_event_with_sync(mock_insert, mock_get_events)
  test_create_recurrent_event_with_sync_by_another_user(mock_insert, mock_get_events)
  test_create_recurrent_event_without_sync(mock_insert)
  test_create_simple_event_from_outlook_attendee_calendar_and_organizer_does_not_exist_in_odoo(mock_get_events)
  test_create_simple_event_from_outlook_attendee_calendar_and_organizer_exists_in_odoo(mock_get_events)
  test_create_simple_event_from_outlook_attendee_calendar_where_email_addresses_are_capitalized(mock_get_events)
  test_create_simple_event_from_outlook_organizer_calendar(mock_get_events)
  test_create_simple_event_from_outlook_without_organizer(mock_get_events)
  test_create_simple_event_without_email()
  test_create_simple_event_without_sync(mock_insert)
  test_create_videocall_sync_microsoft_calendar(mock_insert, mock_get_events)
  test_forbid_recurrences_creation_synced_outlook_calendar(mock_insert)
  test_new_db_skip_odoo2microsoft_sync_previously_created_events(mock_insert, mock_get_events)
  test_no_videocall_hr_holidays(mock_insert, mock_get_events)
  test_old_db_odoo2microsoft_sync_previously_created_events(mock_insert, mock_get_events)
  test_skip_sync_for_non_synchronized_users_new_events(mock_insert)
  test_sync_create_update_single_event(mock_insert, mock_get_events)
}
class "TestCreateRecurrentEvents" as odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestCreateRecurrentEvents {
  setUpClass()
  test_all_day_date()
  test_ambiguous_dst_time_spring()
  test_ambiguous_dst_time_winter()
  test_ambiguous_full_day()
  test_backward_pass_dst()
  test_dst_timezone()
  test_monthly_count_by_date()
  test_monthly_count_by_date_31()
  test_monthly_until_by_day()
  test_monthly_until_by_day_last()
  test_recurrency_with_this_event()
  test_videocall_recurrency()
  test_weekly_count()
  test_weekly_interval_2()
  test_weekly_interval_2_week_start_sunday()
  test_weekly_until()
  test_yearly_count()
}
class "TestCrmCommon" as odoo_src.odoo.addons.crm.tests.common.TestCrmCommon {
  FIELDS_FIRST_SET : list
  merge_fields : list
  assertLeadMerged(opportunity, leads)
  setUpClass()
}
class "TestCrmDigest" as odoo_src.odoo.addons.crm.tests.test_digest.TestCrmDigest {
  setUpClass()
  test_kpi_crm_lead_created_value()
}
class "TestCrmLeadMailTrackingDuration" as odoo_src.odoo.addons.crm.tests.test_crm_lead.TestCrmLeadMailTrackingDuration {
  setUpClass()
  test_crm_lead_mail_tracking_duration()
  test_crm_lead_mail_tracking_duration_batch()
  test_crm_lead_queries_batch_mail_tracking_duration()
}
class "TestCrmMailActivity" as odoo_src.odoo.addons.crm.tests.test_crm_activity.TestCrmMailActivity {
  setUpClass()
  test_crm_activity_next_action()
  test_crm_activity_ordering()
  test_crm_activity_recipients()
}
class "TestCrmMailPlugin" as odoo_src.odoo.addons.crm_mail_plugin.tests.test_crm_mail_plugin.TestCrmMailPlugin {
  test_crm_lead_create_multi_company()
  test_get_contact_data()
}
class "TestCursorHooks" as odoo_src.odoo.addons.base.tests.test_db_cursor.TestCursorHooks {
  log : list
  prepare_hooks(cr)
  setUp()
  test_hooks_on_cursor()
  test_hooks_on_testcursor()
}
class "TestCursorHooksTransactionCaseCleanup" as odoo_src.odoo.addons.base.tests.test_db_cursor.TestCursorHooksTransactionCaseCleanup {
  assertHookData()
  {abstract}initial_callback()
  {abstract}other_callback()
  setUpClass()
  test_1_isolation()
  test_2_isolation()
  test_3_isolation()
  test_4_isolation()
  test_5_isolation()
}
class "TestCustomFields" as odoo_src.odoo.addons.base.tests.test_ir_actions.TestCustomFields {
  test_create_binary()
  test_create_custom()
  test_create_unique()
  test_create_valid()
  test_related_field()
  test_relation_of_a_custom_field()
  test_remove_with_view()
  test_remove_without_view()
  test_rename_custom()
  test_rename_unique()
  test_rename_valid()
  test_rename_with_view()
  test_rename_without_view()
  test_selection()
  test_unlink_base()
  test_unlink_inherited_custom()
  test_unlink_with_dependant()
  test_unlink_with_inverse()
}
class "TestCustomFieldsPostInstall" as odoo_src.odoo.addons.base.tests.test_ir_actions.TestCustomFieldsPostInstall {
  test_add_field_valid()
}
class "TestDDT" as odoo_src.odoo.addons.l10n_it_stock_ddt.tests.test_ddt.TestDDT {
  inv1
  inv2
  so
  setUpClass()
  test_ddt_flow()
  test_ddt_flow_2()
}
class "TestDashboard" as odoo_src.odoo.addons.hr_holidays.tests.test_dashboard.TestDashboard {
  test_dashboard_special_days()
}
class "TestDataRecycle" as odoo_src.odoo.addons.data_recycle.tests.test_data_recycle.TestDataRecycle {
  setUpClass()
  test_include_archived()
  test_recycle_archive()
  test_recycle_domain()
  test_recycle_flow()
  test_recycle_notification()
  test_recycle_unlink()
}
class "TestDateRangeFunction" as odoo_src.odoo.addons.base.tests.test_misc.TestDateRangeFunction {
  test_date_range_with_date()
  test_date_range_with_hour()
  test_date_range_with_inconsistent_datetimes()
  test_date_range_with_mismatching_zones()
  test_date_range_with_naive_datetimes()
  test_date_range_with_timezone_aware_datetimes_other_than_utc()
}
class "TestDateUtils" as odoo_src.odoo.addons.base.tests.test_date_utils.TestDateUtils {
  test_fiscal_year()
}
class "TestDebugger" as odoo_src.odoo.addons.base.tests.test_views.TestDebugger {
  test_t_debug_in_qweb_based_views()
}
class "TestDefaultView" as odoo_src.odoo.addons.base.tests.test_views.TestDefaultView {
  testDefaultViewBase()
  testDefaultViewPrimary()
}
class "TestDeleteEvents" as odoo_src.odoo.addons.microsoft_calendar.tests.test_delete_events.TestDeleteEvents {
  setUp()
  test_archive_several_events_at_once(mock_delete)
  test_archive_simple_event_from_odoo_attendee_calendar(mock_delete)
  test_archive_simple_event_from_odoo_organizer_calendar(mock_delete)
  test_cancel_simple_event_from_outlook_organizer_calendar(mock_get_events)
  {abstract}test_delete_all_events_from_recurrence_from_outlook_calendar(mock_get_events)
  test_delete_first_event_and_future_from_recurrence_from_outlook_calendar(mock_get_events)
  test_delete_first_event_from_recurrence_from_odoo_calendar(mock_delete)
  test_delete_first_event_from_recurrence_from_outlook_calendar(mock_get_events)
  test_delete_one_event_and_future_from_recurrence_from_outlook_calendar(mock_get_events)
  test_delete_one_event_from_recurrence_from_odoo_calendar(mock_delete)
  test_delete_one_event_from_recurrence_from_outlook_calendar(mock_get_events)
  test_delete_recurrence_previously_synced(mock_delete)
  test_delete_simple_event_from_odoo_attendee_calendar(mock_delete)
  test_delete_simple_event_from_odoo_organizer_calendar(mock_delete)
  {abstract}test_delete_simple_event_from_outlook_attendee_calendar()
  test_delete_single_event_from_recurrence_from_odoo_calendar(mock_delete)
  test_delete_synced_event_with_sync_config_paused(mock_delete)
  test_forbid_recurrence_unlinking_list_view()
}
class "TestDeliveryAvailability" as odoo_src.odoo.addons.delivery.tests.test_delivery_availability.TestDeliveryAvailability {
  sale_order
  setUpClass()
  test_00_order_with_heavy_product_simple()
  test_01_order_with_heavy_product_different_uom()
  test_02_order_with_big_product_simple()
  test_03_order_with_big_product_different_uom()
  test_04_check_must_have_tag()
  test_05_check_excluded_tag()
  test_06_check_tags_complex()
}
class "TestDeliveryCost" as odoo_src.odoo.addons.delivery.tests.test_delivery_cost.TestDeliveryCost {
  a_sale
  delivery_sale_order_cost
  product_consultant
  sale_normal_delivery_charges
  setUpClass()
  test_00_delivery_cost()
  test_01_delivery_cost_from_pricelist()
  test_01_taxes_on_delivery_cost()
  test_02_delivery_cost_from_different_currency()
  test_base_on_rule_currency_is_converted()
  test_delivery_product_taxes_on_branch()
  test_estimated_weight()
  test_fixed_price_margins()
  test_get_invalid_delivery_weight_lines()
  test_price_with_weight_volume_variable()
  test_update_weight_in_shipping_when_change_quantity()
}
class "TestDeliveryPickingBatch" as odoo_src.odoo.addons.delivery_stock_picking_batch.tests.test_delivery_picking_batch.TestDeliveryPickingBatch {
  setUpClass()
  test_batch_picking_pack_shipping_weight_compute()
}
class "TestDictToXml" as odoo_src.odoo.addons.account.tests.test_dict_to_xml.TestDictToXml {
  assertXmlEqual(element1, element2)
  test_10_empty_node()
  test_11_render_empty_node()
  test_21_simple_node()
  test_22_simple_node_with_nsmap()
  test_31_compound_node()
  test_32_compound_node_render_empty_nodes()
  test_33_compound_node_with_template()
  test_34_compound_node_with_template_raises()
  test_35_compound_node_with_template_and_nsmap()
  test_40_complex_example()
  test_41_complex_example_render_empty_nodes()
}
class "TestDictTools" as odoo_src.odoo.addons.base.tests.test_misc.TestDictTools {
  test_readonly_dict()
}
class "TestDigest" as odoo_src.odoo.addons.digest.tests.test_digest.TestDigest {
  mock_datetime_and_now(mock_dt)
  setUpClass()
  test_assert_initial_values()
  test_digest_kpi_res_users_connected_value()
  test_digest_numbers()
  test_digest_subscribe()
  test_digest_tip_description()
  test_digest_tone_down()
  test_digest_tone_down_wlogs()
}
class "TestDigestCommon" as odoo_src.odoo.addons.digest.tests.common.TestDigestCommon {
  setUpClass()
}
class "TestDiscussAction" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_action.TestDiscussAction {
  test_go_back_to_thread_from_breadcrumbs()
}
class "TestDiscussAttachmentController" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_attachment_controller.TestDiscussAttachmentController {
  test_attachment_allowed_upload_public_channel()
  test_attachment_not_allowed_upload_public_channel()
}
class "TestDiscussBinaryController" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_binary_controller.TestDiscussBinaryController {
  test_01_guest_avatar_private_channel()
  test_01_guest_avatar_public_channel()
  test_01_partner_avatar_private_channel()
  test_01_partner_avatar_public_channel()
  test_02_guest_avatar_private_channel()
  test_02_guest_avatar_public_channel()
  test_02_partner_avatar_private_channel()
  test_02_partner_avatar_public_channel()
  test_03_guest_avatar_private_channel()
  test_03_guest_avatar_public_channel()
  test_03_partner_avatar_private_channel()
  test_03_partner_avatar_public_channel()
  test_04_guest_avatar_private_channel()
  test_04_partner_avatar_private_channel()
  test_05_guest_avatar_private_channel()
  test_05_partner_avatar_private_channel()
  test_open_guest_avatar()
}
class "TestDiscussBinaryControllerCommon" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_binary_controller.TestDiscussBinaryControllerCommon {
  setUpClass()
}
class "TestDiscussChannelAccess" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_channel_access.TestDiscussChannelAccess {
  setUpClass()
  test_01_discuss_channel_access()
  test_02_discuss_sub_channel_access()
  test_10_discuss_channel_member_access()
  test_11_discuss_sub_channel_member_access()
}
class "TestDiscussChannelMember" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_channel_member.TestDiscussChannelMember {
  setUpClass()
  test_channel_member_invite_with_guest()
  test_group_01()
  test_group_invite()
  test_group_leave()
  test_group_members()
  test_group_restricted_channel()
  test_public_channel()
  test_unread_counter_with_message_post()
  test_unread_counter_with_message_post_multi_channel()
}
class "TestDiscussMessageUpdateController" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_message_update_controller.TestDiscussMessageUpdateController {
  test_message_update_guest_as_owner()
  test_message_update_public_channel()
}
class "TestDiscussSubChannels" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_sub_channels.TestDiscussSubChannels {
  test_01_gc_unpin_outdated_sub_channels()
  test_02_sub_channel_members_sync_with_parent()
  test_03_cannot_create_recursive_sub_channel()
  test_04_sub_channel_panel_search()
  test_05_cannot_upate_first_message_nor_parent_channel()
  test_06_initial_message_must_belong_to_parent_channel()
  test_07_unlink_sub_channel()
  test_08_sub_channel_message_author_member()
}
class "TestDiscussThreadController" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_thread_controller.TestDiscussThreadController {
  test_internal_channel_message_post_access()
  test_public_channel_message_post_access()
  test_public_channel_message_post_partner_emails()
  test_public_channel_message_post_partner_ids()
}
class "TestDiscussTools" as odoo_src.odoo.addons.mail.tests.test_discuss_tools.TestDiscussTools {
  test_010_store_dict()
  test_011_store_dict_update_same_id()
  test_012_store_dict_update_multiple_ids()
  test_014_store_dict_update_multiple_ids_list()
  test_020_store_list()
  test_021_store_list_append()
  test_030_store_add_key()
  test_040_store_invalid()
  test_042_store_invalid_missing_id()
  test_050_store_dict_to_list()
  test_051_store_list_to_dict()
  test_060_store_data_empty_val()
  test_061_store_data_empty_not_empty()
  test_110_store_store_singleton()
  test_111_store_store_dict_update()
  test_130_store_store_add_key()
  test_140_store_store_invalid_bool()
  test_141_store_store_invalid_list()
  test_160_store_store_data_empty_val()
  test_161_store_store_data_empty_not_empty()
  test_210_store_thread_dict()
  test_211_store_thread_dict_update_same_id()
  test_212_store_thread_dict_update_multiple_ids()
  test_213_store_thread_dict_update_multiple_models()
  test_214_store_thread_dict_update_multiple_models_list()
  test_220_store_thread_list()
  test_221_store_thread_list_append()
  test_230_store_thread_add_key()
  test_240_store_thread_invalid_bool()
  test_241_store_thread_invalid_list()
  test_242_store_thread_invalid_missing_id()
  test_243_store_thread_invalid_missing_model()
  test_250_store_thread_dict_to_list()
  test_251_store_thread_list_to_dict()
  test_260_store_thread_data_empty_val()
  test_261_store_thread_data_empty_not_empty()
}
class "TestDocTypes" as odoo_src.odoo.addons.l10n_uy.tests.test_doc_types.TestDocTypes {
  setUpClass()
  test_credit_note()
  test_debit_note()
}
class "TestDownloadDocs" as odoo_src.odoo.addons.account_edi_ubl_cii.tests.test_download_docs.TestDownloadDocs {
  setUpClass()
  test_download_invoice_documents_filetype_all()
}
class "TestDownloadDocs" as odoo_src.odoo.addons.account.tests.test_download_docs.TestDownloadDocs {
  setUpClass()
  test_download_invoice_attachments_multiple()
  test_download_invoice_attachments_not_auth()
  test_download_invoice_attachments_one()
  test_download_invoice_documents_filetype_all()
  test_download_invoice_documents_filetype_multiple()
  test_download_invoice_documents_filetype_one()
}
class "TestDuplicatePartnerBank" as odoo_src.odoo.addons.account.tests.test_duplicate_res_partner_bank.TestDuplicatePartnerBank {
  setUpClass()
  test_duplicate_acc_number_b_company()
  test_duplicate_acc_number_different_company()
  test_duplicate_acc_number_no_company()
}
class "TestEGEdiCommon" as odoo_src.odoo.addons.l10n_eg_edi_eta.tests.common.TestEGEdiCommon {
  create_invoice()
  setUpClass()
}
class "TestETransportFlows" as odoo_src.odoo.addons.l10n_ro_edi_stock.tests.test_etransport_flows.TestETransportFlows {
  setUpClass()
  test_export(make_request)
  test_intra_community_purchase(make_request)
  test_send_and_amend_etransport(make_request)
}
class "TestEcAccountMove" as odoo_src.odoo.addons.l10n_ec.tests.test_account_move.TestEcAccountMove {
  setUpClass()
  test_document_number_credit_note()
}
class "TestEdiEwaybillJson" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.tests.test_edi_ewaybill_json.TestEdiEwaybillJson {
  test_edi_ewaybill_transporter_gst()
  test_edi_json()
}
class "TestEdiEwaybillJson" as odoo_src.odoo.addons.l10n_in_edi_ewaybill.tests.test_edi_ewaybill_distance.TestEdiEwaybillJson {
  mockEwaybillGateway1()
  mockEwaybillGateway2()
  test_edi_distance()
}
class "TestEdiFacturaeXmls" as odoo_src.odoo.addons.l10n_es_edi_facturae.tests.test_edi_xml.TestEdiFacturaeXmls {
  create_invoice()
  create_send_and_print(invoices)
  setUpClass()
  test_cannot_generate_unsigned_xml()
  test_discount_100_percent()
  test_generate_signed_xml(date)
  test_generate_with_administrative_centers()
  test_generate_with_invoice_period()
  test_generate_with_payment_means()
  test_import_multiple_invoices()
  test_import_withheld_taxes()
  test_in_invoice()
  test_no_certificate_facturae_not_selected()
  test_refund_invoice()
  test_simplified_invoice()
  test_tax_withheld()
}
class "TestEdiJson" as odoo_src.odoo.addons.l10n_in_edi.tests.test_edi_json.TestEdiJson {
  setUpClass()
  test_edi_json()
}
class "TestEdiJson" as odoo_src.odoo.addons.l10n_eg_edi_eta.tests.test_edi_json.TestEdiJson {
  test_1_simple_test_local_parter_no_tax()
  test_2_simple_test_local_parter_vat_14()
  test_3_simple_test_local_parter_vat_14_discount_credit_note()
  test_4_simple_test_local_parter_vat_14_discount_multiple_tax()
  test_5_simple_test_foreign_partner_exempt_discount()
  test_6_simple_test_foreign_parter_exempt_discount_foreign_currency()
  test_7_simple_test_foreign_parter_exempt_discount_foreign_currency_credit_note()
  test_8_test_serialization_function()
  test_9_test_withholding_tax()
}
class "TestEdiTbaiWebServices" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_web_services.TestEdiTbaiWebServices {
  setUpClass()
  test_edi_gipuzkoa()
}
class "TestEdiTbaiXmls" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_xml.TestEdiTbaiXmls {
  in_invoice
  create_total_refund()
  setUpClass()
  test_xml_tree_cancel()
  test_xml_tree_in_140_post()
  test_xml_tree_in_ic_post()
  test_xml_tree_in_post()
  test_xml_tree_no_deducible_tax()
  test_xml_tree_post()
  test_xml_tree_post_generic_sequence()
  test_xml_tree_post_multicurrency()
  test_xml_tree_post_multitax()
  test_xml_tree_post_refund()
  test_xml_tree_post_retention()
}
class "TestEdiWebServices" as odoo_src.odoo.addons.l10n_es_edi_sii.tests.test_edi_web_services.TestEdiWebServices {
  setUpClass()
  test_edi_bizkaia()
  test_edi_gipuzkoa()
}
class "TestEdiXmls" as odoo_src.odoo.addons.l10n_es_edi_sii.tests.test_edi_xml.TestEdiXmls {
  setUpClass()
  test_010_out_invoice_s_iva10b_s_iva21s()
  test_020_out_invoice_s_iva10b_s_iva0_ns()
  test_030_out_invoice_s_iva10b_s_req014_s_iva21s_s_req52()
  test_040_out_refund_s_iva10b_s_iva10b_s_iva21s()
  test_050_out_invoice_s_iva0_sp_i_s_iva0_ic()
  test_060_out_refund_s_iva0_sp_i_s_iva0_ic()
  test_070_out_invoice_s_iva_e_s_iva0_e()
  test_080_out_refund_s_iva0_sp_i_s_iva0_ic()
  test_085_out_refund_s_iva0_sp_i_s_iva0_ic_multi_currency()
  test_090_in_invoice_p_iva10_bc_p_irpf19_p_iva21_sc_p_irpf19()
  test_100_in_refund_p_iva10_bc()
  test_110_in_invoice_p_iva10_bc_p_req014_p_iva21_sc_p_req52()
  test_120_in_invoice_p_iva21_sp_ex()
  test_130_in_invoice_p_iva0_ns_p_iva10_bc()
  test_140_out_invoice_s_iva10b_s_irpf1()
  test_150_in_invoice_p_iva10_bc_p_irpf1()
  test_160_in_refund_p_iva10_bc_p_irpf1()
  test_165_in_refund_p_iva10_bc_p_irpf1_multi_currency()
  test_170_in_invoice_dua()
  test_180_in_invoice_iva21_sp_in_iva21_ic_bc()
  test_190_in_refund_iva21_sp_in_iva21_ic_bc()
  test_200_in_invoice_p_iva12_agr()
}
class "TestEdiZatca" as odoo_src.odoo.addons.l10n_sa_edi.tests.test_edi_zatca.TestEdiZatca {
  testCreditNoteSimplified()
  testCreditNoteStandard()
  testDebitNoteSimplified()
  testDebitNoteStandard()
  testInvoiceSimplified()
  testInvoiceStandard()
  testInvoiceWithDownpayment()
  testInvoiceWithRetention()
}
class "TestEfakturCoretax" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.tests.test_l10n_id_efaktur_coretax.TestEfakturCoretax {
  setUpClass()
  test_download_efaktur_invalid_customer()
  test_download_efaktur_invalid_invoice()
  test_efaktur_change_facility_add_info()
  test_efaktur_invalid_kode_07_08()
  test_efaktur_tax_include()
  test_efaktur_tax_include_with_discount()
  test_efaktur_xml_luxury_goods()
  test_efaktur_xml_multiple_invoices()
  test_efaktur_xml_multiple_lines()
  test_efaktur_xml_partner_edit()
  test_efaktur_xml_trx_01()
  test_efaktur_xml_trx_04()
  test_efaktur_xml_trx_07()
  test_invoice_user_main_contact()
  test_product_code_default()
}
class "TestEmailTools" as odoo_src.odoo.addons.base.tests.test_mail.TestEmailTools {
  setUpClass()
  test_email_anonymize()
  test_email_domain_normalize()
  test_email_formataddr()
  test_email_normalize()
  test_email_re()
  test_email_split()
  test_email_split_and_format()
  test_email_split_tuples()
  test_extract_rfc2822_addresses()
  test_single_email_re()
}
class "TestEmbeddedActionsBase" as odoo_src.odoo.addons.base.tests.test_ir_embedded_actions.TestEmbeddedActionsBase {
  context : dict
  get_embedded_actions_ids(parent_action)
  setUpClass()
  test_can_delete_custom_embedded_action()
  test_cannot_delete_default_embedded_action()
  test_create_embedded_action_with_action_and_python_method()
  test_domain_on_embedded_action()
  test_groups_on_embedded_action()
  test_parent_has_embedded_actions()
}
class "TestEmbeddedFilters" as odoo_src.odoo.addons.base.tests.test_ir_filters.TestEmbeddedFilters {
  USER_ID
  USER_NG
  action_1
  embedded_action_1
  embedded_action_2
  parent_action
  setUp()
  test_global_filters_with_embedded_action()
  test_global_filters_with_no_embedded_action()
}
class "TestEmployee" as odoo_src.odoo.addons.hr_org_chart.tests.test_employee.TestEmployee {
  setUpClass()
  test_hierarchy_read()
  test_is_subordinate()
}
class "TestEmployeeDeletion" as odoo_src.odoo.addons.hr_org_chart.tests.test_employee_deletion.TestEmployeeDeletion {
  test_employee_deletion()
}
class "TestEmployeeUi" as odoo_src.odoo.addons.hr.tests.test_ui.TestEmployeeUi {
  test_employee_profile_tour()
}
class "TestEquipment" as odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipment {
  test_10_equipment_request_category()
  test_forever_maintenance_repeat_type()
  test_update_multiple_maintenance_request_record()
}
class "TestEquipmentCommon" as odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipmentCommon {
  equipment
  equipment_monitor
  main_company
  maintenance_request
  maintenance_team
  manager
  res_users
  user
  setUp()
}
class "TestEquipmentMulticompany" as odoo_src.odoo.addons.maintenance.tests.test_maintenance_multicompany.TestEquipmentMulticompany {
  test_00_equipment_multicompany_user()
}
class "TestEquipmentPostInstall" as odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipmentPostInstall {
  test_basic_access_and_new_equipment()
}
class "TestEsEdiCommon" as odoo_src.odoo.addons.l10n_es_edi_sii.tests.common.TestEsEdiCommon {
  create_invoice()
  setUpClass()
}
class "TestEsEdiTbaiCommon" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommon {
  create_invoice()
  setUpClass()
}
class "TestEsEdiTbaiCommonBizkaia" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonBizkaia {
  RESPONSE_HEADERS_FAILURE : dict
  RESPONSE_HEADERS_SUCCESS : dict
  setUpClass()
}
class "TestEsEdiTbaiCommonGipuzkoa" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonGipuzkoa {
  setUpClass()
}
class "TestEvalContext" as odoo_src.odoo.addons.base.tests.test_ir_model.TestEvalContext {
  test_module_usage()
}
class "TestEventBoothCommon" as odoo_src.odoo.addons.event_booth.tests.common.TestEventBoothCommon {
  setUpClass()
}
class "TestEventBoothSale" as odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSale {
  test_event_booth_prices_with_sale_order()
  test_event_booth_registrations_inverse()
}
class "TestEventBoothSaleCommon" as odoo_src.odoo.addons.event_booth_sale.tests.common.TestEventBoothSaleCommon {
  setUpClass()
}
class "TestEventBoothSaleInvoice" as odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSaleInvoice {
  setUpClass()
  test_event_booth_with_invoice()
}
class "TestEventBoothSaleWData" as odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSaleWData {
  setUpClass()
}
class "TestEventCrmCommon" as odoo_src.odoo.addons.event_crm.tests.common.TestEventCrmCommon {
  setUpClass()
}
class "TestEventCrmFlow" as odoo_src.odoo.addons.event_crm.tests.test_event_crm_flow.TestEventCrmFlow {
  setUpClass()
  test_action_generate_leads()
  test_assert_initial_data()
  test_event_crm_flow_batch_create()
  test_event_crm_flow_batch_update()
  test_event_crm_flow_per_attendee_single_wo_partner()
  test_event_crm_flow_per_attendee_single_wpartner()
  test_event_crm_trigger_done()
  test_order_rule_duplicate_lead()
}
class "TestEventData" as odoo_src.odoo.addons.event_booth.tests.test_event_internals.TestEventData {
  test_event_configuration_booths_from_type()
}
class "TestEventData" as odoo_src.odoo.addons.event_booth.tests.test_event_booth_internals.TestEventData {
  test_event_booth_contact()
}
class "TestEventData" as odoo_src.odoo.addons.event_sale.tests.test_event_internals.TestEventData {
  test_event_configuration_from_type()
  test_event_registrable()
}
class "TestEventData" as odoo_src.odoo.addons.event_booth_sale.tests.test_event_internals.TestEventData {
  test_event_configuration_booths_from_type()
}
class "TestEventData" as odoo_src.odoo.addons.event.tests.test_event_internals.TestEventData {
  test_event_configuration_from_type()
  test_event_configuration_mails_from_type()
  test_event_configuration_note_from_type()
  test_event_configuration_question_from_type()
  test_event_configuration_tickets_from_type()
  test_event_date_computation()
  test_event_date_timezone()
  test_event_mail_default_config()
  test_event_mail_filter_template_on_event()
  test_event_ongoing()
  test_event_registrable()
  test_event_seats()
}
class "TestEventFlow" as odoo_src.odoo.addons.event.tests.test_event_flow.TestEventFlow {
  test_event_default_datetime()
  test_event_missed_mail_template()
}
class "TestEventInternalsCommon" as odoo_src.odoo.addons.event.tests.test_event_internals.TestEventInternalsCommon {
  setUpClass()
}
class "TestEventInterval" as odoo_src.odoo.addons.hr_calendar.tests.test_event_interval.TestEventInterval {
  setUpClass()
  test_allday_event_during_no_working_day()
  test_allday_event_during_working_day()
  test_empty_event()
  test_event_during_working_day()
}
class "TestEventNotifications" as odoo_src.odoo.addons.calendar.tests.test_attendees.TestEventNotifications {
  setUpClass()
  test_attendee_add_self()
  test_attendee_added()
  test_attendee_added_create()
  test_attendee_added_create_with_specific_states()
  test_attendee_added_multi()
  test_attendee_added_write()
  test_attendee_removed()
  test_attendee_with_invalid_email()
  test_attendee_without_email()
  test_default_attendee()
  test_existing_attendee_added()
  test_multi_attendee_mt_note_default()
  test_push_meeting_start()
}
class "TestEventNotifications" as odoo_src.odoo.addons.calendar.tests.test_event_notifications.TestEventNotifications {
  event
  setUpClass()
  test_bus_notif()
  test_email_alarm()
  test_email_alarm_daily_recurrence()
  test_email_alarm_recurrence()
  test_get_next_potential_limit_alarm()
  test_message_add_and_date_changed()
  test_message_date_changed()
  test_message_date_changed_past()
  test_message_datetime_changed()
  test_message_inactive_date_changed()
  test_message_inactive_invite()
  test_message_invite()
  test_message_invite_allday()
  test_message_invite_email_notif_mass_queued()
  test_message_invite_self()
  test_message_set_inactive_date_changed()
  test_message_set_inactive_invite()
  test_notification_event_timezone()
  test_recurring_meeting_reminder_notification()
}
class "TestEventProductCommon" as odoo_src.odoo.addons.event_product.tests.common.TestEventProductCommon {
  setUpClass()
}
class "TestEventRegistrationData" as odoo_src.odoo.addons.event.tests.test_event_internals.TestEventRegistrationData {
  test_registration_partner_sync()
  test_registration_partner_sync_company()
}
class "TestEventRegistrationPhone" as odoo_src.odoo.addons.event.tests.test_event_internals.TestEventRegistrationPhone {
  setUpClass()
  test_assert_initial_values()
  test_registration_form_phone()
  test_registration_phone_format()
}
class "TestEventSale" as odoo_src.odoo.addons.event_sale.tests.test_event_sale.TestEventSale {
  setUpClass()
  test_adjusted_quantity_in_sale_order()
  test_cancel_so()
  test_compute_sale_status()
  test_event_crm_sale()
  test_event_sale_free_confirm()
  test_event_sale_free_full_event_no_confirm()
  test_event_sale_free_full_ticket_no_confirm()
  test_event_sale_free_no_saleorder()
  test_ticket_price_with_currency_conversion()
  test_ticket_price_with_pricelist_and_tax()
  test_unlink_so()
  test_unlink_soline()
}
class "TestEventSaleCommon" as odoo_src.odoo.addons.event_sale.tests.common.TestEventSaleCommon {
  setUpClass()
}
class "TestEventSpecific" as odoo_src.odoo.addons.event_sale.tests.test_event_specific.TestEventSpecific {
  test_event_change_max_seat_no_side_effect()
}
class "TestEventTicketData" as odoo_src.odoo.addons.event_sale.tests.test_event_internals.TestEventTicketData {
  test_event_ticket_fields()
}
class "TestEventTicketData" as odoo_src.odoo.addons.event.tests.test_event_internals.TestEventTicketData {
  test_event_ticket_fields()
}
class "TestEventTypeData" as odoo_src.odoo.addons.event.tests.test_event_internals.TestEventTypeData {
  test_event_type_fields()
}
class "TestEveryModel" as odoo_src.odoo.addons.base.tests.test_display_name.TestEveryModel {
  test_display_name_new_record()
}
class "TestExpenseCommon" as odoo_src.odoo.addons.hr_expense.tests.common.TestExpenseCommon {
  create_expense(values)
  create_expense_report(values)
  get_new_payment(expense_sheet, amount)
  setUpClass()
}
class "TestExpenses" as odoo_src.odoo.addons.hr_expense.tests.test_expenses.TestExpenses {
  expense_1
  expense_2
  expense_cat_A
  expense_cat_B
  expense_cat_C
  partner_bank_account_1
  partner_bank_account_2
  product_expensed
  product_not_expensed
  test_accounting_date_reset_after_draft_reset()
  test_attachments_in_move_from_company_expense()
  test_attachments_in_move_from_own_expense()
  test_computation_expense_report_date_based_most_recent_expense_today()
  test_computation_expense_report_date_based_user_input()
  test_computation_expense_report_date_with_most_recent_expense_last_month()
  test_computation_expense_report_date_with_most_recent_expense_last_month_with_lock_date()
  test_computation_expense_report_date_with_most_recent_expense_within_month_early()
  test_computation_expense_report_date_with_most_recent_expense_within_month_later()
  test_compute_standard_price_update_warning_product_with_and_without_expense()
  test_corner_case_defaults_values_from_product()
  test_corner_case_expense_prevent_empty_sheet_approval_actions()
  test_corner_case_expense_reported_cannot_be_zero()
  test_create_report_name()
  test_expense_bank_account_of_employee_on_entry_and_register_payment()
  test_expense_by_company_with_caba_tax()
  test_expense_corner_case_changing_employee()
  test_expense_main_flow()
  test_expense_mandatory_analytic_plan_product_category()
  test_expense_multi_currencies()
  test_expense_no_stealing_from_employees()
  test_expense_payment_method()
  test_expense_set_quantity_to_0()
  test_expense_set_total_amount_to_0()
  test_expense_sheet_attachments_sync()
  test_expense_sheet_journal_id()
  test_expense_sheet_multi_company()
  test_expense_sheet_with_line_ids()
  test_expense_split_flow()
  test_expense_standard_price_update_warning()
  test_expense_vendor()
  test_foreign_currencies_total()
  test_move_creation_with_quantity()
  test_payment_edit_fields()
  test_tax_is_used_when_in_transactions()
  test_update_expense_price_on_product_standard_price()
}
class "TestExpensesAccessRights" as odoo_src.odoo.addons.hr_expense.tests.test_expenses_access_rights.TestExpensesAccessRights {
  test_corner_case_expense_sheet_only_accountant_can_unlink_expenses()
  test_expense_access_rights()
  test_expense_sheet_access_rights()
  test_expense_sheet_access_rights_user()
}
class "TestExpensesMailImport" as odoo_src.odoo.addons.hr_expense.tests.test_expenses_mail_import.TestExpensesMailImport {
  test_import_expense_from_email()
  test_import_expense_from_email_employee_without_user()
  test_import_expense_from_email_no_product()
  test_import_expense_from_email_several_employees()
  test_import_expense_from_mail_get_default_expense_sheet_values_errors()
  test_import_expense_from_mail_parsing_subjects()
}
class "TestExpensesStates" as odoo_src.odoo.addons.hr_expense.tests.test_expenses_states.TestExpensesStates {
  setUpClass()
  test_expense_state_synchro_1_regular_flow()
  test_expense_state_synchro_2_employee_specific_flow()
  test_expense_state_synchro_3_company_specific_flow()
}
class "TestExpensesTour" as odoo_src.odoo.addons.hr_expense.tests.test_expenses_tour.TestExpensesTour {
  test_tour_expenses()
}
class "TestExpiringLeaves" as odoo_src.odoo.addons.hr_holidays.tests.test_expiring_leaves.TestExpiringLeaves {
  flex_40h_calendar
  setUpClass()
  test_allocation_with_max_carryover_and_expiring_allocation()
  test_carried_over_days_expiration_date()
  test_carried_over_days_expiration_date_2()
  test_carried_over_leaves_with_maximum()
  test_expiration_date()
  test_expiration_date_2()
  test_expiring_allocation_without_carried_over_leaves()
  test_no_carried_over_leaves()
  test_no_carried_over_leaves_for_flexible_resource()
  test_no_carried_over_leaves_for_fully_flexible_resource()
}
class "TestExpression" as odoo_src.odoo.addons.base.tests.test_expression.TestExpression {
  setUpClass()
  test_00_in_not_in_m2m()
  test_05_not_str_m2m()
  test_09_hierarchy_filtered_domain()
  test_10_eq_lt_gt_lte_gte()
  test_10_equivalent_id()
  test_10_hierarchy_access()
  test_10_hierarchy_in_m2m()
  test_15_equivalent_one2many_1()
  test_15_equivalent_one2many_2()
  test_15_m2o()
  test_15_o2m()
  test_15_o2m_subselect()
  test_20_expression_parse()
  test_30_normalize_domain()
  test_35_negating_thruty_leafs()
  test_40_negating_long_expression()
  test_40_negating_traversal()
  test_accent()
  test_active()
  test_filtered_domain_any_operator()
  test_filtered_domain_order()
  test_filtered_domain_order2()
  test_in_boolean()
  test_in_operator()
  test_invalid()
  test_like_cast()
  test_like_complement_m2o_access()
  test_like_filtered()
  test_like_wildcards()
  test_lp1071710()
  test_or_with_implicit_and()
  test_proper_combine_unit_leaves()
  test_pure_function()
  test_translate_search()
}
class "TestExpression2" as odoo_src.odoo.addons.base.tests.test_expression.TestExpression2 {
  test_long_table_alias()
}
class "TestExternalAPI" as odoo_src.odoo.addons.base.tests.test_api.TestExternalAPI {
  test_call_kw()
}
class "TestFECExport" as odoo_src.odoo.addons.l10n_fr_account.tests.test_fec_export.TestFECExport {
  test_fec_export()
  test_fec_sub_companies()
}
class "TestFetchmailOutlook" as odoo_src.odoo.addons.microsoft_outlook.tests.test_fetchmail_outlook.TestFetchmailOutlook {
  test_connect(mock_imap)
  test_constraints()
}
class "TestFiscal" as odoo_src.odoo.addons.l10n_in.tests.test_l10n_in_fiscal_position.TestFiscal {
  setUpClass()
  test_l10n_in_auto_apply_fiscal_invoices()
  test_l10n_in_company_with_no_vat()
  test_l10n_in_fiscal_for_branch()
  test_l10n_in_fiscal_in_bill_to_ship_to()
  test_l10n_in_fiscal_in_vendor_bills()
  test_l10n_in_setting_up_company()
}
class "TestFiscalPosition" as odoo_src.odoo.addons.account.tests.test_fiscal_position.TestFiscalPosition {
  dst1_tax
  dst2_tax
  eu_intra_b2b
  fp2m
  fr_b2b_state
  fr_b2b_zip100
  src_tax
  world
  setUpClass()
  test_10_fp_country()
  test_20_fp_one_tax_2m()
  test_30_fp_delivery_address()
  test_fiscal_position_constraint()
  test_get_first_fiscal_position()
}
class "TestFleet" as odoo_src.odoo.addons.fleet.tests.test_access_rights.TestFleet {
  test_manager_create_vehicle()
}
class "TestFleet" as odoo_src.odoo.addons.fleet.tests.test_overdue.TestFleet {
  test_exclude_resolved_vehicles_from_overdue()
  test_search_renewal()
}
class "TestFleetVehicleLogServices" as odoo_src.odoo.addons.account_fleet.tests.test_fleet_vehicle_log_services.TestFleetVehicleLogServices {
  setUpClass()
  test_fleet_log_services_amount()
  test_service_bill_change_vehicle()
  test_service_bill_deletion()
  test_service_bill_right_amount()
  test_service_log_deletion()
}
class "TestFloatPrecision" as odoo_src.odoo.addons.base.tests.test_float.TestFloatPrecision {
  test_amount_to_text_10()
  test_float_split_05()
  test_rounding_02()
  test_rounding_03()
  test_rounding_04()
  test_rounding_invalid()
}
class "TestFlows" as odoo_src.odoo.addons.payment.tests.test_flows.TestFlows {
  currency
  partner
  reference : str
  user
  test_10_direct_checkout_public()
  test_11_direct_checkout_portal()
  test_12_direct_checkout_internal()
  test_20_redirect_checkout_public()
  test_21_redirect_checkout_portal()
  test_22_redirect_checkout_internal()
  test_31_tokenize_portal()
  test_32_tokenize_internal()
  test_51_validation_direct_portal()
  test_52_validation_direct_internal()
  test_61_validation_redirect_portal()
  test_62_validation_redirect_internal()
  test_access_disabled_providers_tokens()
  test_direct_payment_triggers_no_payment_request()
  test_pay_no_token()
  test_pay_redirect_if_no_partner_exist()
  test_pay_wrong_currency()
  test_pay_wrong_token()
  test_payment_by_token_triggers_exactly_one_payment_request()
  test_payment_with_redirect_triggers_no_payment_request()
  test_tokenization_input_is_shown_to_logged_in_users()
  test_tokenization_input_is_shown_to_logged_out_users()
  test_transaction_route_rejects_unexpected_kwarg()
  test_transaction_wrong_flow()
  test_transaction_wrong_token()
}
class "TestFlows" as odoo_src.odoo.addons.account_payment.tests.test_payment_flows.TestFlows {
  amount : float
  test_check_payment_access_token_before_rerouting_flow()
  test_check_portal_access_token_before_rerouting_flow()
  test_invoice_overdue_payment_flow()
  test_invoice_payment_flow()
  test_public_user_new_company()
  test_transaction_route_rejects_unexpected_kwarg()
}
class "TestFormCreate" as odoo_src.odoo.addons.base.tests.test_form_create.TestFormCreate {
  test_create_res_bank()
  test_create_res_company()
  test_create_res_country()
  test_create_res_group()
  test_create_res_lang()
  test_create_res_partner()
  test_create_res_users()
}
class "TestFormatLang" as odoo_src.odoo.addons.base.tests.test_misc.TestFormatLang {
  test_currency_object()
  test_decimal_precision()
  test_decimal_precision_and_currency_object()
  test_grouping()
  test_rounding_method()
  test_rounding_method_and_rounding_unit()
  test_rounding_unit()
  test_value_and_digits()
}
class "TestFormatLangDate" as odoo_src.odoo.addons.base.tests.test_misc.TestFormatLangDate {
  test_00_accepted_types()
  test_01_code_and_format()
  test_02_tz()
}
class "TestFrenchLeaves" as odoo_src.odoo.addons.l10n_fr_hr_holidays.tests.test_french_leaves.TestFrenchLeaves {
  setUpClass()
  test_2_weeks_calendar()
  test_calendar_end_week_hole()
  test_calendar_with_holes()
  test_end_of_week()
  test_last_day_half()
  test_leave_full_day_different_working_hours()
  test_leave_type_half_day_different_working_hours()
  test_no_differences()
  test_start_of_week()
}
class "TestFrenchWorkEntries" as odoo_src.odoo.addons.l10n_fr_hr_work_entry_holidays.tests.test_french_work_entries.TestFrenchWorkEntries {
  setUpClass()
  test_create_work_entry_with_french_company()
  test_fill_gaps()
}
class "TestFrozendict" as odoo_src.odoo.addons.base.tests.test_func.TestFrozendict {
  test_frozendict_hash()
  test_frozendict_immutable()
}
class "TestGSTStatusFeature" as odoo_src.odoo.addons.l10n_in_gstin_status.tests.test_check_status.TestGSTStatusFeature {
  mock_responses : dict
  partner1
  partner2
  partner3
  partner4
  partner5
  check_gstin_status(partner, expected_status, mock_response, raises_exception)
  setUp()
  test_gstin_status()
}
class "TestGamificationCommon" as odoo_src.odoo.addons.gamification.tests.test_challenge.TestGamificationCommon {
  badge_good_job
  robot
  user_ids
  setUp()
}
class "TestGccInvoice" as odoo_src.odoo.addons.l10n_gcc_invoice.tests.test_gcc_invoice.TestGccInvoice {
  test_invoice_narration_translation()
}
class "TestGenQRRReference" as odoo_src.odoo.addons.l10n_ch.tests.test_gen_qrr_reference.TestGenQRRReference {
  setUpClass()
  test_no_bank_account()
  test_qrr()
  test_qrr_long_reference()
  test_wrong_currency()
}
class "TestGeoLocalize" as odoo_src.odoo.addons.base_geolocalize.tests.test_geolocalize.TestGeoLocalize {
  test_default_openstreetmap()
  test_googlemap_without_api_key()
}
class "TestGetDiscussChannel" as odoo_src.odoo.addons.im_livechat.tests.test_get_discuss_channel.TestGetDiscussChannel {
  maxDiff : NoneType
  test_channel_get_livechat_visitor_info()
  test_channel_not_pinned_for_operator_before_first_message()
  test_get_discuss_channel()
  test_livechat_manager_can_invite_anyone()
  test_only_active_livechats_returned_by_init_messaging()
  test_read_channel_unpined_for_operator_after_one_day()
  test_unread_channel_not_unpined_for_operator_after_autovacuum()
}
class "TestGetFilters" as odoo_src.odoo.addons.base.tests.test_ir_filters.TestGetFilters {
  test_global_filters()
  test_no_third_party_filters()
  test_own_filters()
}
class "TestGetModelDefinitions" as odoo_src.odoo.addons.bus.tests.test_ir_model.TestGetModelDefinitions {
  test_access_all_model_fields()
  test_access_cr()
  test_relational_fields_with_missing_model()
}
class "TestGetOperator" as odoo_src.odoo.addons.im_livechat.tests.test_get_operator.TestGetOperator {
  operator_id : int
  setUp()
  test_get_by_country()
  test_get_by_country_no_operator_matching_country()
  test_get_by_lang()
  test_get_by_lang_and_country_prioritize_lang()
  test_get_by_lang_both_operator_active()
  test_get_by_lang_no_operator_matching_lang()
  test_in_call_operator_not_prioritized()
  test_operator_in_call_no_more_than_two_chats()
  test_priority_by_number_of_chat()
  test_priority_by_number_of_chat_all_operators_exceed_limit()
  test_priority_by_number_of_chat_with_call_limit_not_exceeded()
}
class "TestGlobalDefaults" as odoo_src.odoo.addons.base.tests.test_ir_filters.TestGlobalDefaults {
  test_new_filter_existing_default()
  test_new_filter_not_default()
  test_update_default_filter()
  test_update_filter_set_default()
}
class "TestGlobalLeaves" as odoo_src.odoo.addons.hr_holidays.tests.test_global_leaves.TestGlobalLeaves {
  setUpClass()
  test_global_leave_keeps_employee_resource_leave()
  test_global_leave_number_of_days_with_new()
  test_global_leave_timezone()
  test_leave_on_calendar_leave()
  test_leave_on_global_leave()
}
class "TestGlobalTimeOff" as odoo_src.odoo.addons.hr_work_entry_contract.tests.test_global_time_off.TestGlobalTimeOff {
  test_gto_no_calendar()
  test_gto_other_calendar()
}
class "TestGoogleEvent" as odoo_src.odoo.addons.google_calendar.tests.test_google_event.TestGoogleEvent {
  test_google_event_readonly()
}
class "TestGroups" as odoo_src.odoo.addons.base.tests.test_base.TestGroups {
  test_apply_groups()
  test_remove_groups()
  test_res_group_copy()
  test_res_group_has_cycle()
  test_res_groups_fullname_search()
}
class "TestGroupsObject" as odoo_src.odoo.addons.base.tests.test_groups.TestGroupsObject {
  setUpClass()
  test_groups_10_hudge_combine()
  test_groups_11_invert_intersect()
  test_groups_1_base()
  test_groups_2_and()
  test_groups_3_or()
  test_groups_3_or_and()
  test_groups_4_gt_lt()
  test_groups_5_invert()
  test_groups_6_invert_gt_lt()
  test_groups_7_various()
  test_groups_8_reduce()
  test_groups_9_distinct()
  test_groups_key()
  test_groups_matches()
  test_groups_unknown()
}
class "TestGroupsOdoo" as odoo_src.odoo.addons.base.tests.test_groups.TestGroupsOdoo {
  parse_repr(group_repr)
  setUpClass()
  test_groups_1_base()
  test_groups_2_from_commat_separator()
  test_groups_3_from_ref()
  test_groups_4_full_empty()
  test_groups_5_contains_user()
  test_groups_6_distinct()
}
class "TestGuestFeature" as odoo_src.odoo.addons.mail.tests.discuss.test_guest_feature.TestGuestFeature {
  test_mark_as_read_as_guest()
  test_subscribe_to_discuss_channel()
  test_subscribe_to_guest_channel()
}
class "TestHTMLTranslation" as odoo_src.odoo.addons.base.tests.test_translate.TestHTMLTranslation {
  test_delay_translations_no_term()
  test_write_non_existing()
}
class "TestHTTPCursor" as odoo_src.odoo.addons.base.tests.test_db_cursor.TestHTTPCursor {
  test_call_kw_readonly()
  test_cursor_keeps_readwriteness()
}
class "TestHasGroup" as odoo_src.odoo.addons.base.tests.test_user_has_group.TestHasGroup {
  group0 : str
  group1 : str
  grp_internal
  grp_internal_xml_id : str
  grp_portal
  grp_portal_xml_id : str
  grp_public
  grp_public_xml_id : str
  test_user
  setUp()
  test_demote_user()
  test_env_uid()
  test_has_group_cleared_cache_on_write()
  test_has_group_with_new_id()
  test_implied_groups()
  test_other_user()
  test_portal_creation()
  test_portal_write()
  test_record()
  test_two_user_types()
  test_two_user_types_implied_groups()
}
class "TestHolidayContract" as odoo_src.odoo.addons.hr_holidays_contract.tests.common.TestHolidayContract {
  create_leave(date_from, date_to, name, employee_id)
  setUpClass()
}
class "TestHolidaysCalendar" as odoo_src.odoo.addons.hr_holidays.tests.test_holidays_calendar.TestHolidaysCalendar {
  test_hours_time_off_request_calendar_view()
}
class "TestHolidaysFlow" as odoo_src.odoo.addons.hr_holidays.tests.test_holidays_flow.TestHolidaysFlow {
  holidays_status_hr
  holidays_status_limited
  holidays_status_manager
  test_00_leave_request_flow_unlimited()
  test_01_leave_request_flow_limited()
  test_10_leave_summary_reports()
  test_sql_constraint_dates()
}
class "TestHolidaysMail" as odoo_src.odoo.addons.hr_holidays.tests.test_holidays_mail.TestHolidaysMail {
  test_email_sent_when_approved()
}
class "TestHolidaysMultiContract" as odoo_src.odoo.addons.hr_holidays_contract.tests.test_multi_contract.TestHolidaysMultiContract {
  setUpClass()
  test_contract_traceability_calculate_nbr_leave()
  test_create_contract_in_leave()
  test_leave_multi_contracts_same_schedule()
  test_leave_multi_contracts_split()
  test_leave_outside_contract()
  test_leave_request_next_contracts()
  test_move_contract_in_leave()
  test_multi_contract_out_of_office()
  test_no_leave_overlapping_contracts()
}
class "TestHolidaysOvertime" as odoo_src.odoo.addons.hr_holidays_attendance.tests.test_holidays_overtime.TestHolidaysOvertime {
  new_attendance(check_in, check_out)
  setUpClass()
  test_allocation_check_overtime_write()
  test_check_overtime()
  test_deduct_button_visibility()
  test_employee_create_allocation()
  test_leave_adjust_overtime()
  test_leave_check_cancel()
  test_leave_check_overtime_write()
  test_public_leave_overtime()
}
class "TestHrApplicant" as odoo_src.odoo.addons.hr_recruitment.tests.test_applicant.TestHrApplicant {
  Applicant
  Candidate
  Category
  applicant
  candidate_0
  candidate_1
  candidate_2
  candidate_3
  category_1
  category_2
  category_3
  setUp()
  test_compute_categ_ids()
  test_update_interviewer_for_multiple_applicants()
}
class "TestHrAttendance" as odoo_src.odoo.addons.hr_attendance.tests.test_hr_attendance_process.TestHrAttendance {
  setUp()
  setUpClass()
  test_change_in_out_mode_when_manual_modification()
  test_employee_state()
  test_hours_today()
}
class "TestHrAttendance" as odoo_src.odoo.addons.hr_attendance.tests.test_hr_attendance_constraints.TestHrAttendance {
  my_attend
  setUpClass()
  test_attendance_1()
  test_attendance_in_before_out()
  test_attendance_list_limited_to_managed_employees()
  test_attendance_no_check_out()
  test_new_attendances()
  test_time_format_attendance()
}
class "TestHrAttendanceDomainTranslation" as odoo_src.odoo.addons.hr_attendance.tests.test_hr_attendance_domain_translation.TestHrAttendanceDomainTranslation {
  setUpClass()
  test_searchbar_with_user_domain()
}
class "TestHrAttendanceKiosk" as odoo_src.odoo.addons.hr_attendance.tests.test_hr_attendance_kiosk.TestHrAttendanceKiosk {
  setUpClass()
  test_employee_count_kiosk()
}
class "TestHrAttendanceOvertime" as odoo_src.odoo.addons.hr_attendance.tests.test_hr_attendance_overtime.TestHrAttendanceOvertime {
  setUpClass()
  test_absence_management()
  test_auto_check_out()
  test_auto_check_out_calendar_tz()
  test_auto_check_out_lunch_period()
  test_auto_check_out_two_weeks_calendar()
  test_no_validation_extra_hours_change()
  test_overtime_both_threshold()
  test_overtime_change_employee()
  test_overtime_company_settings()
  test_overtime_company_threshold()
  test_overtime_employee_threshold()
  test_overtime_far_timezones()
  test_overtime_hours_flexible_resource()
  test_overtime_hours_fully_flexible_resource()
  test_overtime_hours_inside_attendance()
  test_overtime_hours_multiple_flexible_resources()
  test_overtime_lunch()
  test_overtime_multiple()
  test_overtime_unclosed()
  test_overtime_weekend()
  test_refuse_timeoff()
  test_simple_overtime()
}
class "TestHrAttendanceScenario" as odoo_src.odoo.addons.hr_attendance.tests.test_load_scenario.TestHrAttendanceScenario {
  test_load_scenario()
}
class "TestHrCalendarCommon" as odoo_src.odoo.addons.hr_calendar.tests.common.TestHrCalendarCommon {
  setUpClass()
}
class "TestHrCommon" as odoo_src.odoo.addons.hr.tests.common.TestHrCommon {
  setUpClass()
}
class "TestHrContractHistoryGroupby" as odoo_src.odoo.addons.hr_contract.tests.test_hr_contract_history_groupby.TestHrContractHistoryGroupby {
  test_related_activity_state_groupable()
}
class "TestHrContracts" as odoo_src.odoo.addons.hr_contract.tests.test_contract.TestHrContracts {
  create_contract(state, kanban_state, start, end, employee_id)
  setUpClass()
  test_check_multi_company_contract_expiration()
  test_contract_calendar_update()
  test_contract_unusual_days()
  test_copy_employee_contract_create()
  test_current_contract_stage_change()
  test_draft_overlapping_contract()
  test_first_contract_date()
  test_incoming_overlapping_contract()
  test_overlapping_contract_no_end()
  test_overlapping_contract_no_end2()
  test_pending_overlapping_contract()
  test_set_employee_contract_create()
  test_set_employee_contract_write()
}
class "TestHrContracts" as odoo_src.odoo.addons.hr_contract.tests.test_auto_status.TestHrContracts {
  contract
  apply_cron()
  setUpClass()
  test_contract_auto_expire()
  test_contract_enddate()
  test_contract_pending_work_permit_expire()
  test_contract_start_date()
  test_employee_contractwarning()
}
class "TestHrDepartment" as odoo_src.odoo.addons.hr.tests.test_hr_department.TestHrDepartment {
  setUpClass()
  test_dapartment_total_employee_count()
}
class "TestHrEmployee" as odoo_src.odoo.addons.hr.tests.test_hr_employee.TestHrEmployee {
  employee_without_image
  user_without_image
  setUp()
  test_availability_user_infos_employee()
  test_avatar()
  test_badge_validation()
  test_change_user_on_employee()
  test_change_user_on_employee_keep_partner()
  test_change_user_on_employee_multi_company()
  test_employee_create_from_signup()
  test_employee_create_from_user()
  test_employee_from_user()
  test_employee_from_user_tz_no_reset()
  test_employee_has_avatar_even_if_it_has_no_image()
  test_employee_has_same_avatar_as_corresponding_user()
  test_employee_linked_partner()
  test_employee_member_of_department()
  test_employee_resource()
  test_employee_smart_button_multi_company()
  test_employee_update_work_contact_id()
  test_flexible_working_hours()
  test_is_flexible()
  test_set_user_on_new_employee()
}
class "TestHrEmployee" as odoo_src.odoo.addons.hr_contract.tests.test_employee.TestHrEmployee {
  create_contract(state, kanban_state, start, end)
  test_employee_first_contract_date_archived_contract()
  test_employee_first_contract_date_base_case()
  test_employee_first_contract_date_multiple_contracts()
}
class "TestHrEmployeeWebJson" as odoo_src.odoo.addons.hr.tests.test_hr_employee.TestHrEmployeeWebJson {
  setUp()
  test_webjson_employees()
}
class "TestHrFleetDriver" as odoo_src.odoo.addons.hr_fleet.tests.test_hr_fleet_driver.TestHrFleetDriver {
  setUpClass()
  test_driver_sync_with_employee()
  test_driver_sync_with_employee_without_contact()
}
class "TestHrHolidaysAccessRightsCommon" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestHrHolidaysAccessRightsCommon {
  request_leave(user_id, request_date_from, number_of_days, values)
  setUpClass()
}
class "TestHrHolidaysAccessRightsCommon" as odoo_src.odoo.addons.hr_holidays.tests.test_multicompany.TestHrHolidaysAccessRightsCommon {
  setUpClass()
  test_unrelated_public_leave()
}
class "TestHrHolidaysCancelLeave" as odoo_src.odoo.addons.hr_holidays.tests.test_hr_holidays_cancel_leave.TestHrHolidaysCancelLeave {
  setUpClass()
  test_action_cancel_leave()
  test_action_cancel_leave_from_another_person()
  test_action_cancel_leave_in_past()
  test_user_cannot_unarchive_leave()
}
class "TestHrHolidaysCommon" as odoo_src.odoo.addons.hr_holidays.tests.common.TestHrHolidaysCommon {
  setUpClass()
}
class "TestHrHolidaysTour" as odoo_src.odoo.addons.hr_holidays.tests.test_hr_holidays_tour.TestHrHolidaysTour {
  test_hr_holidays_tour()
}
class "TestHrHomeworkingCommon" as odoo_src.odoo.addons.hr_homeworking_calendar.tests.common.TestHrHomeworkingCommon {
  setUpClass()
}
class "TestHrHomeworkingCommon" as odoo_src.odoo.addons.hr_homeworking.tests.test_hr_employee.TestHrHomeworkingCommon {
  setUpClass()
  test_change_current_work_location()
}
class "TestHrHomeworkingHrEmployeeLocation" as odoo_src.odoo.addons.hr_homeworking_calendar.tests.test_hr_employee_location.TestHrHomeworkingHrEmployeeLocation {
  setUpClass()
  test_create_exception_on_top_of_exception_keeps_a_single_record()
  test_set_default_day_location_as_exception_will_delete_exception()
  test_set_location_with_weekly_option_changes_employee_location()
  test_set_location_without_weekly_option_should_create_an_exception()
  test_set_same_location_as_default_one_should_not_create_exception()
}
class "TestHrLeaveMandatoryDays" as odoo_src.odoo.addons.hr_holidays.tests.test_mandatory_days.TestHrLeaveMandatoryDays {
  setUpClass()
  test_department_mandatory_days()
  test_get_mandatory_days()
  test_request_mandatory_days()
}
class "TestHrLeaveType" as odoo_src.odoo.addons.hr_holidays.tests.test_hr_leave_type.TestHrLeaveType {
  test_time_type()
  test_type_creation_right()
  test_users_tz_shift_back()
}
class "TestHrLeaveUninstall" as odoo_src.odoo.addons.hr_holidays.tests.test_uninstall.TestHrLeaveUninstall {
  test_unlink_model()
}
class "TestHrScenario" as odoo_src.odoo.addons.hr.tests.test_scenario.TestHrScenario {
  test_load_scenario()
}
class "TestHrWorkEntry" as odoo_src.odoo.addons.hr_work_entry.tests.test_hr_work_entry.TestHrWorkEntry {
  setUpClass()
  test_work_entry_company_from_employee()
}
class "TestHtmlTools" as odoo_src.odoo.addons.base.tests.test_mail.TestHtmlTools {
  test_append_to_html()
  test_html_html_to_inner_content()
  test_is_html_empty()
  test_nl2br_enclose()
  test_plaintext2html()
  test_prepend_html_content()
}
class "TestHttpCase" as odoo_src.odoo.addons.base.tests.test_http_case.TestHttpCase {
  test_console_error_object()
  test_console_error_string()
  test_console_log_object()
}
class "TestIAP" as odoo_src.odoo.addons.iap.tests.test_iap.TestIAP {
  test_get_account()
}
class "TestImLivechatCommon" as odoo_src.odoo.addons.im_livechat.tests.common.TestImLivechatCommon {
  operator_id : int
  setUp()
  setUpClass()
}
class "TestImLivechatMessage" as odoo_src.odoo.addons.im_livechat.tests.test_message.TestImLivechatMessage {
  maxDiff : NoneType
  password : str
  users
  setUp()
  setUpClass()
  test_chatbot_message_format()
  test_feedback_message()
  test_message_to_store()
  test_update_username()
}
class "TestImLivechatReport" as odoo_src.odoo.addons.im_livechat.tests.test_im_livechat_report.TestImLivechatReport {
  operator
  setUp()
  test_im_livechat_report_channel()
  test_im_livechat_report_operator()
}
class "TestImLivechatSessionHistory" as odoo_src.odoo.addons.im_livechat.tests.test_session_history.TestImLivechatSessionHistory {
  test_session_history_navigation_back_and_forth()
}
class "TestImLivechatSupportPage" as odoo_src.odoo.addons.im_livechat.tests.test_im_livechat_support_page.TestImLivechatSupportPage {
  test_load_modules()
}
class "TestImage" as odoo_src.odoo.addons.base.tests.test_image.TestImage {
  bg_color : tuple
  fill_color : tuple
  img_1080x1920_png
  img_1920x1080_jpeg
  img_1920x1080_png
  img_1x1_png
  img_exif_jpg
  img_svg : bytes
  setUp()
  test_00_base64_to_image()
  test_01_image_to_base64()
  test_02_image_fix_orientation()
  test_03_image_fix_orientation_exif()
  test_10_image_process_source()
  test_11_image_process_size()
  test_12_image_process_verify_resolution()
  test_13_image_process_quality()
  test_14_image_process_crop()
  test_15_image_process_colorize()
  test_16_image_process_format()
  test_17_get_webp_size()
  test_20_image_data_uri()
  test_21_image_guess_size_from_field_name()
  test_ptype_image_to_jpeg()
}
class "TestImportModule" as odoo_src.odoo.addons.base_import_module.tests.test_import_module.TestImportModule {
  test_user
  import_zipfile(files)
  test_import_and_uninstall_module()
  test_import_and_update_module()
  test_import_wrong_dependencies()
  test_import_zip()
  test_import_zip_data_not_in_manifest()
  test_import_zip_extract_only_useful()
  test_import_zip_ignore_unexpected_data_extension()
  test_import_zip_invalid_data()
  test_import_zip_invalid_manifest()
}
class "TestImportModuleHttp" as odoo_src.odoo.addons.base_import_module.tests.test_import_module.TestImportModuleHttp {
  test_check_zip_dependencies()
  test_import_module_assets_http()
  test_import_module_field_file()
  test_import_module_icon()
}
class "TestImportVendorBill" as odoo_src.odoo.addons.account_edi.tests.test_import_vendor_bill.TestImportVendorBill {
  test_retrieve_partner()
}
class "TestIndonesianEfaktur" as odoo_src.odoo.addons.l10n_id_efaktur.tests.test_l10n_id_efaktur.TestIndonesianEfaktur {
  setUpClass()
  test_available_range_count()
  test_change_min_max()
  test_efaktur_consume_code()
  test_efaktur_csv_output_1()
  test_efaktur_csv_output_address()
  test_efaktur_csv_output_decimal_place()
  test_efaktur_delete_range()
  test_efaktur_do_not_consume_code()
  test_efaktur_download_mismatch_flow()
  test_efaktur_download_multi_company()
  test_efaktur_download_reset_draft()
  test_efaktur_download_separate()
  test_efaktur_download_together()
  test_efaktur_nik_with_no_vat()
  test_efaktur_no_vat_nik()
  test_efaktur_post_multi_invoices()
  test_efaktur_release_last_number()
  test_efaktur_release_number_not_last()
  test_efaktur_reverse_invoice_flow()
  test_efaktur_show_error_no_document_invoice()
  test_efaktur_total_rounding_accuracy()
  test_efaktur_use_vat()
  test_multiple_range_select_on_invoice()
  test_next_num()
  test_posting_without_code()
}
class "TestIndonesianEfakturDownload" as odoo_src.odoo.addons.l10n_id_efaktur.tests.test_l10n_id_efaktur_download.TestIndonesianEfakturDownload {
  test_efaktur_download_multiple()
  test_efaktur_download_one_document()
}
class "TestInherits" as odoo_src.odoo.addons.base.tests.test_orm.TestInherits {
  test_copy()
  test_copy_with_ancestor()
  test_create()
  test_create_with_ancestor()
  test_default()
  test_read()
  test_write_date()
}
class "TestIntervals" as odoo_src.odoo.addons.hr_work_entry_contract.tests.test_work_intervals.TestIntervals {
  ints(pairs)
  test_difference()
  test_intersection()
  test_union()
}
class "TestInvisibleField" as odoo_src.odoo.addons.base.tests.test_views.TestInvisibleField {
  test_uncommented_invisible_field()
}
class "TestInvoiceTaxes" as odoo_src.odoo.addons.account.tests.test_invoice_taxes.TestInvoiceTaxes {
  setUpClass()
  test_affecting_base_amount()
  test_division_tax()
  test_ensure_no_unbalanced_entry()
  test_fixed_tax_with_zero_price()
  test_group_of_taxes()
  test_misc_entry_tax_group_signs()
  test_misc_journal_entry_tax_tags_purchase()
  test_misc_journal_entry_tax_tags_sale()
  test_one_tax_per_line()
  test_product_account_tags()
  test_setting_tax_separately()
  test_tax_calculation_foreign_currency_large_quantity()
  test_tax_calculation_multi_currency()
  test_tax_line_amount_currency_modification_auto_balancing()
  test_tax_repartition()
  test_tax_repartition_lines_dispatch_amount_1()
  test_tax_repartition_lines_dispatch_amount_2()
}
class "TestIrActionsReport" as odoo_src.odoo.addons.account.tests.test_ir_actions_report.TestIrActionsReport {
  file
  minimal_pdf_reader
  minimal_reader_buffer : BytesIO
  setUp()
  test_download_one_corrupted_pdf()
  test_download_with_encrypted_pdf()
}
class "TestIrAttachment" as odoo_src.odoo.addons.base.tests.test_ir_attachment.TestIrAttachment {
  Attachment
  blob1 : bytes
  blob1_b64
  blob1_fname : str
  blob1_hash : str
  blob2 : bytes
  blob2_b64
  filestore
  assertApproximately(value, expectedSize, delta)
  setUp()
  test_01_store_in_db()
  test_02_store_on_disk()
  test_03_no_duplication()
  test_04_keep_file()
  test_05_change_data_change_file()
  test_07_write_mimetype()
  test_08_neuter_xml_mimetype()
  test_09_dont_neuter_xml_mimetype_for_admin()
  test_10_image_autoresize()
  test_11_copy()
  test_12_gc()
  test_13_rollback()
  test_14_invalid_mimetype_with_correct_file_extension_no_post_processing()
}
class "TestIrConfigParameter" as odoo_src.odoo.addons.base.tests.test_config_parameter.TestIrConfigParameter {
  test_default_parameters()
}
class "TestIrCron" as odoo_src.odoo.addons.base.tests.test_ir_cron.TestIrCron {
  setUp()
  setUpClass()
  test_acquire_processed_job()
  test_cron_deactivate()
  test_cron_direct_trigger()
  test_cron_failed_increase()
  test_cron_keep_future_triggers()
  test_cron_no_job_ready()
  test_cron_process_job()
  test_cron_ready_by_nextcall()
  test_cron_ready_by_trigger()
  test_cron_ready_jobs_order()
  test_cron_retrigger()
  test_cron_skip_unactive_triggers()
  test_cron_timeout_failure()
  test_cron_timeout_success()
  test_cron_unactive_never_ready()
}
class "TestIrDefault" as odoo_src.odoo.addons.base.tests.test_ir_default.TestIrDefault {
  test_conditions()
  test_defaults()
  test_invalid()
  test_json_format_invalid()
  test_multi_company_defaults()
  test_removal()
}
class "TestIrHttpPerformances" as odoo_src.odoo.addons.base.tests.test_ir_http.TestIrHttpPerformances {
  test_routing_map_performance()
}
class "TestIrMailServer" as odoo_src.odoo.addons.mail.tests.test_ir_mail_server.TestIrMailServer {
  setUpClass()
  test_assert_base_values()
  test_default_email_from()
  test_mail_server_config_bin()
  test_mail_server_get_test_email_from()
  test_mail_server_priorities()
  test_mail_server_send_email()
}
class "TestIrMailServer" as odoo_src.odoo.addons.google_gmail.tests.test_google_gmail.TestIrMailServer {
  setUpClass()
  test_generate_oauth2_string_token()
}
class "TestIrMailServer" as odoo_src.odoo.addons.base.tests.test_ir_mail_server.TestIrMailServer {
  setUpClass()
  test_assert_base_values()
  test_bpo_34424_35805()
  test_content_alternative_correct_order()
  test_content_mail_body()
  test_eml_attachment_encoding()
  test_mail_server_auth_cert_requires_tls()
  test_mail_server_config_bin()
  test_mail_server_config_cli()
  test_mail_server_get_test_email_from()
  test_mail_server_match_from_filter()
  test_mail_server_priorities()
  test_mail_server_send_email()
  test_mail_server_send_email_IDNA()
  test_mail_server_send_email_context_force()
}
class "TestIrMailServerSMTPD" as odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.TestIrMailServerSMTPD {
  getaddrinfo(host, port)
  setUp()
  setUpClass()
  start_smtpd(encryption, ssl_context, auth_required, stop_on_cleanup)
  test_authentication_certificate_matrix()
  test_authentication_login_matrix()
  test_encryption_matrix()
  test_man_in_the_middle_matrix()
}
class "TestIrModel" as odoo_src.odoo.addons.base.tests.test_ir_model.TestIrModel {
  setUp()
  setUpClass()
  test_group_expansion()
  test_model_order_constraint()
  test_model_order_search()
  test_monetary_currency_field()
  test_rec_name_deletion()
}
class "TestIrModelEdition" as odoo_src.odoo.addons.base.tests.test_ir_model.TestIrModelEdition {
  test_delete_manual_models_with_base_fields()
  test_ir_model_fields_name_create()
  test_new_ir_model_fields_related()
}
class "TestIrModelFieldsTranslation" as odoo_src.odoo.addons.base.tests.test_ir_model.TestIrModelFieldsTranslation {
  test_ir_model_fields_translation()
}
class "TestIrModelInherit" as odoo_src.odoo.addons.base.tests.test_ir_model.TestIrModelInherit {
  test_delegate_field()
  test_inherit()
  test_inherits()
}
class "TestIrRule" as odoo_src.odoo.addons.base.tests.test_acl.TestIrRule {
  test_ir_rule()
}
class "TestIrSequenceChangeImplementation" as odoo_src.odoo.addons.base.tests.test_ir_sequence.TestIrSequenceChangeImplementation {
  tearDownClass()
  test_ir_sequence_1_create()
  test_ir_sequence_2_write()
  test_ir_sequence_3_unlink()
}
class "TestIrSequenceDateRangeChangeImplementation" as odoo_src.odoo.addons.base.tests.test_ir_sequence_date_range.TestIrSequenceDateRangeChangeImplementation {
  test_ir_sequence_date_range_1_create()
  test_ir_sequence_date_range_2_use()
  test_ir_sequence_date_range_3_write()
  test_ir_sequence_date_range_4_unlink()
}
class "TestIrSequenceDateRangeNoGap" as odoo_src.odoo.addons.base.tests.test_ir_sequence_date_range.TestIrSequenceDateRangeNoGap {
  test_ir_sequence_date_range_1_create_no_gap()
  test_ir_sequence_date_range_2_change_dates()
  test_ir_sequence_date_range_3_unlink()
}
class "TestIrSequenceDateRangeStandard" as odoo_src.odoo.addons.base.tests.test_ir_sequence_date_range.TestIrSequenceDateRangeStandard {
  test_ir_sequence_date_range_1_create()
  test_ir_sequence_date_range_2_change_dates()
  test_ir_sequence_date_range_3_unlink()
}
class "TestIrSequenceGenerate" as odoo_src.odoo.addons.base.tests.test_ir_sequence.TestIrSequenceGenerate {
  tearDownClass()
  test_ir_sequence_create()
  test_ir_sequence_create_no_gap()
  test_ir_sequence_prefix()
  test_ir_sequence_suffix()
}
class "TestIrSequenceInit" as odoo_src.odoo.addons.base.tests.test_ir_sequence.TestIrSequenceInit {
  test_00()
}
class "TestIrSequenceNoGap" as odoo_src.odoo.addons.base.tests.test_ir_sequence.TestIrSequenceNoGap {
  tearDownClass()
  test_ir_sequence_create_no_gap()
  test_ir_sequence_draw_no_gap()
  test_ir_sequence_draw_twice_no_gap()
}
class "TestIrSequenceStandard" as odoo_src.odoo.addons.base.tests.test_ir_sequence.TestIrSequenceStandard {
  tearDownClass()
  test_ir_sequence_create()
  test_ir_sequence_draw()
  test_ir_sequence_draw_twice()
  test_ir_sequence_search()
}
class "TestIrWebsocket" as odoo_src.odoo.addons.bus.tests.test_ir_websocket.TestIrWebsocket {
  test_notify_on_status_change()
  test_only_allow_string_channels_from_frontend()
  test_receive_missed_presences_on_subscribe()
}
class "TestItAccountMoveDocumentType" as odoo_src.odoo.addons.l10n_it_edi_ndd.tests.test_account_move_document_type.TestItAccountMoveDocumentType {
  test_account_move_document_type()
}
class "TestItAccountMovePaymentMethod" as odoo_src.odoo.addons.l10n_it_edi_ndd.tests.test_account_move_payment_method.TestItAccountMovePaymentMethod {
  test_account_move_payment_method()
}
class "TestItAccountMoveSend" as odoo_src.odoo.addons.l10n_it_edi.tests.test_account_move_send.TestItAccountMoveSend {
  get_attachments(res_id)
  init_invoice(partners, company, taxes)
  test_invoice_multi_with_l10n_it_edi_xml_export()
  test_invoice_multi_without_l10n_it_edi_xml_export()
  test_invoice_send_with_multiple_company()
  test_invoice_with_cig_or_cup_or_both()
}
class "TestItDocumentType" as odoo_src.odoo.addons.l10n_it_edi_ndd_account_dn.tests.test_it_document_type.TestItDocumentType {
  test_l10n_it_edi_debit_note_document_type()
}
class "TestItEdi" as odoo_src.odoo.addons.l10n_it_edi.tests.common.TestItEdi {
  get_tag_ids(tag_codes)
  repartition_lines()
  setUpClass()
}
class "TestItEdiDDT" as odoo_src.odoo.addons.l10n_it_stock_ddt.tests.test_edi.TestItEdiDDT {
  sale_order
  setUpClass()
  test_deferred_invoice()
}
class "TestItEdiDoi" as odoo_src.odoo.addons.l10n_it_edi_doi.tests.common.TestItEdiDoi {
  setUpClass()
}
class "TestItEdiDoiRemaining" as odoo_src.odoo.addons.l10n_it_edi_doi.tests.test_amounts_and_warnings.TestItEdiDoiRemaining {
  create_invoice(declaration, invoice_line_vals)
  create_sale_order(declaration, order_line_vals)
  get_sale_order_vals(declaration, order_line_vals)
  setUpClass()
  test_consolidated_billing()
  test_invoice()
  test_invoice_line_edit()
  test_overinvoiced_sale_order_and_credit_note()
  test_sale_order_and_independent_invoice()
  test_sale_order_line_edit()
}
class "TestItEdiExport" as odoo_src.odoo.addons.l10n_it_edi.tests.test_edi_export.TestItEdiExport {
  setUpClass()
  test_bill_refund_no_reconcile()
  test_export_XML_lowercase_fields()
  test_export_XML_product_with_multiline_description_field()
  test_export_foreign_currency()
  test_export_invoice_exclude_postdated_moves()
  test_export_invoice_partially_discounted()
  test_export_invoice_price_included_taxes()
  test_export_invoice_with_rounding_lines_value()
  test_export_invoice_with_two_downpayments()
  test_invoice_below_400_codice_simplified()
  test_invoice_fully_discounted()
  test_invoice_more_400_simplified()
  test_invoice_more_decimal_price_unit()
  test_invoice_negative_price()
  test_invoice_non_domestic_simplified()
  test_invoice_non_latin_and_latin()
  test_invoice_total_400_VAT_simplified()
  test_send_and_print_invoice_with_fallback_pdf()
  test_send_prezzo_unitario_converted_to_company_currency()
  test_vat_not_equals_codice()
}
class "TestItEdiImport" as odoo_src.odoo.addons.l10n_it_edi.tests.test_edi_import.TestItEdiImport {
  fake_test_content : str
  test_cron_receives_bill_from_another_company()
  test_import_vendor_bill_with_ref_service_valid_tax()
  test_invoice_user_can_compute_is_self_invoice()
  test_receive_bill_sequence()
  test_receive_bill_with_global_discount()
  test_receive_bill_with_multiple_discounts_in_line()
  test_receive_invalid_xml()
  test_receive_negative_vendor_bill()
  test_receive_same_vendor_bill_twice()
  test_receive_signed_vendor_bill()
  test_receive_vendor_bill()
  test_receive_vendor_bill_sconto_maggiorazione()
  test_receive_wrongly_signed_vendor_bill()
}
class "TestItEdiImportNdd" as odoo_src.odoo.addons.l10n_it_edi_ndd.tests.test_edi_import.TestItEdiImportNdd {
  test_l10n_it_payment_method_correctly_imported()
}
class "TestItEdiPa" as odoo_src.odoo.addons.l10n_it_edi.tests.test_edi_pa.TestItEdiPa {
  setUpClass()
  test_send_pa_partner()
}
class "TestItEdiReverseCharge" as odoo_src.odoo.addons.l10n_it_edi.tests.test_edi_reverse_charge.TestItEdiReverseCharge {
  setUpClass()
  test_bill_reverse_charge_and_refund()
  test_bill_reverse_charge_san_marino()
  test_invoice_external_reverse_charge()
  test_invoice_internal_reverse_charge()
  test_receive_bill_reverse_charge_internal()
  test_reverse_charge_bill_2()
}
class "TestItEdiSaleOrderPa" as odoo_src.odoo.addons.l10n_it_edi_sale.tests.test_edi_sale_order_pa.TestItEdiSaleOrderPa {
  create_sale_order_and_invoice(sale_order_vals)
  get_sales_order_vals()
  setUpClass()
  test_invoice_from_sale_order_pa_partner_no_origin_fields()
  test_invoice_from_sale_order_pa_partner_no_pa_fields()
  test_invoice_from_sale_order_pa_partner_with_origin_fields()
}
class "TestItReverseChargeDocumentType" as odoo_src.odoo.addons.l10n_it_edi_ndd.tests.test_account_move_document_type.TestItReverseChargeDocumentType {
  eu_partner
  module : str
  test_credit_note_export_document_type()
}
class "TestJoEdiInvoiceCodes" as odoo_src.odoo.addons.l10n_jo_edi_extended.tests.test_jo_edi_invoice_codes.TestJoEdiInvoiceCodes {
  setUpClass()
  test_jo_invoice_codes()
}
class "TestJoEdiPrecision" as odoo_src.odoo.addons.l10n_jo_edi.tests.test_jo_edi_precision.TestJoEdiPrecision {
  test_jo_credit_notes_price_unit()
  test_jo_sales_invoice_precision()
  test_jo_special_invoice_precision()
}
class "TestJoEdiTypes" as odoo_src.odoo.addons.l10n_jo_edi.tests.test_jo_edi_types.TestJoEdiTypes {
  test_credit_notes_lines_matching()
  test_jo_income_invoice()
  test_jo_income_refund()
  test_jo_no_country_customer()
  test_jo_no_vat_customer()
  test_jo_sales_invoice()
  test_jo_sales_refund()
  test_jo_special_invoice()
  test_jo_special_refund()
}
class "TestJpUBLPint" as odoo_src.odoo.addons.l10n_jp_ubl_pint.tests.test_jp_ubl_pint.TestJpUBLPint {
  setUpClass()
  test_invoice()
}
class "TestKEAccountMoveSend" as odoo_src.odoo.addons.l10n_ke_edi_tremol.tests.test_account_move_send.TestKEAccountMoveSend {
  setUpClass()
  test_not_sent_to_fiscal_device_but_allow_fallback()
  test_not_sent_to_fiscal_device_raises()
  test_sent_to_fiscal_device()
}
class "TestKarmaTrackingCommon" as odoo_src.odoo.addons.gamification.tests.test_karma_tracking.TestKarmaTrackingCommon {
  setUpClass()
  test_computation_gain()
  test_consolidation_cron()
  test_consolidation_monthly()
  test_user_as_erp_manager()
  test_user_tracking()
}
class "TestKeMoveExport" as odoo_src.odoo.addons.l10n_ke_edi_tremol.tests.test_move_export.TestKeMoveExport {
  line_dict_to_bytes(line_dict)
  setUpClass()
  test_export_global_discount_invoice()
  test_export_multi_tax_line_invoice()
  test_export_simple_invoice()
}
class "TestKeysCertificates" as odoo_src.odoo.addons.certificate.tests.test_keys_certificates.TestKeysCertificates {
  setUpClass()
  test_der_certificate()
  test_ec_key_generated()
  test_is_valid()
  test_key_loading_wrong_password()
  test_keys_certificate_not_matching()
  test_pem_certificate()
  test_pfx_certificate()
  test_rsa_key_generated()
}
class "TestKitPicking" as odoo_src.odoo.addons.mrp.tests.test_stock.TestKitPicking {
  setUpClass()
  test_add_sml_with_kit_to_confirmed_picking()
  test_kit_immediate_transfer()
  test_kit_planned_transfer()
  test_kit_with_packaging_different_uom()
  test_move_line_aggregated_product_quantities_with_kit()
  test_scrap_consu_kit_not_available()
  test_scrap_storable_kit_not_available()
}
class "TestL10nAccountWithholdingTaxesAmounts" as odoo_src.odoo.addons.l10n_account_withholding_tax.tests.test_account_withholding_amounts.TestL10nAccountWithholdingTaxesAmounts {
  setUpClass()
  test_case_a()
  test_case_b()
  test_case_c()
  test_case_d()
  test_case_e()
  test_case_f()
  test_case_g()
  test_case_h()
  test_case_i()
  test_case_j()
  test_case_l()
  test_case_m()
  test_case_n()
  test_invoice_total_unaffected()
}
class "TestL10nAccountWithholdingTaxesFlows" as odoo_src.odoo.addons.l10n_account_withholding_tax.tests.test_account_withholding_flows.TestL10nAccountWithholdingTaxesFlows {
  setUpClass()
  test_cannot_register_negative_payment()
  test_compute_outstanding_account_id()
  test_display_withholding()
  test_manual_adjustments()
  test_no_withholding_tax_invoice_but_included_one_on_payment()
  test_outstanding_account_marked_as_reconcilable()
  test_partner_is_set_on_lines()
  test_payment_synchronize_to_moves()
  test_placeholder_computation()
  test_register_payment__with_installments()
  test_tax_repartition_on_refund()
  test_withholding_analytic_distribution()
  test_withholding_analytic_distribution_two_invoice_line()
  test_withholding_line_base_amount()
  test_withholding_not_payment_account_on_method_line()
  test_withholding_tax_amounts_manipulation()
  test_withholding_tax_before_payment()
  test_withholding_tax_default_tax_on_product()
  test_withholding_tax_grids()
  test_withholding_tax_repartition_line()
}
class "TestL10nArWithholdingArRi" as odoo_src.odoo.addons.l10n_ar_withholding.tests.test_withholding_ar_ri.TestL10nArWithholdingArRi {
  in_invoice_2_wht(l10n_latam_document_number)
  in_invoice_3_wht()
  in_invoice_4_wht()
  in_invoice_wht(l10n_latam_document_number)
  new_payment_register(move_ids, taxes)
  setUpClass()
  test_01_simple_full_payment()
  test_02_two_payments_same_invoice()
  test_03_two_withholdings_one_payment()
  test_04_two_withholdings_different_currency()
  test_05_earnings_withholding_applied_with_scale()
  test_06_earnings_withholding_applied()
  test_07_earnings_partial_payment_withholding_applied_with_scale()
  test_08_earnings_withholding_applied_with_scale_and_minimun_withholdable_amount_set()
  test_09_foreign_invoice()
  test_10_foreign_invoice_and_payment()
}
class "TestL10nBrPix" as odoo_src.odoo.addons.l10n_br.tests.test_l10n_br_pix.TestL10nBrPix {
  setUpClass()
  test_constraints()
  test_get_qr_vals()
  test_get_qr_vals_for_pos_default_qr()
  test_get_qr_vals_without_reference()
}
class "TestL10nEsEdiVerifactuCommon" as odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.common.TestL10nEsEdiVerifactuCommon {
  setUpClass()
}
class "TestL10nEsEdiVerifactuDocument" as odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.test_document.TestL10nEsEdiVerifactuDocument {
  setUpClass()
  test_batch_single_accepted_cancellation()
  test_batch_single_accepted_registration()
  test_batch_single_duplicate_original_registered_with_errors_registration_with_timeout()
  test_batch_single_duplicate_original_registered_with_errors_registration_without_timeout()
  test_batch_single_registered_with_errors_registration()
  test_batch_single_rejected_registration()
  test_cannot_delete_chained_document()
  test_certificate_issue()
  test_generation_error()
  test_mark_for_next_batch()
  test_record_identifier()
  test_response_issue()
  test_response_parsing_error_document_not_found()
  test_soapfault()
}
class "TestL10nEsEdiVerifactuJson" as odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.test_json.TestL10nEsEdiVerifactuJson {
  setUpClass()
  test_huella_generation()
  test_invoice_1_and_credit_note()
  test_invoice_1_and_substitution()
  test_invoice_2()
  test_invoice_3()
  test_invoice_4()
  test_invoice_cancellation_1()
  test_invoice_multicurrency_1()
  test_invoice_simplified_partner()
  test_multiple_invoices_with_predecessor()
}
class "TestL10nEsEdiVerifactuPosCommon" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.tests.common.TestL10nEsEdiVerifactuPosCommon {
  setUpClass()
}
class "TestL10nEsEdiVerifactuPosOrder" as odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.tests.test_pos_order.TestL10nEsEdiVerifactuPosOrder {
  setUpClass()
  test_error_above_simplified_limit()
  test_order_invoiced_not_simplified()
  test_order_invoiced_simplified()
  test_order_not_invoiced()
  test_record_identifier()
  with_pos_session()
}
class "TestL10nHKEmvQrCode" as odoo_src.odoo.addons.l10n_hk.tests.test_l10n_hk_emv_qr.TestL10nHKEmvQrCode {
  setUpClass()
  setup_armageddon_tax(tax_name, company_data)
  test_emv_qr_code_generation()
  test_emv_qr_vals()
  test_emv_qr_vals_with_non_integer_amount()
  test_invoice_default_code()
  test_invoice_wrong_method()
}
class "TestL10nHuEdiCreditDebitNotes" as odoo_src.odoo.addons.l10n_hu_edi.tests.test_credit_debit_notes.TestL10nHuEdiCreditDebitNotes {
  setUpClass()
  test_credit_note_preserves_delivery_date()
  test_debit_note_preserves_delivery_date()
}
class "TestL10nInHSNSummary" as odoo_src.odoo.addons.l10n_in.tests.test_hsn_summary.TestL10nInHSNSummary {
  assert_invoice_l10n_in_hsn_summary(invoice, expected_values)
  assert_l10n_in_hsn_summary(document, expected_values, display_uom)
  convert_base_line_to_invoice_line(document, base_line)
  create_base_line_dict(l10n_in_hsn_code, quantity, price_unit, discount, uom, taxes, product)
  setUpClass()
  test_l10n_in_hsn_summary_1_generic_helpers()
  test_l10n_in_hsn_summary_1_invoices()
  test_l10n_in_hsn_summary_2_generic_helpers()
  test_l10n_in_hsn_summary_2_invoices()
  test_l10n_in_hsn_summary_3_generic_helpers()
  test_l10n_in_hsn_summary_3_invoices()
  test_l10n_in_hsn_summary_4_generic_helpers()
  test_l10n_in_hsn_summary_4_invoices()
  test_l10n_in_hsn_summary_5_generic_helpers()
  test_l10n_in_hsn_summary_5_invoices()
  test_l10n_in_hsn_summary_6_generic_helpers()
  test_l10n_in_hsn_summary_6_invoices()
  test_l10n_in_hsn_summary_manual_edit_invoice_taxes()
}
class "TestL10nInHSNSummaryPos" as odoo_src.odoo.addons.l10n_in_pos.tests.test_hsn_summary.TestL10nInHSNSummaryPos {
  create_base_line_product(base_line)
  setUpClass()
  test_l10n_in_hsn_summary_pos()
}
class "TestL10nRoEdiStockCommon" as odoo_src.odoo.addons.l10n_ro_edi_stock.tests.common.TestL10nRoEdiStockCommon {
  change_product_qty(product, new_quantity, product_tmpl)
  create_stock_picking(partner, name, location_id, location_dest_id, picking_type, product_data)
  setUpClass()
}
class "TestL10nSGEmvQrCode" as odoo_src.odoo.addons.l10n_sg.tests.test_l10n_sg_emv_qr.TestL10nSGEmvQrCode {
  setUpClass()
  test_emv_qr_code_generation()
  test_emv_qr_vals()
}
class "TestL10nTHEmvQrCode" as odoo_src.odoo.addons.l10n_th.tests.test_l10n_th_emv_qr.TestL10nTHEmvQrCode {
  setUpClass()
  test_emv_qr_code_generation()
  test_emv_qr_vals()
}
class "TestL10nVNEmvQrCode" as odoo_src.odoo.addons.l10n_vn.tests.test_l10n_vn_emv_qr.TestL10nVNEmvQrCode {
  setUpClass()
  test_create_payment_with_no_proxy_in_client()
  test_emv_qr_code_generation()
  test_emv_qr_vals()
  test_emv_qr_vals_with_accent_partner()
  test_remove_vietnamese_accents()
}
class "TestLanguageInstall" as odoo_src.odoo.addons.base.tests.test_translate.TestLanguageInstall {
  test_language_install()
}
class "TestLanguageInstallPerformance" as odoo_src.odoo.addons.base.tests.test_translate.TestLanguageInstallPerformance {
  test_language_install()
}
class "TestLazy" as odoo_src.odoo.addons.base.tests.test_func.TestLazy {
  test_lazy_compare()
}
class "TestLeadAssign" as odoo_src.odoo.addons.crm.tests.test_crm_lead_assignment.TestLeadAssign {
  test_assign_configuration()
  test_assign_count()
  test_assign_duplicates()
  test_assign_no_duplicates()
  test_assign_populated()
  test_assign_quota()
  test_assign_specific_won_lost()
  test_merge_assign_keep_master_team()
  test_no_assign_if_exceed_max_assign()
}
class "TestLeadAssignCommon" as odoo_src.odoo.addons.crm.tests.test_crm_lead_assignment.TestLeadAssignCommon {
  assertInitialData()
  setUpClass()
}
class "TestLeadAssignPerf" as odoo_src.odoo.addons.crm.tests.test_performances.TestLeadAssignPerf {
  test_assign_perf_duplicates()
  test_assign_perf_no_duplicates()
  test_assign_perf_populated()
}
class "TestLeadConvert" as odoo_src.odoo.addons.crm.tests.test_crm_lead_lost.TestLeadConvert {
  setUpClass()
  test_lead_lost()
  test_lead_lost_batch_wfeedback()
  test_lead_lost_crm_rights()
}
class "TestLeadConvert" as odoo_src.odoo.addons.crm.tests.test_crm_lead_convert.TestLeadConvert {
  setUpClass()
  test_duplicates_computation()
  test_initial_data()
  test_lead_convert_action_exist()
  test_lead_convert_action_nothing()
  test_lead_convert_base()
  test_lead_convert_base_corner_cases()
  test_lead_convert_base_w_salesmen()
  test_lead_convert_base_w_team()
  test_lead_convert_contact_mutlicompany()
  test_lead_convert_corner_cases_crud()
  test_lead_convert_corner_cases_matching()
  test_lead_convert_internals()
  test_lead_convert_no_lang()
  test_lead_convert_properties_preserve()
  test_lead_convert_properties_reset()
  test_lead_convert_same_partner()
  test_lead_merge()
  test_lead_merge_duplicates()
  test_lead_merge_duplicates_flow()
  test_lead_merge_last_created()
  test_lead_merge_user()
}
class "TestLeadConvertBatch" as odoo_src.odoo.addons.crm.tests.test_crm_lead_convert.TestLeadConvertBatch {
  test_initial_data()
  test_lead_convert_batch_internals()
}
class "TestLeadConvertCommon" as odoo_src.odoo.addons.crm.tests.common.TestLeadConvertCommon {
  assertMemberAssign(member, count)
  setUpClass()
}
class "TestLeadConvertForm" as odoo_src.odoo.addons.crm.tests.test_crm_lead_convert.TestLeadConvertForm {
  test_form_action_default()
  test_form_name_onchange()
}
class "TestLeadConvertMass" as odoo_src.odoo.addons.crm.tests.test_crm_lead_convert_mass.TestLeadConvertMass {
  setUpClass()
  test_assignment_salesmen()
  test_assignment_salesmen_wteam()
  test_mass_convert_deduplicate()
  test_mass_convert_find_existing()
  test_mass_convert_internals()
  test_mass_convert_performances()
  test_mass_convert_w_salesmen()
  test_mass_convert_with_original_and_duplicate_selected()
}
class "TestLeadConvertMassCommon" as odoo_src.odoo.addons.crm.tests.common.TestLeadConvertMassCommon {
  setUpClass()
}
class "TestLeadCrmMerge" as odoo_src.odoo.addons.event_crm.tests.test_crm_lead_merge.TestLeadCrmMerge {
  test_merge_different_events_and_update()
  test_merge_method_dependencies()
}
class "TestLeadEnrich" as odoo_src.odoo.addons.crm_iap_enrich.tests.test_lead_enrich.TestLeadEnrich {
  setUpClass()
  tearDownClass()
  test_enrich_error_jsonrpc_exception()
  test_enrich_internals()
  test_lead_enrich_auto_setting()
}
class "TestLeadFormTools" as odoo_src.odoo.addons.crm.tests.test_crm_lead.TestLeadFormTools {
  test_address_view()
}
class "TestLeadMerge" as odoo_src.odoo.addons.crm_iap_enrich.tests.test_crm_lead_merge.TestLeadMerge {
  test_merge_method_iap_enrich_done()
}
class "TestLeadMerge" as odoo_src.odoo.addons.crm.tests.test_crm_lead_merge.TestLeadMerge {
  test_initial_data()
  test_lead_merge_address_not_propagated()
  test_lead_merge_address_propagated()
  test_lead_merge_internals()
  test_lead_merge_mixed()
  test_lead_merge_probability_auto()
  test_lead_merge_probability_auto_empty()
  test_lead_merge_probability_manual()
  test_lead_merge_probability_manual_empty()
  test_lead_merge_properties_formatting()
  test_merge_method()
  test_merge_method_dependencies()
  test_merge_method_followers()
  test_merge_method_propagate_lost_reason()
}
class "TestLeadMergeCommon" as odoo_src.odoo.addons.crm.tests.test_crm_lead_merge.TestLeadMergeCommon {
  setUpClass()
}
class "TestLeadMine" as odoo_src.odoo.addons.crm_iap_mine.tests.test_lead_mine.TestLeadMine {
  setUpClass()
  tearDownClass()
  test_mine_error_credit()
  test_mine_error_jsonrpc_exception()
  test_mine_error_no_result()
  test_mine_wcompany()
  test_mine_wpeople()
}
class "TestLeaveRequests" as odoo_src.odoo.addons.hr_holidays.tests.test_leave_requests.TestLeaveRequests {
  setUpClass()
  set_employee_create_date(_id, newdate)
  test_accrual_validity_time_valid()
  test_activity_update_with_time_off_officer()
  test_allocation_constrain_dates_check()
  test_allocation_request()
  test_archived_allocation()
  test_cancel_leave()
  test_company_leaves()
  test_create_support_document_in_the_past()
  test_current_leave_status()
  test_default_request_date_timezone()
  test_department_leave()
  test_duration_display_global_leave()
  test_duration_display_public_leave_include()
  test_employee_is_absent()
  test_expired_allocation()
  test_filter_time_off_type_multiple_employees()
  test_holiday_type_allocation()
  test_holiday_type_allocation_requirement_edit()
  test_leave_defaults_with_timezones()
  test_leave_duration_on_public_holiday_with_flexible_request()
  test_leave_with_public_holiday_other_company()
  test_limited_type_days_left()
  test_limited_type_not_enough_days()
  test_no_days_expired()
  test_number_of_hours_display()
  test_number_of_hours_display_flexible_calendar()
  test_number_of_hours_display_global_leave()
  test_overlapping_requests()
  test_prevent_misplacement_of_allocations_without_end_date()
  test_public_holiday_in_the_middle_of_flexible_request()
  test_several_allocations()
  test_several_allocations_split()
  test_time_off_creation_without_allocation()
  test_time_off_date_edit()
  test_time_off_duration_zero()
  test_time_off_irregular_working_schedule()
  test_time_off_recovery_on_create()
  test_time_off_recovery_on_unlink()
  test_time_off_recovery_on_write()
  test_timezone_company_leave_request()
  test_timezone_company_validated()
  test_timezone_employee_leave_request()
  test_undefined_working_hours()
}
class "TestLinkPreview" as odoo_src.odoo.addons.mail.tests.test_link_preview.TestLinkPreview {
  setUpClass()
  test_get_link_preview_from_url()
  test_link_preview()
  test_link_preview_ignore_internal_link()
  test_link_preview_no_content_type()
}
class "TestLinkTracker" as odoo_src.odoo.addons.link_tracker.tests.test_link_tracker.TestLinkTracker {
  setUp()
  test_absolute_url()
  test_constraint()
  test_create()
  test_no_external_tracking()
  test_no_loop()
  test_search_or_create()
}
class "TestLiveChatDigest" as odoo_src.odoo.addons.im_livechat.tests.test_digest.TestLiveChatDigest {
  setUpClass()
  test_kpi_livechat_rating_value()
}
class "TestLiveChatResUsers" as odoo_src.odoo.addons.im_livechat.tests.test_res_users.TestLiveChatResUsers {
  test_livechat_create_res_users()
}
class "TestLivechatChatbotFormUI" as odoo_src.odoo.addons.im_livechat.tests.test_chatbot_form_ui.TestLivechatChatbotFormUI {
  test_chatbot_steps_sequence_ui()
  test_chatbot_steps_sequence_with_move_ui()
}
class "TestLivechatLead" as odoo_src.odoo.addons.crm_livechat.tests.test_crm_lead.TestLivechatLead {
  setUpClass()
  test_crm_lead_creation_guest()
  test_crm_lead_creation_portal()
}
class "TestLoadMessages" as odoo_src.odoo.addons.mail.tests.discuss.test_load_messages.TestLoadMessages {
  test_01_mail_message_load_order_tour()
}
class "TestLoyalty" as odoo_src.odoo.addons.loyalty.tests.test_loyalty.TestLoyalty {
  setUpClass()
  test_archiving_unarchiving()
  test_card_description_on_tag_change()
  test_discount_product_unlink()
  test_loyalty_mail()
  test_loyalty_program_default_values()
  test_loyalty_program_default_values_in_form()
  test_loyalty_program_preserve_reward_upon_writing()
  test_loyalty_program_preserve_reward_with_always_edit()
  test_merge_loyalty_cards()
  test_prevent_archive_pricelist_linked_to_program()
  test_prevent_archiving_product_linked_to_active_loyalty_reward()
  test_prevent_archiving_product_used_for_discount_reward()
  test_prevent_archiving_product_when_archiving_program()
}
class "TestMailActivityChatter" as odoo_src.odoo.addons.mail.tests.test_mail_activity.TestMailActivityChatter {
  env
  setUpClass()
  test_mail_activity_date_format()
  test_mail_activity_schedule_from_chatter()
}
class "TestMailActivityIntegrity" as odoo_src.odoo.addons.mail.tests.test_mail_activity.TestMailActivityIntegrity {
  test_mail_activity_type_master_data()
}
class "TestMailActivityMixin" as odoo_src.odoo.addons.calendar.tests.test_mail_activity_mixin.TestMailActivityMixin {
  setUpClass()
  test_activity_calendar_event_id()
}
class "TestMailComposer" as odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposer {
  setUpClass()
}
class "TestMailComposerForm" as odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposerForm {
  setUpClass()
  test_composer_default_recipients()
  test_composer_default_recipients_private()
  test_composer_default_recipients_private_norights()
  test_composer_template_recipients_private()
}
class "TestMailComposerRendering" as odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposerRendering {
  test_mail_mass_mode_compose_with_mso()
  test_mail_mass_mode_template_with_mso()
}
class "TestMailComposerUI" as odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposerUI {
  test_mail_composer_test_tour()
}
class "TestMailFullComposer" as odoo_src.odoo.addons.base_automation.tests.test_mail_composer.TestMailFullComposer {
  test_mail_composer_test_tour()
}
class "TestMailGroup" as odoo_src.odoo.addons.mail_group.tests.test_mail_group.TestMailGroup {
  test_clean_email_body()
  test_constraint_valid_email()
  test_find_group_user_for_alias()
  test_find_member()
  test_find_member_for_alias()
  test_join_group()
  test_mail_group_access_mode_groups()
  test_mail_group_access_mode_members()
  test_mail_group_access_mode_public()
  test_mail_group_member_security()
}
class "TestMailGroupMailing" as odoo_src.odoo.addons.mail_group.tests.test_mail_group_mailing.TestMailGroupMailing {
  setUpClass()
  test_mail_mail_headers()
}
class "TestMailGroupMessage" as odoo_src.odoo.addons.mail_group.tests.test_mail_group_message.TestMailGroupMessage {
  test_batch_send()
  test_email_duplicated()
  test_email_empty_from()
  test_email_not_sent_to_author()
  test_mail_group_message_security_groups()
  test_mail_group_message_security_public()
}
class "TestMailGroupModeration" as odoo_src.odoo.addons.mail_group.tests.test_mail_group_moderation.TestMailGroupModeration {
  setUpClass()
  test_constraints()
  test_moderation_rule_api()
  test_moderation_rule_email_normalize()
  test_moderation_rule_security()
}
class "TestMailListCommon" as odoo_src.odoo.addons.mail_group.tests.common.TestMailListCommon {
  setUpClass()
}
class "TestMailMessage" as odoo_src.odoo.addons.mail.tests.test_mail_message.TestMailMessage {
  test_unlink_failure_message_notify_author()
}
class "TestMailPluginController" as odoo_src.odoo.addons.mail_plugin.tests.test_controller.TestMailPluginController {
  test_enrich_and_create_company()
  test_get_partner_blacklisted_domain()
  test_get_partner_company_found()
  test_get_partner_company_not_found()
  test_get_partner_iap_return_different_domain()
  test_get_partner_is_default_from()
  test_get_partner_no_access()
  test_get_partner_no_email_returned_by_iap()
}
class "TestMailPluginControllerCommon" as odoo_src.odoo.addons.mail_plugin.tests.common.TestMailPluginControllerCommon {
  user_test
  mock_enrich_and_create_company(partner_id, patched_iap_enrich)
  mock_plugin_partner_get(name, email, patched_iap_enrich)
  setUp()
}
class "TestMailPublicPage" as odoo_src.odoo.addons.mail.tests.discuss.test_discuss_channel_as_guest.TestMailPublicPage {
  channel
  group
  tour : str
  setUp()
  test_channel_invitation_from_token()
  test_chat_from_token_as_guest()
  test_discuss_channel_public_page_as_admin()
  test_discuss_channel_public_page_as_guest()
  test_discuss_channel_public_page_as_internal()
  test_discuss_channel_public_page_as_portal()
  test_discuss_channel_public_page_call_public()
  test_mail_group_public_page_as_admin()
  test_mail_group_public_page_as_guest()
  test_mail_group_public_page_as_internal()
  test_mail_group_public_page_as_portal()
  test_sidebar_in_public_page()
}
class "TestMailRender" as odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRender {
  test_evaluation_context()
  test_prepend_preview_inline_template_to_qweb()
  test_render_field()
  test_render_field_lang()
  test_render_field_no_records()
  test_render_field_not_existing()
  test_render_template_inline_template()
  test_render_template_inline_template_w_post_process_custom_local_links()
  test_render_template_qweb()
  test_render_template_qweb_view()
  test_render_template_various()
  test_replace_local_links()
}
class "TestMailRenderCommon" as odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRenderCommon {
  setUpClass()
}
class "TestMailRenderMixin" as odoo_src.odoo.addons.link_tracker.tests.test_mail_render_mixin.TestMailRenderMixin {
  setUpClass()
  test_shorten_blacklisted_links()
  test_shorten_links()
  test_shorten_links_html_different_labels()
  test_shorten_links_html_including_base_url()
  test_shorten_links_html_markup()
  test_shorten_links_html_skip_shorts()
  test_shorten_links_text_including_base_url()
  test_shorten_links_text_skip_shorts()
}
class "TestMailRenderSecurity" as odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRenderSecurity {
  test_render_inline_template_impersonate()
  test_render_inline_template_restricted()
  test_render_inline_template_restricted_static()
  test_render_inline_template_unrestricted()
  test_render_template_qweb_restricted()
  test_security_function_call()
  test_security_inline_template_restricted()
  test_security_inline_template_unrestricted()
  test_security_qweb_template_restricted()
  test_security_qweb_template_restricted_cached()
  test_security_qweb_template_unrestricted()
}
class "TestMailSchedule" as odoo_src.odoo.addons.event.tests.test_event_mail_schedule.TestMailSchedule {
  setUpClass()
  test_archived_event_mail_schedule()
  test_assert_initial_values()
  test_event_mail_schedule()
  test_event_mail_schedule_fail_global_composer()
  test_event_mail_schedule_fail_global_no_registrations()
  test_event_mail_schedule_fail_registration_composer()
  test_event_mail_schedule_fail_registration_template_removed()
  test_event_mail_schedule_on_subscription()
  test_event_mail_schedule_on_subscription_async()
  test_unique_event_mail_ids()
}
class "TestMailTemplate" as odoo_src.odoo.addons.mail.tests.test_mail_template.TestMailTemplate {
  setUpClass()
  test_mail_compose_message_content_from_template()
  test_mail_compose_message_content_from_template_mass_mode()
  test_mail_template_abstract_model()
  test_mail_template_acl()
  test_mail_template_acl_translation()
  test_mail_template_parse_partner_to()
  test_server_archived_usage_protection()
}
class "TestMailTemplateReset" as odoo_src.odoo.addons.mail.tests.test_mail_template.TestMailTemplateReset {
  test_mail_template_reset()
  test_mail_template_reset_translation()
}
class "TestMailTemplateUI" as odoo_src.odoo.addons.mail.tests.test_mail_template.TestMailTemplateUI {
  test_mail_template_dynamic_placeholder_tour()
}
class "TestMailTools" as odoo_src.odoo.addons.mail.tests.test_mail_tools.TestMailTools {
  setUpClass()
  test_find_partner_from_emails()
  test_mail_find_partner_from_emails_followers()
  test_mail_find_partner_from_emails_multicompany()
}
class "TestMailTools" as odoo_src.odoo.addons.base.tests.test_mail.TestMailTools {
  test_html2plaintext()
}
class "TestMailUninstall" as odoo_src.odoo.addons.mail.tests.test_uninstall.TestMailUninstall {
  test_unlink_model()
}
class "TestMailUtils" as odoo_src.odoo.addons.mail.tests.test_mail_tools.TestMailUtils {
  test_migrate_icp_to_domain()
}
class "TestMailingABTesting" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_ab_testing.TestMailingABTesting {
  test_mailing_ab_testing_auto_flow()
  test_mailing_ab_testing_auto_flow_cron()
  test_mailing_ab_testing_campaign()
  test_mailing_ab_testing_compare()
  test_mailing_ab_testing_duplicate_date()
  test_mailing_ab_testing_manual_flow()
  test_mailing_ab_testing_minimum_participants()
}
class "TestMailingABTestingCommon" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_ab_testing.TestMailingABTestingCommon {
  ab_testing_campaign
  ab_testing_mailing_1
  ab_testing_mailing_2
  ab_testing_mailing_ids
  mailing_list
  setUp()
}
class "TestMailingContactImport" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_list.TestMailingContactImport {
  test_mailing_contact_import()
}
class "TestMailingContactToList" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_list.TestMailingContactToList {
  test_mailing_contact_to_list()
}
class "TestMailingControllers" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingControllers {
  setUpClass()
  test_assert_initial_values()
  test_mailing_report_unsubscribe()
  test_mailing_unsubscribe_from_document_tour()
  test_mailing_unsubscribe_from_document_tour_mailing_user()
  test_mailing_unsubscribe_from_list_tour()
  test_mailing_unsubscribe_from_list_with_update_tour()
  test_mailing_unsubscribe_from_my()
  test_mailing_view()
}
class "TestMailingControllersCommon" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingControllersCommon {
  setUpClass()
}
class "TestMailingHeaders" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_internals.TestMailingHeaders {
  setUpClass()
  test_mailing_unsubscribe_headers()
}
class "TestMailingListMerge" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_list.TestMailingListMerge {
  setUpClass()
  test_mailing_contact_create()
  test_mailing_list_action_send_mailing()
  test_mailing_list_contact_copy_in_context_of_mailing_list()
  test_mailing_list_merge()
  test_mailing_list_merge_cornercase()
}
class "TestMailingListSms" as odoo_src.odoo.addons.mass_mailing_sms.tests.test_mailing_controllers.TestMailingListSms {
  test_controller_unsubscribe()
}
class "TestMailingListSms" as odoo_src.odoo.addons.mass_mailing_sms.tests.test_mailing_list.TestMailingListSms {
  setUpClass()
  test_mailing_list_action_send_sms()
}
class "TestMailingRetry" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_retry.TestMailingRetry {
  setUpClass()
  test_mailing_retry_immediate_trigger()
}
class "TestMailingRetrySMS" as odoo_src.odoo.addons.mass_mailing_sms.tests.test_mailing_retry.TestMailingRetrySMS {
  setUpClass()
  test_sms_retry_immediate_trigger()
}
class "TestMailingSMSABTesting" as odoo_src.odoo.addons.mass_mailing_sms.tests.test_mailing_sms_ab_testing.TestMailingSMSABTesting {
  ab_testing_mailing_sms_1
  ab_testing_mailing_sms_2
  setUp()
  test_mailing_sms_ab_testing_compare()
}
class "TestMailingScheduleDateWizard" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_mailing_schedule_date.TestMailingScheduleDateWizard {
  test_mailing_next_departure()
  test_mailing_schedule_date()
}
class "TestMailingScheduleDateWizard" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_internals.TestMailingScheduleDateWizard {
  test_mailing_schedule_date()
}
class "TestMailingTracking" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingTracking {
  test_tracking_short_code()
  test_tracking_url_token()
}
class "TestMailingUi" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_ui.TestMailingUi {
  setUpClass()
  test_mailing_campaign_tour()
  test_mailing_editor_theme_tour()
  test_mailing_editor_tour()
  test_mass_mailing_code_view_tour()
  test_snippets_mailing_menu_tabs_tour()
  test_snippets_mailing_menu_toolbar_mobile_tour()
  test_snippets_mailing_menu_toolbar_tour()
}
class "TestMailingUi" as odoo_src.odoo.addons.mass_mailing_sms.tests.test_mailing_ui.TestMailingUi {
  test_tour_mailing_activities_split()
}
class "TestManual" as odoo_src.odoo.addons.l10n_ar.tests.test_manual.TestManual {
  journal
  setUpClass()
  test_01_create_invoice()
  test_02_fiscal_position()
  test_03_corner_cases()
  test_04_corner_cases()
  test_05_corner_cases()
  test_06_corner_cases()
  test_07_corner_cases()
  test_08_corner_cases()
  test_09_corner_cases()
  test_10_corner_cases()
  test_11_corner_cases()
  test_12_corner_cases()
  test_13_corner_cases()
  test_14_corner_cases()
  test_15_liquido_producto_sales()
  test_16_liquido_producto_purchase()
  test_17_corner_cases()
  test_18_invoice_b_tax_breakdown_1()
  test_19_invoice_b_tax_breakdown_2()
  test_20_invoice_b_tax_breakdown_3()
  test_l10n_ar_prices_and_taxes()
}
class "TestManualConsumption" as odoo_src.odoo.addons.mrp.tests.test_manual_consumption.TestManualConsumption {
  setUpClass()
  test_manual_consumption_backorder()
  test_manual_consumption_quantity_change()
  test_manual_consumption_split_merge_00()
  test_manual_consumption_with_different_component_price()
  test_reservation_state_with_manual_consumption()
  test_update_manual_consumption_00()
  test_update_manual_consumption_01()
}
class "TestMany2many" as odoo_src.odoo.addons.base.tests.test_expression.TestMany2many {
  User
  company
  setUp()
  test_autojoin()
  test_empty()
  test_name_search()
  test_regular()
}
class "TestMany2one" as odoo_src.odoo.addons.base.tests.test_expression.TestMany2one {
  Partner
  User
  company
  setUp()
  test_autojoin()
  test_complement_regular()
  test_explicit_subquery()
  test_inherited()
  test_name_search()
  test_name_search_undefined()
  test_regular()
}
class "TestMarketingCardMail" as odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardMail {
  assertSentMailCorrectCard(sent_mails, cards)
  test_campaign_send_mailing()
  test_campaign_send_mailing_with_duplicates()
}
class "TestMarketingCardRender" as odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardRender {
  test_campaign()
  test_fetch_datetime()
}
class "TestMarketingCardRouting" as odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardRouting {
  test_campaign_stats()
}
class "TestMarketingCardSecurity" as odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardSecurity {
  test_campaign_field_paths()
  test_campaign_ownership()
  test_mail_render_security_body_html()
  test_mail_render_security_render_field_write_access()
}
class "TestMassMailEventValues" as odoo_src.odoo.addons.mass_mailing_event_sms.tests.test_mailing_event.TestMassMailEventValues {
  setUpClass()
  test_mailing_event_computed_fields_form()
}
class "TestMassMailFeatures" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_internals.TestMassMailFeatures {
  setUpClass()
  test_mailing_cron_trigger()
  test_mailing_deletion()
  test_mailing_on_res_partner()
  test_mailing_shortener()
}
class "TestMassMailUTM" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_internals.TestMassMailUTM {
  test_mailing_create_with_context()
  test_mailing_unique_name()
}
class "TestMassMailValues" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_internals.TestMassMailValues {
  setUpClass()
  test_mailing_body_cropped_vml_image()
  test_mailing_body_inline_image()
  test_mailing_body_responsive()
  test_mailing_computed_fields()
  test_mailing_computed_fields_default()
  test_mailing_computed_fields_default_email_from()
  test_mailing_computed_fields_domain_w_filter()
  test_mailing_computed_fields_form()
  test_mailing_editor_created_attachments()
  test_mailing_trace_values()
  test_process_mailing_queue_without_html_body()
}
class "TestMassMailValues" as odoo_src.odoo.addons.mass_mailing_sms.tests.test_mailing_internals.TestMassMailValues {
  setUpClass()
  test_mailing_computed_fields()
  test_mailing_get_sms_link_replacements_placeholders()
}
class "TestMassMailing" as odoo_src.odoo.addons.mass_mailing.wizard.mailing_mailing_test.TestMassMailing {
  email_to
  mass_mailing_id
  send_mail_test()
}
class "TestMassMailingActions" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_internals.TestMassMailingActions {
  test_mailing_action_open()
}
class "TestMembership" as odoo_src.odoo.addons.membership.tests.test_membership.TestMembership {
  test_cancel_membership()
  test_none_membership()
  test_old_membership()
  test_paid_membership()
}
class "TestMembershipCommon" as odoo_src.odoo.addons.membership.tests.common.TestMembershipCommon {
  setUpClass()
}
class "TestMenu" as odoo_src.odoo.addons.base.tests.test_menu.TestMenu {
  test_00_menu_deletion()
}
class "TestMenuRootLookupByModel" as odoo_src.odoo.addons.mail.tests.test_ir_ui_menu.TestMenuRootLookupByModel {
  patch_get_backend_root_menu_ids(model, return_values)
  setUpClass()
  test_initial_data()
  test_look_for_existing_menu_root_user_no_access()
  test_look_for_existing_menu_root_user_with_access()
  test_look_for_non_existing_menu_root()
}
class "TestMergePartner" as odoo_src.odoo.addons.account.tests.test_res_partner_merge.TestMergePartner {
  setUpClass()
  test_merge_partners_with_bank_accounts_linked_to_payments()
  test_merge_partners_with_duplicate_bank_accounts_linked_to_payments()
}
class "TestMergePartner" as odoo_src.odoo.addons.base.tests.test_res_partner_merge.TestMergePartner {
  Bank
  Partner
  attachment1
  attachment2
  attachment_bank1
  attachment_bank2
  attachment_bank3
  bank1
  bank2
  bank3
  partner1
  partner2
  partner3
  setUp()
  test_merge_partners_with_duplicate_bank_accounts()
  test_merge_partners_with_duplicate_bank_accounts_with_destination()
  test_merge_partners_with_references()
  test_merge_partners_with_unique_bank_accounts()
  test_merge_partners_without_bank_accounts()
}
class "TestMergeSequences" as odoo_src.odoo.addons.base.tests.test_misc.TestMergeSequences {
  test_merge_sequences()
}
class "TestMessageController" as odoo_src.odoo.addons.mail.tests.discuss.test_message_controller.TestMessageController {
  setUpClass()
  test_attachment_hijack()
  test_channel_message_attachments()
  test_chatter_on_archived_record()
  test_mail_cache_control_header()
  test_mail_partner_from_email_authenticated()
}
class "TestMessageLinks" as odoo_src.odoo.addons.mail.tests.discuss.test_message_controller.TestMessageLinks {
  setUpClass()
  test_message_link_by_employee()
  test_message_link_by_public()
}
class "TestMessageReactionController" as odoo_src.odoo.addons.mail.tests.test_message_reaction_controller.TestMessageReactionController {
  test_message_reaction_channel_as_member()
  test_message_reaction_channel_as_non_member()
  test_message_reaction_fake_message()
  test_message_reaction_partner()
  test_message_reaction_public_channel()
}
class "TestMessageReactionControllerCommon" as odoo_src.odoo.addons.mail.tests.test_message_reaction_controller.TestMessageReactionControllerCommon {
  setUpClass()
}
class "TestMessageUpdateController" as odoo_src.odoo.addons.mail.tests.test_message_update_controller.TestMessageUpdateController {
  test_message_update_fake_message()
  test_message_update_non_owner_partner()
  test_message_update_partner_as_owner()
}
class "TestMessageUpdateControllerCommon" as odoo_src.odoo.addons.mail.tests.test_message_update_controller.TestMessageUpdateControllerCommon {
  setUpClass()
}
class "TestMicrosoftEvent" as odoo_src.odoo.addons.microsoft_calendar.tests.test_microsoft_event.TestMicrosoftEvent {
  setUp()
  test_already_mapped_events()
  test_ignore_not_found_items()
  test_map_a_recurrence_using_global_id()
  test_map_a_recurrence_using_instance_id()
  test_map_an_event_using_global_id()
  test_map_an_event_using_instance_id()
  test_map_an_event_without_uid_using_instance_id()
  test_map_an_event_without_uid_using_instance_id_2()
  test_match_event_only()
  test_match_mix_of_events_and_recurrences()
  test_match_not_typed_recurrence()
  test_match_recurrence_only()
  test_microsoft_event_readonly()
  test_performance_check()
  test_search_set_ms_universal_event_id()
  test_try_to_map_mixed_of_single_events_and_recurrences()
}
class "TestMicrosoftService" as odoo_src.odoo.addons.microsoft_calendar.tests.test_microsoft_service.TestMicrosoftService {
  call_with_sync_token : _Call
  call_without_sync_token : _Call
  delete_header : dict
  fake_next_sync_token : str
  fake_next_sync_token_url : str
  fake_sync_token : str
  fake_token : str
  header : dict
  header_prefer : str
  service
  setUp()
  test_answer_returns_false_if_event_does_not_exist(mock_do_request)
  test_answer_to_an_existing_event(mock_do_request)
  test_answer_token_error()
  test_delete_an_already_cancelled_event(mock_do_request)
  test_delete_an_existing_event(mock_do_request)
  test_delete_returns_false_if_event_does_not_exist(mock_do_request)
  test_delete_token_error()
  test_get_events_delta_token_error(mock_do_request, mock_check_full_sync_required)
  test_get_events_delta_with_outdated_sync_token(mock_do_request, mock_check_full_sync_required)
  test_get_events_delta_with_sync_token(mock_do_request)
  test_get_events_delta_without_sync_token(mock_do_request)
  test_get_events_delta_without_token()
  test_get_events_filter_out_occurrences(mock_do_request)
  test_get_events_loop_over_pages(mock_do_request)
  test_get_events_no_serie_master(mock_do_request)
  test_get_events_one_page(mock_do_request)
  test_get_events_token_error()
  test_get_events_unexpected_exception(mock_do_request)
  test_get_events_with_one_serie_master(mock_do_request)
  test_get_occurrence_details(mock_do_request)
  test_get_occurrence_details_token_error()
  test_insert(mock_do_request)
  test_insert_token_error()
  test_patch_an_existing_event(mock_do_request)
  test_patch_returns_false_if_event_does_not_exist(mock_do_request)
  test_patch_token_error()
}
class "TestMiscToken" as odoo_src.odoo.addons.base.tests.test_misc.TestMiscToken {
  test_None_payload()
  test_expired_token()
  test_list_payload()
  test_long_payload()
  test_modified_payload()
}
class "TestModelDeprecations" as odoo_src.odoo.addons.base.tests.test_deprecation.TestModelDeprecations {
  test_model_attributes()
  test_name_get()
}
class "TestModeration" as odoo_src.odoo.addons.mail_group.tests.test_mail_group_moderation.TestModeration {
  setUpClass()
  test_moderation_flow_accept()
  test_moderation_flow_allow()
  test_moderation_flow_ban()
  test_moderation_flow_reject()
  test_moderation_send_guidelines()
  test_moderation_send_guidelines_on_new_member()
}
class "TestModuleCategory" as odoo_src.odoo.addons.base.tests.test_ir_module_category.TestModuleCategory {
  test_parent_circular_dependencies()
}
class "TestModuleManifest" as odoo_src.odoo.addons.base.tests.test_module.TestModuleManifest {
  maxDiff : NoneType
  module_name
  module_root : bytes, str
  setUp()
  setUpClass()
  test_change_manifest()
  test_default_manifest()
  test_missing_license()
  test_missing_manifest()
}
class "TestMrpAccount" as odoo_src.odoo.addons.mrp_account.tests.test_mrp_account.TestMrpAccount {
  setUpClass()
  test_00_production_order_with_accounting()
  test_labor_cost_posting_is_not_rounded_incorrectly()
  test_stock_user_without_account_permissions_can_create_bom()
  test_two_productions_unbuild_one_sell_other_fifo()
}
class "TestMrpAccountMove" as odoo_src.odoo.addons.mrp_account.tests.test_mrp_account.TestMrpAccountMove {
  setUpClass()
  test_labor_cost_balancing()
  test_labor_cost_balancing_with_cost_share()
  test_labor_cost_over_consumption()
  test_unbuild_account_00()
  test_wip_accounting_00()
}
class "TestMrpAnalyticAccount" as odoo_src.odoo.addons.mrp_account.tests.test_analytic_account.TestMrpAnalyticAccount {
  setUpClass()
}
class "TestMrpByProduct" as odoo_src.odoo.addons.mrp.tests.test_byproduct.TestMrpByProduct {
  product_d
  product_e
  stock_location
  setUpClass()
  test_00_mrp_byproduct()
  test_01_check_byproducts_update()
  test_01_mrp_byproduct()
  test_02_check_byproducts_update()
  test_03_check_byproducts_update()
  test_3_steps_byproduct()
  test_byproduct_putaway()
  test_byproduct_qty_update()
  test_byproducts_bom_document()
  test_change_product()
  test_check_byproducts_cost_share()
  test_check_byproducts_cost_share_02()
  test_default_uom()
  test_finished_and_byproduct_moves()
  test_over_produce_by_products_with_cost_share()
}
class "TestMrpCancelMO" as odoo_src.odoo.addons.mrp.tests.test_cancel_mo.TestMrpCancelMO {
  test_cancel_mo_without_component()
  test_cancel_mo_without_routing_1()
  test_cancel_mo_without_routing_2()
  test_cancel_mo_without_routing_3()
  test_unlink_mo()
}
class "TestMrpCommon" as odoo_src.odoo.addons.mrp.tests.common.TestMrpCommon {
  generate_mo(tracking_final, tracking_base_1, tracking_base_2, qty_final, qty_base_1, qty_base_2, picking_type_id, consumption)
  make_bom(p)
  make_prods(n)
  setUpClass()
}
class "TestMrpMulticompany" as odoo_src.odoo.addons.mrp.tests.test_multicompany.TestMrpMulticompany {
  setUpClass()
  test_bom_1()
  test_bom_2()
  test_company_specific_routes_and_company_creation()
  test_company_specific_routes_and_warehouse_creation()
  test_is_kit_in_multi_company_env()
  test_multi_company_kit_reservation()
  test_partner_1()
  test_product_produce_1()
  test_product_produce_2()
  test_production_1()
  test_production_2()
}
class "TestMrpOrder" as odoo_src.odoo.addons.mrp.tests.test_order.TestMrpOrder {
  box250
  byproduct1
  byproduct2
  byproduct3
  lot_1
  lot_2
  serial_1
  serial_2
  stock_location
  stock_shelf_1
  stock_shelf_2
  workcenter_4
  workcenter_5
  setUpClass()
  test_a_multi_button_plan()
  test_access_rights_manager()
  test_access_rights_user()
  test_all_workorders_planned()
  test_backorder_with_overconsumption()
  test_backorder_with_underconsumption()
  test_basic()
  test_batch_production_01()
  test_batch_production_02()
  test_batch_production_03()
  test_batch_production_04()
  test_cancel_return()
  test_capacity_duration_expected()
  test_change_sn_tracked_qty_produced()
  test_child_mo_after_qty_parent_mo_update()
  test_clear_finished_move()
  test_components_availability()
  test_compute_bom_id()
  test_compute_picking_type_id()
  test_compute_product_id()
  test_compute_product_uom_id()
  test_compute_tracked_time_1()
  test_compute_tracked_time_2_under_capacity()
  test_compute_tracked_time_3()
  test_consumed_and_produced_in_operation()
  test_consumption_action_set_qty_and_validate()
  test_consumption_flexible_1()
  test_consumption_flexible_2()
  test_consumption_strict_1()
  test_consumption_warning_1()
  test_copy()
  test_duration_expected_when_done()
  test_end_date()
  test_exceeded_consumed_qty_and_duplicated_lines()
  test_expected_duration_alternative_wc()
  test_immediate_validate_1()
  test_immediate_validate_3()
  test_immediate_validate_4()
  test_immediate_validate_5()
  test_immediate_validate_6()
  test_immediate_validate_uom()
  test_immediate_validate_uom_2()
  test_json_popover_with_workorder_dependence()
  test_manual_duration()
  test_manufacture_lead_days()
  test_mo_assign_producing_lot()
  test_mo_duration_expected()
  test_mo_modify_date_with_manuf_lead_time()
  test_mo_overview_added_component()
  test_mo_overview_added_operation()
  test_mo_overview_base_decorators()
  test_mo_overview_component_bom()
  test_mo_overview_component_bom_mto()
  test_mo_sn_warning()
  test_mo_without_resource_calendar()
  test_move_finished_onchanges()
  test_move_raw_uom_rounding()
  test_mrp_link_new_operations()
  test_multi_edit_start_date_wo()
  test_onchange_bom_ids_and_picking_type()
  test_onchange_picking_type_id_and_name()
  test_over_consumption()
  test_planning_cancelled_workorder()
  test_planning_workorder()
  test_product_produce_1()
  test_product_produce_10()
  test_product_produce_11()
  test_product_produce_12()
  test_product_produce_13()
  test_product_produce_14()
  test_product_produce_2()
  test_product_produce_3()
  test_product_produce_4()
  test_product_produce_6()
  test_product_produce_7()
  test_product_produce_9()
  test_product_produce_different_uom()
  test_product_produce_duplicate_1()
  test_product_produce_duplicate_2()
  test_product_produce_duplicate_3()
  test_product_produce_duplicate_4()
  test_product_produce_duplicate_5()
  test_product_produce_duplicate_6()
  test_product_produce_uom()
  test_product_qty_digits_precision()
  test_product_type_service_1()
  test_product_variants_in_mo()
  test_production_availability()
  test_products_with_variants()
  test_propagate_quantity_on_backorders()
  test_qty_producing()
  test_qty_update_and_method_reservation()
  test_recursive_work_orders()
  test_replan_mo_without_bom()
  test_replan_workorders01()
  test_replan_workorders02()
  test_rounding()
  test_source_and_child_mo()
  test_starting_wo_twice()
  test_state_workorders()
  test_timers_after_cancelling_mo()
  test_under_consumption()
  test_unlink_workorder_with_consumed_operations()
  test_update_mo_from_bom_with_kit()
  test_update_mo_from_bom_with_kit_variants()
  test_update_mo_with_mrp_user()
  test_update_plan_date()
  test_update_qty_producing_done_MO_with_lot()
  test_update_qty_to_consume_of_component()
  test_update_quantity_1()
  test_update_quantity_2()
  test_update_quantity_3()
  test_update_quantity_4()
  test_update_quantity_5()
  test_update_workcenter_adapt_finish_date()
  test_use_kit_as_component_in_production_without_bom()
  test_validation_mo_with_tracked_component()
  test_wo_date_finished_on_done_unplanned_mo()
  test_workcenter_specific_capacities()
  test_workcenter_timezone()
  test_workcenter_with_resource_calendar_from_another_company()
  test_workorder_planning_validity_with_workcenters()
  test_workorder_sequence()
  test_workorder_set_duration()
}
class "TestMrpProductionBackorder" as odoo_src.odoo.addons.mrp.tests.test_backorder.TestMrpProductionBackorder {
  setUpClass()
  test_auto_generate_backorder()
  test_backorder_name()
  test_backorder_name_with_multiple_backorder()
  test_backorder_name_without_procurement_group()
  test_generate_backorder_multi_type()
  test_no_tracking_1()
  test_no_tracking_2()
  test_no_tracking_pbm_1()
  test_no_tracking_pbm_sam_1()
  test_reservation_method_w_mo()
  test_rounding_backorder()
  test_split_draft()
  test_split_merge()
  test_split_mo()
  test_split_mo_partially_available()
  test_tracking_backorder_immediate_production_serial_1()
  test_tracking_backorder_series_lot_1()
  test_tracking_backorder_series_lot_2()
  test_tracking_backorder_series_serial_1()
  test_uom_backorder()
}
class "TestMrpRepairFlow" as odoo_src.odoo.addons.mrp_repair.tests.test_mrp_repair_flow.TestMrpRepairFlow {
  setUpClass()
  test_adding_kit_parts_to_confirmed_repair()
  test_repair_with_manufacture_mto_link()
}
class "TestMrpReplenish" as odoo_src.odoo.addons.mrp.tests.test_replenish.TestMrpReplenish {
  warehouse
  test_global_visibility_days_affect_lead_time_manufacture_rule()
  test_mrp_delay()
  test_mrp_delay_bom()
  test_mrp_orderpoint_leadtime()
  test_orderpoint_onchange_reordering_rule()
  test_replenish_from_scrap()
  test_replenish_multi_level_bom_with_pbm_sam()
  test_scrap_replenishment_reassigns_required_qty_to_component()
}
class "TestMrpSerialMassProduce" as odoo_src.odoo.addons.mrp.tests.test_smp.TestMrpSerialMassProduce {
  test_mass_produce_with_tracked_product()
  test_mass_produce_with_tracked_product_2()
  test_smp_produce_all()
  test_smp_produce_all_but_one()
  test_smp_produce_complex()
  test_smp_produce_with_consumable_component()
  test_smp_serial()
  test_smp_two_steps()
}
class "TestMrpSerialMassProducePerformance" as odoo_src.odoo.addons.mrp.tests.test_performance.TestMrpSerialMassProducePerformance {
  test_smp_performance()
}
class "TestMrpStockReports" as odoo_src.odoo.addons.mrp.tests.test_stock_report.TestMrpStockReports {
  test_kit_packaging_delivery_slip()
  test_mo_overview()
  test_mo_overview_same_component()
  test_multi_step_component_forecast_availability()
  test_overview_with_component_also_as_byproduct()
  test_report_forecast_1_mo_count()
  test_report_forecast_2_production_backorder()
  test_report_forecast_3_report_line_corresponding_to_mo_highlighted()
  test_report_price_variants()
  test_subkit_in_delivery_slip()
}
class "TestMrpStockValuation" as odoo_src.odoo.addons.mrp_account.tests.test_valuation_layers.TestMrpStockValuation {
  setUpClass()
  test_average_cost_unbuild_component_change_move_qty()
  test_production_account_00()
  test_production_account_01()
}
class "TestMrpSubcontractingCommon" as odoo_src.odoo.addons.mrp_subcontracting.tests.common.TestMrpSubcontractingCommon {
  setUpClass()
}
class "TestMrpValuationCommon" as odoo_src.odoo.addons.mrp_account.tests.test_valuation_layers.TestMrpValuationCommon {
  setUpClass()
}
class "TestMrpValuationStandard" as odoo_src.odoo.addons.mrp_account.tests.test_valuation_layers.TestMrpValuationStandard {
  test_avco_avco_1()
  test_avco_avco_2()
  test_average_cost_unbuild_with_byproducts()
  test_fifo_avco_1()
  test_fifo_avco_2()
  test_fifo_byproduct()
  test_fifo_fifo_1()
  test_fifo_fifo_2()
  test_fifo_produce_deliver_return_unbuild()
  test_fifo_std_1()
  test_fifo_std_2()
  test_fifo_unbuild()
  test_std_avco_1()
  test_std_avco_2()
  test_std_std_1()
  test_std_std_2()
  test_validate_draft_kit()
}
class "TestMrpWorkorderBackorder" as odoo_src.odoo.addons.mrp.tests.test_backorder.TestMrpWorkorderBackorder {
  setUpClass()
  test_kit_bom_order_splitting()
  test_mrp_backorder_operations()
}
class "TestMultiCompany" as odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestMultiCompany {
  setUpClass()
  test_leave_access_no_company_manager()
  test_leave_access_no_company_officer()
  test_leave_access_no_company_user()
  test_leave_access_other_company_manager()
  test_leave_access_other_company_officer()
  test_leave_access_other_company_user()
}
class "TestMultiCompany" as odoo_src.odoo.addons.hr.tests.test_multi_company.TestMultiCompany {
  setUpClass()
  test_read_manager_employee()
  test_read_no_manager_company()
}
class "TestMultiCompanyFlows" as odoo_src.odoo.addons.payment.tests.test_multicompany_flows.TestMultiCompanyFlows {
  partner
  setUpClass()
  test_archive_token_logged_in_another_company()
  test_full_access_to_partner_tokens()
  test_pay_logged_in_another_company()
}
class "TestMultiCompanyReport" as odoo_src.odoo.addons.hr.tests.test_multi_company.TestMultiCompanyReport {
  setUpClass()
  test_multi_company_report()
  test_single_company_report()
}
class "TestMultiVAT" as odoo_src.odoo.addons.account.tests.test_multivat.TestMultiVAT {
  setUpClass()
  test_children_taxes()
  test_multivat_cash_basis()
  test_tax_and_tax_group_should_be_reachable_using_standard_api()
  test_tax_data_should_be_consistent()
  test_tax_group_data()
}
class "TestMultistepManufacturingWarehouse" as odoo_src.odoo.addons.mrp.tests.test_warehouse_multistep_manufacturing.TestMultistepManufacturingWarehouse {
  wood_product
  setUpClass()
  test_00_create_warehouse()
  test_01_warehouse_twostep_manufacturing()
  test_02_warehouse_twostep_manufacturing()
  test_2_steps_and_additional_moves()
  test_3_steps_and_byproduct()
  test_3_steps_manufacturing_forecast()
  test_cancel_propagation()
  test_child_parent_relationship_on_backorder_creation()
  test_component_and_byproduct_on_transfers()
  test_manufacturing_3_steps()
  test_manufacturing_3_steps_flexible()
  test_manufacturing_3_steps_trigger_reordering_rules()
  test_manufacturing_bom_from_reordering_rules()
  test_manufacturing_bom_with_repetitions()
  test_manufacturing_flow()
  test_no_initial_demand()
  test_pick_components_uses_shipping_policy_from_picking_type()
  test_source_location_on_merge_mo_3_steps()
  test_update_component_qty()
  test_update_mo_from_bom_forecast()
}
class "TestMyDATAInvoice" as odoo_src.odoo.addons.l10n_gr_edi.tests.test_mydata_invoice.TestMyDATAInvoice {
  assert_mydata_error(invoice, expected_error_message)
  assert_mydata_xml_tree(invoice, expected_file_path, send_classification)
  setUpClass()
  test_l10n_gr_edi_try_send_invoices_allowed_no_cls_type()
  test_l10n_gr_edi_try_send_invoices_invalid_tax_amount()
  test_l10n_gr_edi_try_send_invoices_invalid_tax_exempt_no_category()
  test_l10n_gr_edi_try_send_invoices_invalid_tax_multi()
  test_l10n_gr_edi_try_send_invoices_invalid_tax_nonexistent()
  test_l10n_gr_edi_try_send_invoices_no_classification()
  test_l10n_gr_edi_try_send_invoices_no_credentials_and_vat()
  test_mydata_available_inv_type_values()
  test_mydata_send_bill_cls_expense()
  test_mydata_send_invoice()
  test_mydata_send_multi_invoices()
}
class "TestMyInvoisPoS" as odoo_src.odoo.addons.l10n_my_edi_pos.tests.test_myinvois_pos.TestMyInvoisPoS {
  config
  setUpClass()
  test_consolidate_invoices()
  test_consolidate_invoices_export_xml()
  test_consolidate_invoices_from_multiple_configs()
  test_consolidate_invoices_in_foreign_currency()
  test_consolidate_invoices_limit()
  test_consolidate_invoices_refund_export_xml()
  test_consolidate_invoices_refund_with_customer()
  test_consolidate_invoices_with_different_discounts()
  test_consolidate_invoices_with_split()
  test_delete_consolidated_invoice()
  test_invoice_from_pos()
  test_nothing_to_consolidate()
  test_refund_constrains_consolidated_invoice()
  test_refund_constrains_not_submitted()
  test_refund_constrains_regular_invoice()
  test_refund_order()
  test_refund_order_partially()
  test_send_consolidated_invoice()
  test_send_multiple_consolidated_invoice()
  with_pos_session()
}
class "TestMyUBLPint" as odoo_src.odoo.addons.l10n_my_ubl_pint.tests.test_my_ubl_pint.TestMyUBLPint {
  setUpClass()
  test_invoice_no_taxes()
  test_invoice_with_sst()
}
class "TestNegative" as odoo_src.odoo.addons.hr_holidays.tests.test_negative.TestNegative {
  setUpClass()
  test_negative_time_off()
}
class "TestNeutralize" as odoo_src.odoo.addons.base.tests.test_neutralize.TestNeutralize {
  test_10_neutralize()
}
class "TestNoModel" as odoo_src.odoo.addons.base.tests.test_views.TestNoModel {
  arch
  text_para
  test_create_view_nomodel()
  test_qweb_translation()
}
class "TestNodeLocator" as odoo_src.odoo.addons.base.tests.test_views.TestNodeLocator {
  test_attribute_filter()
  test_attribute_mismatch()
  test_match_field()
  test_match_other()
  test_match_xpath()
  test_no_match_field()
  test_no_match_other()
  test_no_match_xpath()
  test_version_mismatch()
}
class "TestNotifySecurityUpdate" as odoo_src.odoo.addons.mail.tests.test_res_users.TestNotifySecurityUpdate {
  test_security_update_email()
  test_security_update_login()
  test_security_update_password()
}
class "TestNotifySecurityUpdateTotp" as odoo_src.odoo.addons.auth_totp_mail.tests.test_notify_security_update_totp.TestNotifySecurityUpdateTotp {
  test_security_update_totp_enabled_disabled()
  test_security_update_trusted_device_added_removed()
}
class "TestNum2WordsAr" as odoo_src.odoo.addons.base.tests.test_num2words_ar.TestNum2WordsAr {
  setUpClass()
  test_decimal_multiple_of_thousands()
  test_multiple_of_thousands()
}
class "TestORM" as odoo_src.odoo.addons.base.tests.test_orm.TestORM {
  test_access_deleted_records()
  test_access_filtered_records()
  test_access_partial_deletion()
  test_create_multi()
  test_exists()
  test_m2m_store_trigger()
  test_read()
  test_search_read()
  test_write_duplicate()
}
class "TestOSSBelgium" as odoo_src.odoo.addons.l10n_eu_oss.tests.test_oss.TestOSSBelgium {
  setUpClass()
  test_country_tag_from_belgium()
  test_oss_tax_copied_name()
  test_oss_tax_should_be_instantiated_on_first_branch_having_a_tax_id()
  test_oss_tax_should_be_instantiated_on_root_company_if_no_tax_id_on_sub_branch()
}
class "TestOSSMap" as odoo_src.odoo.addons.l10n_eu_oss.tests.test_oss.TestOSSMap {
  test_oss_eu_tag_map()
}
class "TestOSSSpain" as odoo_src.odoo.addons.l10n_eu_oss.tests.test_oss.TestOSSSpain {
  setUpClass()
  test_country_tag_from_spain()
}
class "TestOSSUSA" as odoo_src.odoo.addons.l10n_eu_oss.tests.test_oss.TestOSSUSA {
  child_company
  foreign_vat_fpos
  root_company
  sub_child_company
  setUpClass()
  test_no_oss_tax()
  test_oss_tax_on_eu_branch()
}
class "TestOee" as odoo_src.odoo.addons.mrp.tests.test_oee.TestOee {
  create_productivity_line(loss_reason, date_start, date_end)
  test_unset_end_date()
  test_wrokcenter_oee()
}
class "TestOnboarding" as odoo_src.odoo.addons.onboarding.tests.test_onboarding.TestOnboarding {
  onboarding_3
  step_initially_w_o_onboarding
  test_onboarding_completion_global()
  test_onboarding_completion_per_company()
  test_onboarding_shared_steps()
  test_onboarding_step_without_onboarding()
  test_onboarding_to_company_change()
  test_progress_no_company_uniqueness()
  test_progress_per_company_uniqueness()
  test_remove_company_with_progress()
}
class "TestOnboardingCommon" as odoo_src.odoo.addons.onboarding.tests.common.TestOnboardingCommon {
  onboarding_1
  onboarding_1_step_1
  onboarding_1_step_2
  activate_company(company)
  setUpClass()
}
class "TestOnboardingConcurrency" as odoo_src.odoo.addons.onboarding.tests.test_onboarding_concurrency.TestOnboardingConcurrency {
  cleanUpClass()
  setUpClass()
  test_concurrent_create_progress()
}
class "TestOne2many" as odoo_src.odoo.addons.base.tests.test_expression.TestOne2many {
  Partner
  partner
  setUp()
  test_autojoin()
  test_autojoin_mixed()
  test_empty()
  test_name_search()
  test_regular()
}
class "TestOptionalViews" as odoo_src.odoo.addons.base.tests.test_views.TestOptionalViews {
  v0
  v1
  v2
  v3
  setUp()
  test_applied()
  test_applied_state_toggle()
}
class "TestOrmCache" as odoo_src.odoo.addons.base.tests.test_ormcache.TestOrmCache {
  setUpClass()
  test_invalidation()
  test_invalidation_thread_local()
  test_ormcache()
  test_signaling_01_multiple()
  test_signaling_01_single()
}
class "TestOutOfOffice" as odoo_src.odoo.addons.hr_holidays.tests.test_out_of_office.TestOutOfOffice {
  setUpClass()
  test_leave_ooo()
}
class "TestOutOfOfficePerformance" as odoo_src.odoo.addons.hr_holidays.tests.test_out_of_office.TestOutOfOfficePerformance {
  setUpClass()
  test_leave_im_status_performance_partner_leave_offline()
  test_leave_im_status_performance_partner_offline()
  test_leave_im_status_performance_user_leave_offline()
  test_search_absent_employee()
}
class "TestOverrides" as odoo_src.odoo.addons.base.tests.test_overrides.TestOverrides {
  test_creates()
  test_default_get()
  test_unlink()
  test_writes()
}
class "TestOwnChecks" as odoo_src.odoo.addons.l10n_latam_check.tests.test_own_checks.TestOwnChecks {
  test_01_pay_with_own_checks()
  test_02_pay_with_own_check_and_cancel_payment()
}
class "TestOwnDefaults" as odoo_src.odoo.addons.base.tests.test_ir_filters.TestOwnDefaults {
  test_new_filter_existing_default()
  test_new_filter_not_default()
  test_new_no_filter()
  test_update_filter_set_default()
}
class "TestParentStore" as odoo_src.odoo.addons.base.tests.test_base.TestParentStore {
  cat0
  cat1
  cat2
  cat21
  root
  setUp()
  test_duplicate_children_01()
  test_duplicate_children_02()
  test_duplicate_children_03()
  test_duplicate_parent()
}
class "TestPartner" as odoo_src.odoo.addons.mail.tests.test_res_partner.TestPartner {
  mockPartnerCalls()
  setUpClass()
  test_address_tracking()
  test_discuss_mention_suggestions_priority()
  test_find_or_create()
  test_find_or_create_email_field()
  test_find_or_create_from_emails()
  test_log_portal_group()
  test_name_create_corner_cases()
  test_partner_merge_wizards()
  test_res_partner_find_or_create_from_emails_dupes_email_field()
}
class "TestPartner" as odoo_src.odoo.addons.hr_holidays.tests.test_res_partner.TestPartner {
  setUpClass()
  test_res_partner_to_store()
}
class "TestPartner" as odoo_src.odoo.addons.base.tests.test_res_partner.TestPartner {
  mockPartnerCalls()
  test_archive_internal_partners()
  test_display_name_translation()
  test_email_formatted()
  test_find_or_create()
  test_is_public()
  test_lang_computation_code()
  test_name_create()
  test_name_search()
  test_name_search_with_user()
  test_partner_merge_wizard_dst_partner_id()
}
class "TestPartnerAddressCompany" as odoo_src.odoo.addons.base.tests.test_res_partner.TestPartnerAddressCompany {
  setUpClass()
  test_accessibility_of_company_partner_from_branch()
  test_address()
  test_address_first_contact_sync()
  test_address_get()
  test_commercial_field_sync()
  test_commercial_partner_nullcompany()
  test_company_change_propagation()
  test_company_dependent_commercial_sync()
  test_display_address_missing_key()
  test_display_name()
}
class "TestPartnerForm" as odoo_src.odoo.addons.base.tests.test_res_partner.TestPartnerForm {
  test_lang_computation_form_view()
  test_onchange_parent_sync_user()
}
class "TestPartnerFormatAddress" as odoo_src.odoo.addons.base.tests.test_format_address_mixin.TestPartnerFormatAddress {
  test_address_view()
}
class "TestPartnerGeoLocalization" as odoo_src.odoo.addons.base_geolocalize.tests.test_geolocalize.TestPartnerGeoLocalization {
  test_geo_localization_notification()
}
class "TestPartnerRecursion" as odoo_src.odoo.addons.base.tests.test_res_partner.TestPartnerRecursion {
  p1
  p2
  p3
  setUp()
  test_100_res_partner_recursion()
  test_101_res_partner_recursion()
  test_102_res_partner_recursion()
  test_103_res_partner_recursion()
  test_104_res_partner_recursion_indirect_cycle()
  test_105_res_partner_recursion()
  test_110_res_partner_recursion_multi_update()
  test_111_res_partner_recursion_infinite_loop()
}
class "TestPaymentMethod" as odoo_src.odoo.addons.payment.tests.test_payment_method.TestPaymentMethod {
  maxDiff : NoneType
  test_availability_report_covers_all_reasons()
  test_non_primary_payment_method_not_compatible()
  test_payment_method_compatible_when_no_supported_countries_set()
  test_payment_method_compatible_when_no_supported_currencies_set()
  test_payment_method_compatible_when_provider_is_enabled()
  test_payment_method_compatible_when_tokenization_forced()
  test_payment_method_compatible_with_express_checkout()
  test_payment_method_compatible_with_supported_countries()
  test_payment_method_compatible_with_supported_currencies()
  test_payment_method_not_compatible_when_provider_is_disabled()
  test_payment_method_not_compatible_when_tokenization_forced()
  test_payment_method_not_compatible_with_express_checkout()
  test_payment_method_not_compatible_with_unsupported_countries()
  test_payment_method_not_compatible_with_unsupported_currencies()
  test_payment_method_requires_provider_to_be_activated()
  test_unlinking_payment_method_from_provider_state_archives_tokens()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_xendit.tests.test_payment_provider.TestPaymentProvider {
  test_incompatible_with_unsupported_currencies()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment.tests.test_payment_provider.TestPaymentProvider {
  env
  maxDiff : NoneType
  test_availability_report_covers_all_reasons()
  test_changing_provider_state_archives_tokens()
  test_disabling_provider_deactivates_default_payment_methods()
  test_disabling_provider_deactivates_processing_cron()
  test_enabling_provider_activates_default_payment_methods()
  test_enabling_provider_activates_processing_cron()
  test_provider_compatible_when_maximum_amount_is_zero()
  test_provider_compatible_when_no_available_countries_set()
  test_provider_compatible_when_no_available_currencies_set()
  test_provider_compatible_when_payment_below_maximum_amount()
  test_provider_compatible_when_tokenization_forced()
  test_provider_compatible_when_tokenization_required()
  test_provider_compatible_with_available_countries()
  test_provider_compatible_with_available_currencies()
  test_provider_compatible_with_express_checkout()
  test_provider_not_compatible_when_payment_above_maximum_amount()
  test_provider_not_compatible_when_tokenization_forced()
  test_provider_not_compatible_when_tokenization_required()
  test_provider_not_compatible_with_express_checkout()
  test_provider_not_compatible_with_unavailable_countries()
  test_provider_not_compatible_with_unavailable_currencies()
  test_published_provider_compatible_with_all_users()
  test_unpublished_provider_compatible_with_internal_user()
  test_unpublished_provider_not_compatible_with_non_internal_user()
  test_validation_currency_is_supported()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_mercado_pago.tests.test_payment_provider.TestPaymentProvider {
  test_incompatible_with_unsupported_currencies()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_razorpay_oauth.tests.test_payment_provider.TestPaymentProvider {
  test_allow_enabling_if_credentials_are_set()
  test_prevent_enabling_if_credentials_are_not_set()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_nuvei.tests.test_payment_provider.TestPaymentProvider {
  test_incompatible_with_unsupported_currencies()
  test_signature_calculation_for_incoming_data()
  test_signature_calculation_for_outgoing_data()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_razorpay.tests.test_payment_provider.TestPaymentProvider {
  test_incompatible_with_unsupported_currencies()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_flutterwave.tests.test_payment_provider.TestPaymentProvider {
  test_incompatible_with_unsupported_currencies()
  test_incompatible_with_validation_transactions()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.payment_asiapay.tests.test_payment_provider.TestPaymentProvider {
  test_incompatible_with_unsupported_currencies()
  test_signature_calculation_for_incoming_data()
  test_signature_calculation_for_outgoing_data()
}
class "TestPaymentProvider" as odoo_src.odoo.addons.account_payment.tests.test_payment_provider.TestPaymentProvider {
  test_duplicate_provider_child_company_no_journal_id()
}
class "TestPaymentToken" as odoo_src.odoo.addons.payment.tests.test_payment_token.TestPaymentToken {
  test_cannot_assign_token_to_public_partner()
  test_display_name_for_empty_payment_details()
  test_display_name_is_not_padded()
  test_display_name_is_padded()
  test_display_name_is_shortened_to_max_length()
  test_unarchiving_token_requires_active_payment_method()
  test_unarchiving_token_requires_active_provider()
  test_users_have_no_access_to_other_users_tokens()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_xendit.tests.test_payment_transaction.TestPaymentTransaction {
  maxDiff : int
  reference : str
  test_charge_request_contains_rounded_amount_idr()
  test_empty_rendering_values_if_direct()
  test_get_tx_from_notification_data_returns_tx()
  test_no_input_missing_from_redirect_form()
  test_no_item_missing_from_invoice_request_payload()
  test_no_item_missing_from_rendering_values()
  test_processing_notification_data_confirms_transaction()
  test_processing_notification_data_tokenizes_transaction()
  test_processing_values_contain_rounded_amount_idr()
  test_tokenization_flow_not_save_payment_details()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_custom.tests.test_payment_transaction.TestPaymentTransaction {
  setUpClass()
  test_communication_based_on_transaction_reference()
  test_communication_for_invoice()
  test_communication_for_sale_order()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment.tests.test_payment_transaction.TestPaymentTransaction {
  test_capture_allowed_for_authorized_users()
  test_capture_blocked_for_unauthorized_user()
  test_capturing_child_tx_triggers_source_tx_state_update()
  test_capturing_full_amount_confirms_source_tx()
  test_capturing_partial_amount_leaves_source_tx_authorized()
  test_log_processing_values()
  test_partial_capture_transaction_values()
  test_refund_allowed_for_authorized_users()
  test_refund_blocked_for_unauthorized_user()
  test_refund_transaction_values()
  test_refunds_count()
  test_update_state_to_extra_allowed_state()
  test_update_state_to_illegal_target_state()
  test_updating_state_resets_post_processing_status()
  test_void_allowed_for_authorized_users()
  test_void_blocked_for_unauthorized_user()
  test_voiding_child_tx_triggers_source_tx_state_update()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_demo.tests.test_payment_transaction.TestPaymentTransaction {
  test_making_a_payment_request_propagates_token_simulated_state_to_transaction()
  test_processing_notification_data_authorizes_transaction()
  test_processing_notification_data_cancels_transaction()
  test_processing_notification_data_confirms_transaction()
  test_processing_notification_data_propagates_simulated_state_to_token()
  test_processing_notification_data_sets_transaction_in_error()
  test_processing_notification_data_sets_transaction_pending()
  test_processing_notification_data_tokenizes_transaction()
  test_send_full_capture_request_does_not_create_capture_tx()
  test_send_partial_capture_request_creates_capture_tx()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_aps.tests.test_payment_transaction.TestPaymentTransaction {
  test_no_input_missing_from_redirect_form()
  test_no_item_missing_from_rendering_values()
  test_processing_notification_data_confirms_transaction()
  test_reference_contains_only_valid_characters()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_mercado_pago.tests.test_payment_transaction.TestPaymentTransaction {
  amount : float
  currency
  maxDiff : int
  test_cop_currency_rounding()
  test_no_input_missing_from_redirect_form()
  test_no_item_missing_from_preference_request_payload()
  test_processing_notification_data_confirms_transaction()
  test_processing_notification_data_rejects_transaction()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_nuvei.tests.test_payment_transaction.TestPaymentTransaction {
  test_no_input_missing_from_redirect_form()
  test_no_item_missing_from_rendering_values()
  test_processing_notification_data_confirms_transaction()
  test_processing_notification_data_sets_transaction_in_error()
  test_processing_notification_data_sets_transaction_to_cancel()
  test_processing_notification_data_sets_unknown_transaction_in_error()
  test_processing_values_contain_rounded_amount_usd_webpay()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_razorpay.tests.test_payment_transaction.TestPaymentTransaction {
  maxDiff : int
  test_allow_multi_payments_on_non_recurring_transactions()
  test_get_tx_from_notification_data_creates_refund_tx_when_missing()
  test_get_tx_from_notification_data_returns_refund_tx()
  test_no_item_missing_from_order_request_payload()
  test_prevent_multi_payments_on_recurring_transactions()
  test_processing_notification_data_confirms_transaction()
  test_processing_notification_data_only_tokenizes_once()
  test_processing_notification_data_tokenizes_transaction()
  test_processing_notification_data_updates_reference_if_not_confirmed()
  test_void_is_not_supported()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_flutterwave.tests.test_payment_transaction.TestPaymentTransaction {
  test_no_input_missing_from_redirect_form()
  test_no_item_missing_from_rendering_values()
  test_processing_notification_data_confirms_transaction()
  test_processing_notification_data_tokenizes_transaction()
}
class "TestPaymentTransaction" as odoo_src.odoo.addons.payment_asiapay.tests.test_payment_transaction.TestPaymentTransaction {
  test_no_input_missing_from_redirect_form()
  test_no_item_missing_from_rendering_values()
  test_processing_notification_data_confirms_transaction()
  test_reference_is_computed_based_on_document_name()
  test_reference_is_singularized()
  test_reference_is_stripped_at_max_length()
}
class "TestPayslipHolidaysComputation" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.test_payslip_holidays_computation.TestPayslipHolidaysComputation {
  test_work_data()
}
class "TestPdf" as odoo_src.odoo.addons.base.tests.test_pdf.TestPdf {
  file
  minimal_pdf_reader
  minimal_reader_buffer : BytesIO
  setUp()
  tearDown()
  test_branded_file_writer()
  test_merge_pdf()
  test_odoo_pdf_file_reader()
  test_odoo_pdf_file_reader_with_owner_encryption()
  test_odoo_pdf_file_writer()
  test_reshaping_arabic_text()
  test_reshaping_non_arabic_text()
}
class "TestPeppolMessage" as odoo_src.odoo.addons.account_peppol.tests.test_peppol_messages.TestPeppolMessage {
  create_move(partner, company)
  setUpClass()
  test_attachment_placeholders()
  test_available_peppol_edi_formats()
  test_available_peppol_sending_methods()
  test_peppol_default_ubl_bis3_multi()
  test_peppol_default_ubl_bis3_single()
  test_peppol_send_multi_async()
  test_receive_error_peppol()
  test_receive_success_peppol()
  test_resend_error_peppol_message()
  test_send_invalid_edi_user()
  test_send_peppol_alerts_invalid_partner()
  test_send_peppol_alerts_not_valid_format_partner(mocked_check)
  test_send_peppol_alerts_not_valid_partner()
  test_send_success_message()
  test_silent_error_while_creating_xml()
  test_validate_partner()
}
class "TestPeppolParticipant" as odoo_src.odoo.addons.account_peppol.tests.test_peppol_participant.TestPeppolParticipant {
  setUpClass()
  test_create_duplicate_participant()
  test_create_participant_already_exists()
  test_create_participant_missing_data()
  test_create_reject_participant()
  test_create_success_receiver()
  test_create_success_receiver_two_steps()
  test_create_success_sender()
  test_ignore_archived_edi_users()
  test_save_migration_key()
}
class "TestPerformance" as odoo_src.odoo.addons.base.tests.test_profiler.TestPerformance {
  test_collector_max_frequency()
  test_frequencies_1ms_sleep()
  test_traces_async_memory_optimisation()
}
class "TestPermissions" as odoo_src.odoo.addons.base.tests.test_ir_attachment.TestPermissions {
  Attachments
  attachment
  env
  rule
  vals : dict
  setUp()
  test_basic_modifications()
  test_cross_record_copies()
  test_field_read_permission()
  test_read_permission()
  test_with_write_permissions()
}
class "TestPhCommon" as odoo_src.odoo.addons.l10n_ph.tests.common.TestPhCommon {
  setUpClass()
}
class "TestPhonenumbers" as odoo_src.odoo.addons.phone_validation.tests.test_phonenumbers.TestPhonenumbers {
  test_country_code_falsy()
  test_get_region_data_for_number()
  test_phone_format_e164_brazil()
  test_phone_format_e164_mexico()
  test_phone_format_error()
}
class "TestPhonenumbersBlacklist" as odoo_src.odoo.addons.phone_validation.tests.test_phonenumbers_blacklist.TestPhonenumbersBlacklist {
  test_sanitize_search()
}
class "TestPhonenumbersPatch" as odoo_src.odoo.addons.phone_validation.tests.test_phonenumbers_patch.TestPhonenumbersPatch {
  test_region_BR_monkey_patch()
  test_region_CI_monkey_patch()
  test_region_CO_monkey_patch()
  test_region_IL_monkey_patch()
  test_region_KE_monkey_patch()
  test_region_MA_monkey_patch()
  test_region_MU_monkey_patch()
  test_region_MX_monkey_patch()
  test_region_PA_monkey_patch()
  test_region_SN_monkey_patch()
}
class "TestPoSSaleL10NBe" as odoo_src.odoo.addons.l10n_be_pos_sale.tests.test_l10n_be_pos_sale.TestPoSSaleL10NBe {
  product_a
  setUpClass()
  test_pos_branch_company_access()
  test_settle_order_is_invoice()
}
class "TestPoSSaleL10NBeNormalCompany" as odoo_src.odoo.addons.l10n_be_pos_sale.tests.test_l10n_be_pos_sale.TestPoSSaleL10NBeNormalCompany {
  product_a
  test_settle_order_can_invoice()
}
class "TestPortalAttachment" as odoo_src.odoo.addons.account.tests.test_portal_attachment.TestPortalAttachment {
  setUpClass()
  test_01_portal_attachment()
}
class "TestPortalInvoice" as odoo_src.odoo.addons.account.tests.test_portal_invoice.TestPortalInvoice {
  setUpClass()
  test_portal_my_invoice_detail_download_pdf()
  test_portal_my_invoice_detail_download_proforma()
  test_portal_my_invoice_detail_not_his_invoice()
}
class "TestPortalTimesheet" as odoo_src.odoo.addons.hr_timesheet.tests.test_portal_timesheet.TestPortalTimesheet {
  test_action_view_subtask_timesheet()
  test_ensure_fields_view_get_access()
}
class "TestPosEdi" as odoo_src.odoo.addons.l10n_es_edi_tbai_pos.tests.test_tbai_pos.TestPosEdi {
  create_pos_order(session, price_unit)
  pay_pos_order(pos_order)
  setUpClass()
  test_tbai_pos_order()
  test_tbai_pos_order_to_invoice()
  test_tbai_refund_invoiced_pos_order()
  test_tbai_refund_pos_order()
}
class "TestPosQrCommon" as odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.common.TestPosQrCommon {
  setUpClass()
}
class "TestPosQris" as odoo_src.odoo.addons.l10n_id_pos.tests.test_qris_pos.TestPosQris {
  setUpClass()
  test_only_call_api_call_once()
  test_qris_change_amount()
  test_qris_link_with_pos_order()
  test_qris_transaction_allow_pos_order()
  test_tour_qris_payment_fail()
  test_tour_qris_payment_success()
}
class "TestPrettifyDomain" as odoo_src.odoo.addons.base.tests.test_expression.TestPrettifyDomain {
  test_prettify_domain()
}
class "TestPrintCheck" as odoo_src.odoo.addons.account_check_printing.tests.test_print_check.TestPrintCheck {
  setUpClass()
  test_check_label()
  test_draft_invoice_payment_check_printing()
  test_in_invoice_check_manual_sequencing()
  test_in_invoice_check_manual_sequencing_with_multiple_payments()
  test_multi_currency_stub_lines()
  test_multiple_payments_check_number_uniqueness()
  test_out_refund_check_manual_sequencing()
  test_print_check_with_branch()
  test_print_great_pre_number_check()
}
class "TestProcessingFlow" as odoo_src.odoo.addons.payment_xendit.tests.test_processing_flows.TestProcessingFlow {
  reference : str
  test_accept_webhook_notification_with_valid_signature()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_set_xendit_transactions_to_pending_on_return()
  test_webhook_notification_triggers_processing()
  test_webhook_notification_triggers_signature_check()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_demo.tests.test_processing_flows.TestProcessingFlows {
  test_portal_payment_triggers_processing()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_aps.tests.test_processing_flows.TestProcessingFlows {
  test_accept_notification_with_valid_signature()
  test_redirect_notification_triggers_processing()
  test_redirect_notification_triggers_signature_check()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_webhook_notification_triggers_processing()
  test_webhook_notification_triggers_signature_check()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_mercado_pago.tests.test_processing_flows.TestProcessingFlows {
  test_redirect_notification_triggers_processing()
  test_webhook_notification_triggers_processing()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_nuvei.tests.test_processing_flows.TestProcessingFlows {
  test_accept_notification_with_valid_signature()
  test_redirect_notification_triggers_processing()
  test_redirect_notification_triggers_signature_check()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_webhook_notification_triggers_processing()
  test_webhook_notification_triggers_signature_check()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_razorpay.tests.test_processing_flows.TestProcessingFlows {
  test_accept_webhook_notification_with_valid_signature()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_webhook_notification_triggers_processing()
  test_webhook_notification_triggers_signature_check()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_flutterwave.tests.test_processing_flows.TestProcessingFlows {
  test_accept_webhook_notification_with_valid_signature()
  test_redirect_notification_triggers_processing()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_webhook_notification_triggers_processing()
  test_webhook_notification_triggers_signature_check()
}
class "TestProcessingFlows" as odoo_src.odoo.addons.payment_asiapay.tests.test_processing_flows.TestProcessingFlows {
  test_accept_webhook_notification_with_valid_signature()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_webhook_notification_triggers_processing()
  test_webhook_notification_triggers_signature_check()
}
class "TestProcurement" as odoo_src.odoo.addons.mrp.tests.test_procurement.TestProcurement {
  warehouse
  test_auto_assign()
  test_check_update_qty_mto_chain()
  test_consecutive_pickings()
  test_finished_move_cancellation()
  test_link_date_mo_moves()
  test_pbm_and_additionnal_components()
  test_procurement()
  test_procurement_2()
  test_procurement_3()
  test_procurement_with_empty_bom()
  test_rr_with_dependance_between_bom()
  test_several_boms_same_finished_product()
  test_update_merged_mo_component_qty()
  test_update_mo_component_qty()
}
class "TestProduct" as odoo_src.odoo.addons.account.tests.test_product.TestProduct {
  setUpClass()
  test_account_manager_user_can_create_product()
  test_internal_user_can_read_product_with_tax_and_tags()
  test_multi_company_product_tax()
}
class "TestProfileAccess" as odoo_src.odoo.addons.base.tests.test_profiler.TestProfileAccess {
  setUpClass()
  test_admin_has_access()
  test_user_no_access()
}
class "TestProfiling" as odoo_src.odoo.addons.base.tests.test_profiler.TestProfiling {
  test_default_recorders()
  test_default_values()
  test_env_profiler_database()
  test_env_profiler_description()
  test_execution_context_nested()
  test_execution_context_save()
  test_profiler_return()
  test_qweb_recorder()
}
class "TestProjectProject" as odoo_src.odoo.addons.hr_timesheet.tests.test_project_project.TestProjectProject {
  test_create_projects()
  test_create_projects_with_default_analytic_account()
}
class "TestProjectTaskQuickCreate" as odoo_src.odoo.addons.hr_timesheet.tests.test_project_task_quick_create.TestProjectTaskQuickCreate {
  setUpClass()
  test_create_task_with_invalid_expressions()
  test_create_task_with_valid_expressions()
}
class "TestQWebBasic" as odoo_src.odoo.addons.base.tests.test_qweb.TestQWebBasic {
  test_att_escaping_1()
  test_att_escaping_2()
  test_att_no_propagation_1()
  test_att_no_propagation_2()
  test_attf_escaping_1()
  test_attf_escaping_2()
  test_attf_escaping_3()
  test_call_error()
  test_call_set()
  test_compile_expr()
  test_compile_expr_security()
  test_error_message_1()
  test_error_message_2()
  test_error_message_3()
  test_error_message_4()
  test_error_message_5()
  test_error_message_6()
  test_error_message_7()
  test_error_message_8()
  test_esc_markup()
  test_foreach_as_error_1()
  test_foreach_as_error_2()
  test_foreach_as_error_3()
  test_foreach_iter_dict()
  test_foreach_iter_list()
  test_if_comment()
  test_if_from_body()
  test_if_spaces()
  test_out()
  test_out_default_value()
  test_out_escape_text()
  test_out_format_1()
  test_out_format_2()
  test_out_format_3()
  test_out_format_4()
  test_out_format_5()
  test_out_format_6()
  test_out_markup()
  test_render_barcode()
  test_render_comment_tail()
  test_render_comments()
  test_render_processing_instructions()
  test_render_t_call_propagates_t_lang()
  test_render_widget_contact()
  test_render_widget_duration_fallback()
  test_set_1()
  test_set_2()
  test_set_3()
  test_set_body_1()
  test_set_body_2()
  test_set_error_1()
  test_set_error_2()
  test_space_remove_technical_all()
  test_space_remove_technical_space_t_foreach()
  test_void_element()
}
class "TestQWebNS" as odoo_src.odoo.addons.base.tests.test_qweb.TestQWebNS {
  test_render_dynamic_xml_with_code_error()
  test_render_dynamic_xml_with_namespace_2()
  test_render_dynamic_xml_with_namespace_t_attf()
  test_render_dynamic_xml_with_namespace_t_attf_with_useless_distributed_namespace()
  test_render_dynamic_xml_with_namespace_t_esc()
  test_render_dynamic_xml_with_namespace_t_esc_with_useless_distributed_namespace()
  test_render_dynamic_xml_with_namespaced_attributes()
  test_render_static_xml_with_extension()
  test_render_static_xml_with_namespace()
  test_render_static_xml_with_namespace_2()
  test_render_static_xml_with_namespace_3()
  test_render_static_xml_with_namespace_dynamic()
  test_render_static_xml_with_namespace_dynamic_2()
  test_render_static_xml_with_namespaced_attributes()
  test_render_static_xml_with_t_call()
  test_render_static_xml_with_useless_distributed_namespace()
  test_render_static_xml_with_void_element()
}
class "TestQWebRender" as odoo_src.odoo.addons.base.tests.test_views.TestQWebRender {
  test_render()
}
class "TestQWebTField" as odoo_src.odoo.addons.base.tests.test_qweb.TestQWebTField {
  engine
  env_branding
  setUp()
  test_default_value()
  test_i18n()
  test_no_value_no_default_value()
  test_reject_crummy_tags()
  test_reject_t_tag()
  test_render_t_options()
  test_trivial()
  test_xss_breakout()
}
class "TestQris" as odoo_src.odoo.addons.l10n_id.tests.test_qris.TestQris {
  setUpClass()
  test_fetch_payment_status_fail()
  test_fetch_payment_status_success()
  test_gc_no_remove_transactions_unpaid_within_30()
  test_gc_remove_transactions_unpaid_after_30()
  test_qris_qr_code_generation()
}
class "TestQrisTransaction" as odoo_src.odoo.addons.l10n_id.tests.test_qris_transaction.TestQrisTransaction {
  setUpClass()
  test_l10n_id_get_qris_qr_statuses()
  test_latest_transaction()
  test_retrieve_backend_record()
}
class "TestQueries" as odoo_src.odoo.addons.base.tests.test_expression.TestQueries {
  test_access_rules()
  test_count()
  test_count_limit()
  test_logic()
  test_order()
  test_rec_names_search()
  test_translated_field()
}
class "TestQuery" as odoo_src.odoo.addons.base.tests.test_osv.TestQuery {
  test_auto()
  test_records_as_query()
}
class "TestQwebCache" as odoo_src.odoo.addons.base.tests.test_qweb.TestQwebCache {
  test_render_nodb()
  test_render_xml_cache_and_inherit_view()
  test_render_xml_cache_base()
  test_render_xml_cache_contains_nocache()
  test_render_xml_cache_different()
  test_render_xml_cache_nocache_cache()
  test_render_xml_cache_nocache_cache_on_same_tag()
  test_render_xml_cache_with_t_set_in_cache()
  test_render_xml_cache_with_t_set_out_of_cache()
  test_render_xml_cache_with_t_set_wrap_t_cache()
  test_render_xml_conditional_cache()
  test_render_xml_dont_use_cache_base()
  test_render_xml_dont_use_cache_contains_nocache()
  test_render_xml_dont_use_cache_different()
  test_render_xml_dont_use_cache_false_recursive()
  test_render_xml_dont_use_cache_recursive()
  test_render_xml_nocache_in_cache_in_cache()
  test_render_xml_nocache_use_the_root_values()
  test_render_xml_nocache_use_the_root_values_and_cached_values()
  test_render_xml_nocache_use_the_root_values_and_cached_values_error()
  test_render_xml_t_set_wrap_t_cache()
}
class "TestQwebFieldContact" as odoo_src.odoo.addons.base.tests.test_qweb_field.TestQwebFieldContact {
  setUpClass()
  test_value_to_html_with_website_and_phone()
  test_value_to_html_without_phone()
}
class "TestQwebFieldInteger" as odoo_src.odoo.addons.base.tests.test_qweb_field.TestQwebFieldInteger {
  test_integer_value_to_html()
  value_to_html(value, options)
}
class "TestQwebFieldTime" as odoo_src.odoo.addons.base.tests.test_qweb_field.TestQwebFieldTime {
  test_time_value_to_html()
  value_to_html(value, options)
}
class "TestRealCursor" as odoo_src.odoo.addons.base.tests.test_db_cursor.TestRealCursor {
  test_connection_readonly()
  test_execute_bad_params()
  test_multiple_close_call_cursor()
  test_transaction_isolation_cursor()
  test_using_closed_cursor()
}
class "TestRecordCache" as odoo_src.odoo.addons.base.tests.test_cache.TestRecordCache {
  test_cache()
  test_memory()
}
class "TestRecruitment" as odoo_src.odoo.addons.hr_recruitment.tests.test_recruitment.TestRecruitment {
  test_applicant_refuse_reason()
  test_application_no_partner_duplicate()
  test_candidate_application_count()
  test_duplicate_email()
  test_infer_applicant_lang_from_context()
  test_open_other_applications_count()
  test_other_applications_count()
  test_similar_candidates_count()
}
class "TestRecruitmentInterviewer" as odoo_src.odoo.addons.hr_recruitment.tests.test_recruitment_interviewer.TestRecruitmentInterviewer {
  setUpClass()
  test_interviewer_access_rights()
  test_interviewer_group()
}
class "TestRecruitmentProcess" as odoo_src.odoo.addons.hr_recruitment.tests.test_recruitment_process.TestRecruitmentProcess {
  test_00_recruitment_process()
  test_01_hr_application_notification()
  test_email_application_multi_company()
  test_job_platforms()
  test_multiple_emails_only_one_candidate()
}
class "TestRecruitmentSurvey" as odoo_src.odoo.addons.hr_recruitment_survey.tests.test_recruitment_survey.TestRecruitmentSurvey {
  setUpClass()
  test_print_survey()
  test_send_survey()
}
class "TestRecurrenceRule" as odoo_src.odoo.addons.calendar.tests.test_recurrence_rule.TestRecurrenceRule {
  test_daily_count()
  test_daily_none()
  test_daily_until()
  test_monthly_count_by_date()
  test_monthly_count_by_day()
  test_monthly_none_by_date()
  test_monthly_none_by_day()
  test_monthly_until_by_date()
  test_monthly_until_by_day()
  test_weekly_count()
  test_weekly_none()
  test_weekly_until()
  test_yearly_count()
  test_yearly_none()
  test_yearly_until()
}
class "TestRecurrentEvent" as odoo_src.odoo.addons.calendar.tests.test_calendar_recurrent_event_case2.TestRecurrentEvent {
  CalendarEvent
  setUp()
  test_recurrent_meeting1()
  test_recurrent_meeting2()
}
class "TestRecurrentEvents" as odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestRecurrentEvents {
  assertEventDates(events, dates)
  setUpClass()
}
class "TestRefundFlows" as odoo_src.odoo.addons.payment_authorize.tests.test_refund_flows.TestRefundFlows {
  test_refunding_authorized_tx_voids_it()
  test_refunding_captured_tx_refunds_it_and_creates_refund_tx()
  test_refunding_refunded_tx_creates_refund_tx()
  test_refunding_voided_tx_cancels_it()
}
class "TestRefundFlows" as odoo_src.odoo.addons.payment_stripe.tests.test_refund_flows.TestRefundFlows {
  test_canceled_refund_webhook_notification_triggers_processing()
  test_refund_id_is_set_as_provider_reference()
}
class "TestRegexRendering" as odoo_src.odoo.addons.mail.tests.test_mail_render.TestRegexRendering {
  test_inline_regex_rendering()
  test_qweb_regex_rendering()
}
class "TestRemoveAccents" as odoo_src.odoo.addons.base.tests.test_misc.TestRemoveAccents {
  test_empty_string()
  test_latin()
  test_non_latin()
}
class "TestRenderAllViews" as odoo_src.odoo.addons.base.tests.test_views.TestRenderAllViews {
  test_render_all_views()
}
class "TestRepairTraceability" as odoo_src.odoo.addons.mrp_repair.tests.test_tracability.TestRepairTraceability {
  setUpClass()
  test_mo_with_unscrapped_tracked_component()
  test_mo_with_used_sn_component()
  test_mo_with_used_sn_component_02()
  test_repair_with_consumable_kit()
  test_tracking_repair_production()
}
class "TestReports" as odoo_src.odoo.addons.base.tests.test_reports.TestReports {
  test_report_reload_from_attachment()
  test_reports()
}
class "TestReports" as odoo_src.odoo.addons.l10n_in.tests.test_partner_details_on_invoice.TestReports {
  setUpClass()
  test_foreign_customer_without_state()
  test_partner_change_with_invoice()
  test_partner_details_change_with_invoice()
  test_place_of_supply()
}
class "TestReportsRendering" as odoo_src.odoo.addons.base.tests.test_reports.TestReportsRendering {
  test_format_A4()
  test_format_landscape()
  test_format_letter()
  test_layout()
  test_pdf_render_page_overflow()
  test_report_pdf_page_break()
  test_thead_tbody_repeat()
}
class "TestReportsRenderingCommon" as odoo_src.odoo.addons.base.tests.test_reports.TestReportsRenderingCommon {
  last_pdf_content : NoneType
  last_pdf_content_saved : bool
  partners
  report
  report_view
  assertPageFormat(paper_format, orientation)
  create_pdf(partners, header_content, page_content, footer_content)
  get_paper_format(mediabox)
  save_pdf()
  setUp()
}
class "TestReportsRenderingLimitations" as odoo_src.odoo.addons.base.tests.test_reports.TestReportsRenderingLimitations {
  test_no_clip()
}
class "TestRequestRemaining" as odoo_src.odoo.addons.base.tests.test_http_case.TestRequestRemaining {
  setUpClass()
  test_requests_a()
  test_requests_b()
}
class "TestResCompany" as odoo_src.odoo.addons.partner_autocomplete.tests.test_res_company.TestResCompany {
  setUpClass()
  test_enrich()
  test_extract_company_domain()
}
class "TestResConfig" as odoo_src.odoo.addons.base.tests.test_res_config.TestResConfig {
  ResConfig
  error_msg : str
  error_msg_wo_menu : str
  expected_action_id
  expected_final_error_msg
  expected_final_error_msg_wo_menu
  expected_name
  expected_path
  full_field_name : str
  menu_xml_id : str
  setUp()
  test_00_get_option_path()
  test_10_get_option_name()
  test_20_get_config_warning()
  test_30_get_config_warning_wo_menu()
  test_40_view_expected_architecture()
  test_50_view_expected_architecture_t_node_groups()
}
class "TestResConfig" as odoo_src.odoo.addons.base_setup.tests.test_res_config.TestResConfig {
  company
  config
  user
  setUp()
  test_install()
  test_multi_company_res_config_group()
  test_no_install()
}
class "TestResConfig" as odoo_src.odoo.addons.base_setup.tests.test_default_group.TestResConfig {
  company
  config
  user
  setUp()
  test_multi_company_res_config_group()
}
class "TestResConfigDocLinks" as odoo_src.odoo.addons.base_setup.tests.test_res_config_doc_links.TestResConfigDocLinks {
  setUpClass()
  test_01_href_links()
  test_02_setting_nodes_documentation_links()
}
class "TestResConfigExecute" as odoo_src.odoo.addons.base.tests.test_res_config.TestResConfigExecute {
  settings_view
  test_01_execute_res_config()
  test_settings_access()
}
class "TestResCountryState" as odoo_src.odoo.addons.base.tests.test_res_country.TestResCountryState {
  test_find_by_name()
}
class "TestResCurrency" as odoo_src.odoo.addons.base.tests.test_res_currency.TestResCurrency {
  test_currency_cache()
  test_res_currency_name_search()
  test_view_company_rate_label()
}
class "TestResPartner" as odoo_src.odoo.addons.calendar.tests.test_res_partner.TestResPartner {
  test_meeting_count()
}
class "TestResPartner" as odoo_src.odoo.addons.l10n_it_edi.tests.test_res_partner.TestResPartner {
  setUpClass()
  test_normalized_country_and_vat()
  test_normalized_pa_index_and_zip()
  test_partner_l10n_it_codice_fiscale()
  test_validate_fiscal_code()
}
class "TestResPartnerBank" as odoo_src.odoo.addons.base.tests.test_res_partner_bank.TestResPartnerBank {
  test_sanitized_acc_number()
}
class "TestResPartnerIap" as odoo_src.odoo.addons.mail_plugin.tests.test_res_partner_iap.TestResPartnerIap {
  test_res_partner_iap_compute_iap_enrich_info()
  test_res_partner_iap_constraint()
  test_res_partner_iap_creation()
  test_res_partner_iap_writing()
}
class "TestResUsers" as odoo_src.odoo.addons.calendar.tests.test_res_users.TestResUsers {
  test_avoid_res_users_settings_creation_portal()
  test_same_calendar_default_privacy_as_user_template()
}
class "TestResUsersSettings" as odoo_src.odoo.addons.mail.tests.test_res_users_settings.TestResUsersSettings {
  test_find_or_create_for_user_should_create_record_if_not_existing()
  test_find_or_create_for_user_should_return_correct_res_users_settings()
  test_set_res_users_settings_should_send_notification_on_bus()
  test_set_res_users_settings_should_set_settings_properly()
}
class "TestResequenceSII" as odoo_src.odoo.addons.l10n_es_edi_sii.tests.test_resequence.TestResequenceSII {
  generated_files
  setUp()
  setUpClass()
  test_customer_fails()
  test_vendor_works()
}
class "TestResetPassword" as odoo_src.odoo.addons.auth_signup.tests.test_reset_password.TestResetPassword {
  setUpClass()
  test_reset_password()
  test_reset_password_mail_server_error(mock_send)
}
class "TestResource" as odoo_src.odoo.addons.hr.tests.test_resource.TestResource {
  setUpClass()
  test_availability_hr_infos_resource()
  test_calendars_validity_within_period_creation()
  test_calendars_validity_within_period_default()
}
class "TestResource" as odoo_src.odoo.addons.hr_contract.tests.test_resource.TestResource {
  setUpClass()
  test_calendars_validity_within_period()
  test_get_valid_work_intervals()
  test_multi_contract_attendance()
  test_queries()
}
class "TestResourceSkills" as odoo_src.odoo.addons.hr_skills.tests.test_resource.TestResourceSkills {
  test_availability_skills_infos_resource()
}
class "TestRetry" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetry {
  test_log_levels()
  test_retry_success()
}
class "TestRetry1Disable" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetry1Disable {
  test_retry_0_retry_success()
  test_retry_1_fails()
  test_retry_2_fails()
  test_retry_3_fails()
}
class "TestRetry2Disable" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetry2Disable {
  test_retry_second_class_fails()
}
class "TestRetryCommitedCursor" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommitedCursor {
  test_broken_cursor()
}
class "TestRetryCommitedCursorError" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommitedCursorError {
  test_broken_cursor()
}
class "TestRetryCommon" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon {
  count
  get_tests_run_count()
  setUpClass()
  update_count()
}
class "TestRetryFailures" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryFailures {
  test_retry_failure_assert()
  test_retry_failure_log()
}
class "TestRetryRollbackedCursor" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryRollbackedCursor {
  test_broken_cursor()
}
class "TestRetryRollbackedCursorError" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryRollbackedCursorError {
  test_broken_cursor()
}
class "TestRetrySubtest" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetrySubtest {
  test_retry_subtest_success_all()
  test_retry_subtest_success_one()
}
class "TestRetrySubtestFailures" as odoo_src.odoo.addons.base.tests.test_test_retry.TestRetrySubtestFailures {
  test_retry_subtest_failure_all()
  test_retry_subtest_failure_one()
}
class "TestRunbotLog" as odoo_src.odoo.addons.base.tests.test_http_case.TestRunbotLog {
  test_runbot_js_log()
}
class "TestRunnerLogging" as odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLogging {
  expected_logs : list
  setUp()
  test_assertQueryCount()
  test_assertQueryCount_with_decorators()
  test_call_stack()
  test_call_stack_context_manager()
  test_call_stack_subtest()
  test_handle_error()
  test_has_add_error()
  test_raise()
  test_raise_subtest()
  test_reraise()
  test_subtest_sub_call()
  test_traverse_contextmanager()
  test_with_decorators()
}
class "TestRunnerLoggingCommon" as odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingCommon {
  expected_first_frame_methods : NoneType
  expected_logs : NoneType
  test_result
  setUp()
}
class "TestRunnerLoggingSetup" as odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingSetup {
  expected_first_frame_methods : list
  setUp()
  tearDown()
  test_raises_setup()
}
class "TestRunnerLoggingTeardown" as odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingTeardown {
  expected_first_frame_methods : list
  setUp()
  tearDown()
  test_raises_teardown()
}
class "TestSAEdiAccountMove" as odoo_src.odoo.addons.l10n_sa_edi.tests.test_account_move.TestSAEdiAccountMove {
  setUpClass()
  test_invoice_with_mismatched_companies()
}
class "TestSEPAQRCode" as odoo_src.odoo.addons.account_qr_code_sepa.tests.test_sepa_qr.TestSEPAQRCode {
  setUpClass()
  test_get_qr_vals_communication()
  test_out_invoice_create_refund_qr_code()
  test_sepa_qr_code_detection()
  test_sepa_qr_code_generation()
}
class "TestSMSSchedule" as odoo_src.odoo.addons.event_sms.tests.test_sms_schedule.TestSMSSchedule {
  setUpClass()
  test_sms_schedule()
  test_sms_schedule_fail_registration_template_removed()
}
class "TestSQL" as odoo_src.odoo.addons.base.tests.test_sql.TestSQL {
  test_complex_sql()
  test_sql_bool()
  test_sql_empty()
  test_sql_equality()
  test_sql_idempotence()
  test_sql_identifier()
  test_sql_join()
  test_sql_unpacking()
  test_sql_with_literal_parameters()
  test_sql_with_named_parameters()
  test_sql_with_no_parameter()
  test_sql_with_sql_parameters()
  test_sql_with_wrong_pattern()
}
class "TestSaEdiCommon" as odoo_src.odoo.addons.l10n_sa_edi.tests.common.TestSaEdiCommon {
  setUpClass()
}
class "TestSafeEval" as odoo_src.odoo.addons.base.tests.test_base.TestSafeEval {
  test_01_safe_eval()
  test_02_literal_eval()
  test_03_literal_eval_arithmetic()
  test_04_literal_eval_forbidden()
  test_05_safe_eval_forbiddon()
  test_const()
  test_expr()
  test_expr_eval_opcodes()
  test_safe_eval_exec_opcodes()
  test_safe_eval_opcodes()
}
class "TestSaleDropshippingFlows" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.tests.test_sale_dropshipping.TestSaleDropshippingFlows {
  setUpClass()
  test_cancelled_picking_and_delivered_qty()
  test_dropship_standard_perpetual_anglosaxon_ordered_return_internal_aml()
  test_dropship_with_different_suppliers()
  test_kit_dropshipped_change_qty_SO()
  test_partial_return_kit_and_delivered_qty()
  test_return_kit_and_delivered_qty()
  test_sale_kit_with_dropshipped_component()
}
class "TestSaleFiscal" as odoo_src.odoo.addons.l10n_in_sale.tests.test_l10n_in_sale_fiscal_position.TestSaleFiscal {
  setUpClass()
  test_foreign_partner_without_state_fiscal_position()
  test_l10n_in_sale_fiscal_position()
  test_prepare_invoice_values_returns_reseller_id_as_int()
}
class "TestSandwichLeave" as odoo_src.odoo.addons.l10n_in_hr_holidays.tests.test_sandwich_leave.TestSandwichLeave {
  demo_employee
  demo_user
  indian_company
  leave_type
  setUp()
  test_approved_leave_does_not_raise_access_error()
  test_sandwich_leave()
}
class "TestSanitizer" as odoo_src.odoo.addons.base.tests.test_mail.TestSanitizer {
  test_abrupt_close()
  test_abrut_malformed()
  test_basic_sanitizer()
  test_cid_with_at()
  test_comment_malformed()
  test_comment_multiline()
  test_edi_source()
  test_evil_malicious_code()
  test_html()
  test_misc()
  test_outlook_mail_sanitize()
  test_quote_basic_text()
  test_quote_blockquote()
  test_quote_bugs()
  test_quote_gmail()
  test_quote_hotmail_html()
  test_quote_outlook_html()
  test_quote_signature()
  test_quote_signature_container_propagation()
  test_quote_text()
  test_quote_thunderbird()
  test_quote_thunderbird_html()
  test_quote_yahoo_html()
  test_sanitize_unescape_emails()
  test_style_class()
  test_style_class_only()
  test_style_parsing()
}
class "TestSearchTemplateCategory" as odoo_src.odoo.addons.mail.tests.test_mail_template.TestSearchTemplateCategory {
  setUpClass()
  test_search_template_category()
}
class "TestSelector" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelector {
  test_selector_parser()
}
class "TestSelectorSelection" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection {
  test_negative_parameters_translate()
  test_selector_parser_parameters()
  test_selector_selection()
}
class "TestSelfAccessProfile" as odoo_src.odoo.addons.hr.tests.test_self_user_access.TestSelfAccessProfile {
  test_access_my_profile()
  test_access_my_profile_toolbar()
  test_employee_fields_groups()
  test_profile_view_fields()
  test_readonly_fields()
}
class "TestSelfAccessRights" as odoo_src.odoo.addons.hr.tests.test_self_user_access.TestSelfAccessRights {
  setUpClass()
  testReadOtherEmployee()
  testReadOtherUserEmployee()
  testReadSelfEmployee()
  testReadSelfUserEmployee()
  testSearchUserEMployee()
  testWriteOtherEmployee()
  testWriteOtherUserEmployee()
  testWriteOtherUserPreferencesEmployee()
  testWriteSelfEmployee()
  testWriteSelfPhoneEmployee()
  testWriteSelfUserEmployee()
  testWriteSelfUserEmployeeSettingFalse()
  testWriteSelfUserPreferencesEmployee()
  test_access_employee_account()
  test_onchange_readable_fields_with_no_access()
}
class "TestSendAndPrintEdiBizkaia" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_send_invoice_bizkaia.TestSendAndPrintEdiBizkaia {
  test_cancel_invoice_request_error()
  test_cancel_invoice_tbai_failure()
  test_post_and_cancel_invoice_tbai_success()
  test_post_invoice_tbai_failure()
  test_post_invoice_tbai_request_error()
}
class "TestSendAndPrintEdiGipuzkoa" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_send_invoice.TestSendAndPrintEdiGipuzkoa {
  test_cancel_invoice_request_error()
  test_cancel_invoice_tbai_failure()
  test_post_and_cancel_invoice_tbai_success()
  test_post_invoice_tbai_failure()
  test_post_invoice_tbai_request_error()
  test_tbai_credit_note_importe_total()
}
class "TestSendAndPrintEdiGipuzkoa" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_move_reversal.TestSendAndPrintEdiGipuzkoa {
  test_post_and_cancel_tbai_credit_note()
}
class "TestSendBillEdiBizkaia" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_send_bill_bizkaia.TestSendBillEdiBizkaia {
  test_cancel_bill_tbai_failure()
  test_post_and_cancel_bill_tbai_success()
  test_post_bill_tbai_failure()
  test_post_bill_tbai_request_error()
}
class "TestSequenceGaps" as odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceGaps {
  setUpClass()
  test_basic()
  test_change_multi()
  test_change_multi_2()
  test_change_sequence()
  test_create_fill_gap()
  test_create_gap()
  test_first()
  test_null_change()
  test_unlink()
  test_unlink_2()
}
class "TestSequenceMixin" as odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixin {
  assertNameAtDate(date, name)
  set_sequence(date, name)
  test_change_journal_on_first_account_move()
  test_change_same_journal_not_change_sequence()
  test_fiscal_vs_monthly()
  test_journal_next_sequence()
  test_journal_override_sequence_regex()
  test_journal_override_sequence_regex_year()
  test_journal_resequence_in_between_2_years_pattern()
  test_journal_sequence()
  test_journal_sequence_format()
  test_journal_sequence_groupby_compute()
  test_journal_sequence_multiple_type()
  test_journal_sequence_ordering()
  test_limit_savepoint()
  test_resequence_clash()
  test_resequence_payment_and_non_payment_without_payment_sequence()
  test_sequence_change_date()
  test_sequence_change_date_with_quick_edit_mode()
  test_sequence_draft_change_date()
  test_sequence_draft_change_date_with_new_sequence()
  test_sequence_draft_first_of_period()
  test_sequence_empty_editable_with_quick_edit_mode()
  test_sequence_get_more_specific()
  test_sequence_move_name_related_field_well_computed()
  test_sequence_staggered_year()
}
class "TestSequenceMixinCommon" as odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinCommon {
  assertMoveName(move, expected_name)
  create_move(date, journal, name, post)
  setUpClass()
}
class "TestSequenceMixinConcurrency" as odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinConcurrency {
  data : dict
  cleanUp()
  setUp()
  test_sequence_concurency()
  test_sequence_concurency_no_useless_lock()
}
class "TestSequenceMixinDeletion" as odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinDeletion {
  setUpClass()
  test_sequence_deletion_1()
  test_sequence_deletion_2()
}
class "TestServerActions" as odoo_src.odoo.addons.base.tests.test_ir_actions.TestServerActions {
  action2
  context : dict
  test_00_action()
  test_00_server_action()
  test_10_code()
  test_20_crud_create()
  test_20_crud_create_link_many2many()
  test_20_crud_create_link_many2one()
  test_20_crud_create_link_one2many()
  test_30_crud_write()
  test_35_crud_write_selection()
  test_36_crud_write_m2m_ops()
  test_37_field_path_traversal()
  test_39_boolean_update()
  test_40_multi()
  test_50_groups()
  test_60_sort()
  test_70_copy_action()
  test_80_permission()
  test_90_convert_to_float()
  test_90_webhook()
  test_object_write_equation()
}
class "TestServerActionsBase" as odoo_src.odoo.addons.base.tests.test_ir_actions.TestServerActionsBase {
  action
  comment_html : str
  context : dict
  res_country_code_field
  res_country_model
  res_country_name_field
  res_country_name_position_field
  res_partner_category_field
  res_partner_category_model
  res_partner_category_name_field
  res_partner_children_field
  res_partner_city_field
  res_partner_country_field
  res_partner_model
  res_partner_name_field
  res_partner_parent_field
  test_country
  test_partner
  test_server_action
  setUp()
}
class "TestSetTags" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags {
  test_inheritance()
  test_parental_advisory()
  test_set_tags_empty()
  test_set_tags_multiple_tags()
  test_set_tags_not_decorated()
  test_set_tags_single_tag()
  test_untagging()
}
class "TestSetupWizard" as odoo_src.odoo.addons.account.tests.test_setup_wizard.TestSetupWizard {
  test_setup_bank_account()
}
class "TestSgUBLPint" as odoo_src.odoo.addons.l10n_sg_ubl_pint.tests.test_sg_ubl_pint.TestSgUBLPint {
  setUpClass()
  test_invoice()
}
class "TestSingleTransactionCase" as odoo_src.odoo.addons.base.tests.test_basecase.TestSingleTransactionCase {
  test_00()
  test_01()
  test_20a()
  test_20b()
}
class "TestSkipClass" as odoo_src.odoo.addons.base.tests.test_test_suite.TestSkipClass {
  test_classcleanups()
}
class "TestSkipMethof" as odoo_src.odoo.addons.base.tests.test_test_suite.TestSkipMethof {
  test_skip_method()
}
class "TestSparse" as odoo_src.odoo.addons.base_sparse_field.models.models.TestSparse {
  boolean
  char
  data
  float
  integer
  partner
  selection
}
class "TestSparseFields" as odoo_src.odoo.addons.base_sparse_field.tests.test_sparse_fields.TestSparseFields {
  test_sparse()
}
class "TestSpeedscope" as odoo_src.odoo.addons.base.tests.test_profiler.TestSpeedscope {
  example_profile()
  test_convert_empty()
  test_converts_context()
  test_converts_context_lower()
  test_converts_context_nested()
  test_converts_init_stack_trace()
  test_converts_no_context()
  test_converts_profile_no_end()
  test_converts_profile_simple()
  test_end_priority()
}
class "TestSplitTable" as odoo_src.odoo.addons.base.tests.test_split_table.TestSplitTable {
  test_split_table()
}
class "TestSqlTools" as odoo_src.odoo.addons.base.tests.test_sql.TestSqlTools {
  test_add_constraint()
}
class "TestStockEwaybill" as odoo_src.odoo.addons.l10n_in_ewaybill_stock.tests.test_ewaybill_stock.TestStockEwaybill {
  setUpClass()
  test_ewaybill_stock()
  test_ewaybill_stock_test_2()
  test_ewaybill_stock_test_3()
  test_ewaybill_stock_transporter_with_vehicle_no()
  test_ewaybill_stock_transporter_without_vehicle_no()
}
class "TestStockLandedCostsMrp" as odoo_src.odoo.addons.mrp_landed_costs.tests.test_stock_landed_costs_mrp.TestStockLandedCostsMrp {
  setUpClass()
  test_landed_cost_on_mrp()
  test_landed_cost_on_mrp_02()
}
class "TestStockLot" as odoo_src.odoo.addons.mrp_product_expiry.tests.test_mrp_product_expiry.TestStockLot {
  setUpClass()
  test_01_product_produce()
  test_02_product_produce_using_expired()
}
class "TestStreetFields" as odoo_src.odoo.addons.base_address_extended.tests.test_street_fields.TestStreetFields {
  test_child_sync()
  test_partner_create()
}
class "TestStringToHash" as odoo_src.odoo.addons.l10n_fr_pos_cert.tests.test_string_to_hash.TestStringToHash {
  setUpClass()
  test_string_to_hash()
}
class "TestStructure" as odoo_src.odoo.addons.base_vat.tests.test_validate_ruc.TestStructure {
  setUpClass()
  test_nif_de()
  test_parent_validation()
  test_peru_ruc_format()
  test_rut_uy()
  test_soap_client_for_vies_loads()
  test_vat_country_difference()
  test_vat_eu()
  test_vat_syntactic_validation()
  test_vat_vn()
}
class "TestStructureVIES" as odoo_src.odoo.addons.base_vat.tests.test_validate_ruc.TestStructureVIES {
  allow_inherited_tests_method : bool
  setUpClass()
}
class "TestSubcontractingBasic" as odoo_src.odoo.addons.mrp_subcontracting.tests.test_subcontracting.TestSubcontractingBasic {
  test_duplicating_warehouses_recreates_their_routes_and_operation_types()
  test_subcontracting_location_1()
  test_warehouse_subcontracting_resupply_type_code()
}
class "TestSubcontractingDropshippingFlows" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.tests.test_purchase_subcontracting.TestSubcontractingDropshippingFlows {
  test_dropshipped_component_and_sub_location()
  test_mrp_subcontracting_dropshipping_1()
  test_mrp_subcontracting_purchase_2()
  test_partner_id_no_overwrite()
  test_po_to_customer()
  test_po_to_subcontractor()
  test_subcontracted_bom_routes()
  test_two_boms_same_component_supplier()
}
class "TestSubcontractingDropshippingPortal" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.tests.test_purchase_subcontracting.TestSubcontractingDropshippingPortal {
  test_portal_subcontractor_record_production_with_dropship()
}
class "TestSubcontractingDropshippingValuation" as odoo_src.odoo.addons.mrp_subcontracting_dropshipping.tests.test_anglo_saxon_valuation.TestSubcontractingDropshippingValuation {
  setUpClass()
  test_account_line_entry_kit_bom_dropship()
  test_avco_valuation_subcontract_and_dropshipped_and_backorder()
  test_valuation_subcontracted_and_dropshipped()
}
class "TestSubcontractingFlows" as odoo_src.odoo.addons.mrp_subcontracting.tests.test_subcontracting.TestSubcontractingFlows {
  test_change_partner_subcontracting_location()
  test_change_reception_serial()
  test_decrease_quantity_done()
  test_flow_1()
  test_flow_10()
  test_flow_2()
  test_flow_3()
  test_flow_4()
  test_flow_5()
  test_flow_6()
  test_flow_8()
  test_flow_9()
  test_flow_flexible_bom_1()
  test_flow_warning_bom_1()
  test_flow_warning_bom_2()
  test_mrp_report_bom_structure_subcontracting()
  test_multiple_component_records_for_incomplete_move()
  test_several_backorders()
  test_several_backorders_2()
  test_subcontracting_date_warning()
  test_subcontracting_rules_replication()
  test_subcontracting_set_quantity_done()
  test_validate_partial_subcontracting_without_backorder()
}
class "TestSubcontractingLandedCosts" as odoo_src.odoo.addons.mrp_subcontracting_landed_costs.tests.test_subcontracting_landed_costs.TestSubcontractingLandedCosts {
  test_subcontracting_landed_cost_receipts_flow()
}
class "TestSubcontractingPortal" as odoo_src.odoo.addons.mrp_subcontracting.tests.test_subcontracting.TestSubcontractingPortal {
  setUpClass()
  test_flow_subcontracting_portal()
}
class "TestSubcontractingPortalUi" as odoo_src.odoo.addons.mrp_subcontracting.tests.test_subcontracting_portal_ui.TestSubcontractingPortalUi {
  setUpClass()
  test_subcontrating_portal()
}
class "TestSubcontractingSerialMassReceipt" as odoo_src.odoo.addons.mrp_subcontracting.tests.test_subcontracting.TestSubcontractingSerialMassReceipt {
  bom
  finished
  raw_material
  resupply_route
  subcontractor
  setUp()
  test_bom_subcontracting_product_dynamic_attribute()
  test_receive_after_resupply()
  test_receive_no_resupply()
  test_subcontracting_multiple_backorders()
}
class "TestSubcontractingTracking" as odoo_src.odoo.addons.mrp_subcontracting.tests.test_subcontracting.TestSubcontractingTracking {
  setUpClass()
  test_flow_backorder_production()
  test_flow_mass_produce_tracked_product()
  test_flow_tracked_1()
  test_flow_tracked_backorder()
  test_flow_tracked_backorder02()
  test_flow_tracked_only_finished()
}
class "TestSubscriptionManagement" as odoo_src.odoo.addons.mass_mailing.tests.test_mailing_list.TestSubscriptionManagement {
  test_mailing_update_optout()
}
class "TestSubtests" as odoo_src.odoo.addons.base.tests.test_test_suite.TestSubtests {
  test_nested_subtests()
}
class "TestSupplier" as odoo_src.odoo.addons.lunch.tests.test_supplier.TestSupplier {
  monday_10am : datetime
  monday_1am : datetime
  monday_1pm : datetime
  monday_8pm : datetime
  saturday_10am : datetime
  saturday_1pm : datetime
  saturday_3am : datetime
  saturday_8pm : datetime
  setUp()
  test_auto_email_send()
  test_compute_available_today()
  test_cron_sync_active()
  test_cron_sync_create()
  test_cron_sync_nextcall()
  test_lunch_order_with_minimum_threshold()
  test_remove_toppings()
  test_search_available_today()
  test_send_email_cron()
}
class "TestSwissQR" as odoo_src.odoo.addons.l10n_ch.tests.test_swissqr.TestSwissQR {
  customer
  invoice1
  product
  create_account(number)
  create_invoice(currency_to_use)
  setUp()
  setUpClass()
  swissqr_generated(invoice, ref_type)
  swissqr_not_generated(invoice)
  test_swissQR_iban()
  test_swissQR_missing_bank()
  test_swissQR_qriban()
  test_swiss_order_reference_qrr_for_qr_code()
}
class "TestSwissQRCode" as odoo_src.odoo.addons.l10n_ch.tests.test_ch_qr_code.TestSwissQRCode {
  setUpClass()
  test_ch_qr_code_cross_mask()
  test_ch_qr_code_detection()
  test_swiss_qr_code_generation()
}
class "TestSyncGoogle" as odoo_src.odoo.addons.google_calendar.tests.test_sync_common.TestSyncGoogle {
  attendee_user
  google_service
  organizer_user
  assertGoogleAPINotCalled()
  assertGoogleEventDeleted(google_id)
  assertGoogleEventInserted(values, timeout)
  assertGoogleEventInsertedMultiTime(values, timeout)
  assertGoogleEventNotDeleted()
  assertGoogleEventNotInserted()
  assertGoogleEventNotPatched()
  assertGoogleEventPatched(google_id, values, timeout)
  assertGoogleEventSendUpdates(expected_value)
  call_post_commit_hooks()
  mock_datetime_and_now(mock_dt)
  mock_google_service()
  mock_google_sync(user_id)
  setUp()
}
class "TestSyncGoogle2Odoo" as odoo_src.odoo.addons.google_calendar.tests.test_sync_google2odoo.TestSyncGoogle2Odoo {
  now
  other_company
  private_partner
  public_partner
  generate_recurring_event(mock_dt)
  google_respond_to_recurrent_event_with_option_all_events(recurrence, response_status)
  google_respond_to_recurrent_event_with_option_following_events(recurrence, event_index, response_status, rrule1, rrule2)
  google_respond_to_recurrent_event_with_option_this_event(recurrence, event_index, response_status)
  setUp()
  sync(events)
  test_accepting_recurrent_event_with_all_events_option_synced_by_attendee(mock_get_events)
  test_accepting_recurrent_event_with_all_events_option_synced_by_organizer(mock_get_events)
  test_accepting_recurrent_event_with_all_following_option_synced_by_organizer(mock_get_events)
  test_accepting_recurrent_event_with_following_events_option_synced_by_attendee(mock_get_events)
  test_accepting_recurrent_event_with_this_event_option_synced_by_attendee(mock_get_events)
  test_accepting_recurrent_event_with_this_event_option_synced_by_organizer(mock_get_events)
  test_alias_email_sync_recurrence()
  test_attendee_cancelled()
  test_attendee_recurrence_answer()
  test_attendee_removed()
  test_attendee_removed_multiple()
  test_attendee_state()
  test_attendee_status_is_not_updated_when_syncing_and_time_data_is_not_changed()
  test_attendees_same_event_both_share()
  test_cancelled()
  test_cancelled_with_portal_attendee()
  test_create_event_with_default_and_undefined_privacy()
  test_event_guest_modify_permission()
  test_event_reminder_emails_with_google_id()
  test_event_with_availability()
  test_event_with_local_videocall()
  test_event_with_meeting_url()
  test_existing_recurrence_first_updated()
  test_invalid_owner_property()
  test_keep_organizer_attendee_writing_recurrence_from_google()
  test_new_google_event()
  test_new_google_notifications()
  test_owner_only_new_google_event()
  test_partner_order()
  test_private_extended_properties()
  test_private_partner_single_event()
  test_recurrencde_first_updated()
  test_recurrence()
  test_recurrence_creation_with_attendee_answer()
  test_recurrence_datetime()
  test_recurrence_deleted()
  test_recurrence_edit_specific_event()
  test_recurrence_edit_specific_event_backward_compatibility()
  test_recurrence_exdate()
  test_recurrence_first_exdate()
  test_recurrence_list_contains_more_items()
  test_recurrence_moved()
  test_recurrence_name_updated()
  test_recurrence_no_duplicate()
  test_recurrence_outlier()
  test_recurrence_private_contact()
  test_recurrence_range_start_date_in_other_dst_period()
  test_recurrence_reduced()
  test_recurrence_timezone()
  test_recurrence_write_time_fields()
  test_recurrence_write_with_outliers()
  test_several_attendee_have_the_same_mail()
  test_several_users_have_the_same_mail()
  test_simple_event_into_recurrency()
  test_valid_owner_property()
}
class "TestSyncOdoo2Google" as odoo_src.odoo.addons.google_calendar.tests.test_sync_odoo2google.TestSyncOdoo2Google {
  google_service
  setUp()
  test_all_event_updated()
  test_all_event_with_tz_updated()
  test_allday_duplicated_first_event_in_recurrence()
  test_attendee_state()
  test_create_event_with_sync_config_paused()
  test_delete_synced_event_with_sync_config_paused()
  test_event_added_to_recurrence()
  test_event_allday_creation()
  test_event_available_privacy()
  test_event_busy_privacy()
  test_event_creation()
  test_event_creation_perf()
  test_event_duplication_allday_google_calendar()
  test_event_need_sync()
  test_event_not_over_send_updates()
  test_event_over_send_updates()
  test_event_sync_after_pause_period(mock_sync_request)
  test_event_until_utc()
  test_event_without_attendee_state()
  test_event_without_user()
  test_following_event_updated()
  test_inactive_event()
  test_recurrence()
  test_recurrence_delete_single_events()
  test_recurrence_not_over_send_updates()
  test_recurrence_over_send_updates()
  test_recurring_event_creation_perf()
  test_restart_synchronization()
  test_skip_google_sync_for_non_synchronized_users_new_events(mock_sync_request)
  test_stop_synchronization()
  test_synced_inactive_event()
  test_update_synced_event_with_sync_config_paused()
  test_videocall_location_on_location_set()
  test_write_unsynced_field()
}
class "TestSyncOdoo2GoogleMail" as odoo_src.odoo.addons.google_calendar.tests.test_sync_odoo2google.TestSyncOdoo2GoogleMail {
  test_event_creation_for_user()
}
class "TestSyncOdoo2MicrosoftMail" as odoo_src.odoo.addons.microsoft_calendar.tests.test_create_events.TestSyncOdoo2MicrosoftMail {
  setUpClass()
  test_change_organizer_pure_odoo_event()
  test_event_creation_for_user()
}
class "TestSyncRecorder" as odoo_src.odoo.addons.base.tests.test_profiler.TestSyncRecorder {
  test_sync_recorder()
}
class "TestTOTP" as odoo_src.odoo.addons.auth_totp.tests.test_totp.TestTOTP {
  setUp()
  test_totp()
  test_totp_administration()
  test_totp_authenticate()
}
class "TestTOTPInvite" as odoo_src.odoo.addons.auth_totp_mail.tests.test_totp.TestTOTPInvite {
  test_totp_administration()
}
class "TestTOTPMailEnforce" as odoo_src.odoo.addons.auth_totp_mail_enforce.tests.test_totp_mail_enforce.TestTOTPMailEnforce {
  test_totp_rpc_api_keys_only()
}
class "TestTOTPMixin" as odoo_src.odoo.addons.auth_totp.tests.test_totp.TestTOTPMixin {
  install_totphook()
  setUpClass()
}
class "TestTOTPortal" as odoo_src.odoo.addons.auth_totp_portal.tests.test_tour.TestTOTPortal {
  test_totp()
}
class "TestTZ" as odoo_src.odoo.addons.base.tests.test_tz.TestTZ {
  test_cannot_set_deprecated_timezone()
  test_dont_adapt_available_tz()
  test_partner_with_old_tz()
  test_tz_legacy()
}
class "TestTax" as odoo_src.odoo.addons.account.tests.test_tax.TestTax {
  test_forced_price_exclude_context_key()
  test_forced_price_include_context_key()
  test_parse_name_search()
  test_repartition_line_in()
}
class "TestTaxCommon" as odoo_src.odoo.addons.account.tests.common.TestTaxCommon {
  js_tests : list
  number
  assert_adapt_price_unit_to_another_taxes(price_unit, original_taxes, new_taxes, expected_price_unit, product)
  assert_base_lines_tax_details(document, expected_values)
  assert_invoice_tax_totals_summary(invoice, expected_values, soft_checking)
  assert_tax_totals_summary(document, expected_values, excluded_tax_group_ids, soft_checking)
  assert_taxes_computation(taxes, price_unit, expected_values, quantity, product, precision_rounding, rounding_method, excluded_special_modes, excluded_tax_ids)
  convert_base_line_to_invoice_line(document, base_line)
  convert_document_to_invoice(document)
  init_document(lines, currency, rate, cash_rounding)
  new_currency(rounding)
  populate_document(document)
  setUp()
  setUpClass()
  with_tax_calculation_rounding_method(rounding_method)
}
class "TestTaxesBaseLinesTaxDetails" as odoo_src.odoo.addons.account.tests.test_taxes_base_lines_tax_details.TestTaxesBaseLinesTaxDetails {
  test_dispatch_delta_on_base_lines()
}
class "TestTaxesComputation" as odoo_src.odoo.addons.account_tax_python.tests.test_taxes_computation.TestTaxesComputation {
  assert_python_taxes_computation(formula, price_unit, expected_values, product_values, price_include_override)
  test_formula()
  test_invalid_formula()
}
class "TestTaxesComputation" as odoo_src.odoo.addons.account.tests.test_taxes_computation.TestTaxesComputation {
  test_adapt_price_unit_to_another_taxes()
  test_division_taxes_for_l10n_br()
  test_fixed_tax_price_included_affect_base_on_0()
  test_fixed_taxes_for_l10n_be()
  test_percent_taxes_for_l10n_in()
  test_random_case_1()
  test_random_case_2()
  test_random_case_3()
  test_random_case_4()
  test_random_case_5()
  test_random_case_6()
  test_random_case_7()
  test_random_case_8()
  test_random_case_9()
  test_taxes_filtering()
  test_taxes_ordering()
}
class "TestTaxesTaxTotalsSummary" as odoo_src.odoo.addons.account.tests.test_taxes_tax_totals_summary.TestTaxesTaxTotalsSummary {
  different_tax_group(taxes)
  same_tax_group(taxes)
  setUpClass()
  test_archived_tax_in_tax_totals()
  test_cash_rounding_generic_helpers()
  test_cash_rounding_invoices()
  test_cash_rounding_with_excluded_tax_groups()
  test_discount_with_round_globally_generic_helpers()
  test_discount_with_round_globally_invoices()
  test_mixed_combined_standalone_taxes_generic_helpers()
  test_mixed_combined_standalone_taxes_invoices()
  test_preceding_subtotal_generic_helpers()
  test_preceding_subtotal_invoices()
  test_preceding_subtotal_with_include_base_amount_generic_helpers()
  test_preceding_subtotal_with_include_base_amount_invoices()
  test_preceding_subtotal_with_tax_group_generic_helpers()
  test_preceding_subtotal_with_tax_group_invoices()
  test_reverse_charge_division_tax_generic_helpers()
  test_reverse_charge_division_tax_invoices()
  test_reverse_charge_percent_tax_generic_helpers()
  test_reverse_charge_percent_tax_invoices()
  test_reverse_charge_taxes_1_generic_helpers()
  test_reverse_charge_taxes_1_invoices()
  test_reverse_charge_taxes_2_generic_helpers()
  test_reverse_charge_taxes_2_invoices()
  test_taxes_l10n_be_generic_helpers()
  test_taxes_l10n_be_invoices()
  test_taxes_l10n_br_generic_helpers()
  test_taxes_l10n_br_invoices()
  test_taxes_l10n_in_generic_helpers()
  test_taxes_l10n_in_invoices()
  test_taxes_l10n_mx_generic_helpers()
  test_taxes_l10n_mx_invoices()
  test_taxes_l10n_pt_generic_helpers()
  test_taxes_l10n_pt_invoices()
  test_taxes_l10n_pt_vendor_bill_manual_tax_amount()
}
class "TestTbaiUserErrors" as odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_user_errors.TestTbaiUserErrors {
  setUpClass()
  test_no_certificate()
  test_no_company_vat()
  test_no_tax_agency()
  test_no_tax_on_line()
  test_pending_invoice()
  test_post_tbai_credit_note_before_reversed_invoice()
}
class "TestTdsTcsAlert" as odoo_src.odoo.addons.l10n_in_withholding.tests.test_tds_tcs_alert.TestTdsTcsAlert {
  create_invoice(move_type, partner, invoice_date, amounts, taxes, company, accounts, quantities)
  reverse_move(move, date)
  setUpClass()
  tds_wizard_entry(move, lines)
  test_tcs_tds_warning()
  test_tcs_tds_warning_cleared_on_available_tax()
  test_tcs_tds_warning_for_all_lines_do_not_have_taxes()
  test_tcs_tds_warning_for_company_branches()
  test_tcs_tds_warning_for_if_line_has_price_zero()
  test_tcs_tds_warning_for_multiple_accounts_in_lines()
  test_tcs_tds_warning_for_multiple_accounts_same_section_in_lines()
  test_tcs_tds_warning_for_not_consider_draft_cancel_invoices_for_aggregate()
  test_tcs_tds_warning_if_some_lines_has_tax()
  test_tcs_tds_warning_on_case_of_credit_note()
  test_tcs_tds_warning_on_exceeded_aggregate_limit()
  test_tcs_tds_warning_on_exceeded_per_transaction_limit()
  test_tcs_tds_warning_on_monthly_aggregate_limit()
  test_tcs_tds_warning_partner_wiht_pan()
  test_tcs_tds_warning_tcs_use_in_bill()
  test_tcs_tds_warning_tds_use_in_invoice()
}
class "TestTemplateConfigRestrictEditor" as odoo_src.odoo.addons.mail.tests.test_mail_template.TestTemplateConfigRestrictEditor {
  test_switch_icp_value()
}
class "TestTemplating" as odoo_src.odoo.addons.base.tests.test_views.TestTemplating {
  setUp()
  test_branding_attribute_groups()
  test_branding_distribute_inner()
  test_branding_inherit()
  test_branding_inherit_multi_replace_node()
  test_branding_inherit_multi_replace_node2()
  test_branding_inherit_remove_added_from_inheritance()
  test_branding_inherit_remove_node()
  test_branding_inherit_remove_node2()
  test_branding_inherit_remove_node_processing_instruction()
  test_branding_inherit_replace_node()
  test_branding_inherit_replace_node2()
  test_branding_inherit_top_t_field()
  test_branding_primary_inherit()
  test_branding_t0()
  test_call_no_branding()
  test_esc_no_branding()
  test_ignore_unbrand()
}
class "TestTestClass" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestTestClass {
  get_log_metadata()
  test_canonical_tag()
}
class "TestTestCursor" as odoo_src.odoo.addons.base.tests.test_db_cursor.TestTestCursor {
  cr
  env
  record
  check(record, value)
  flush(record)
  setUp()
  test_borrow_connection()
  test_interleaving()
  test_single_cursor()
  test_sub_commit()
  test_sub_rollback()
  write(record, value)
}
class "TestTestSuite" as odoo_src.odoo.addons.base.tests.test_test_suite.TestTestSuite {
  test_test_suite()
}
class "TestThirdChecks" as odoo_src.odoo.addons.l10n_latam_check.tests.test_third_party_checks.TestThirdChecks {
  create_third_party_check(journal, check_numbers)
  test_01_get_paid_with_multiple_checks()
  test_02_third_party_check_delivery()
  test_03_deposit()
  test_04_check_transfer()
}
class "TestThreadController" as odoo_src.odoo.addons.mail.tests.test_thread_controller.TestThreadController {
  test_partner_message_post_access()
  test_partner_message_post_partner_ids()
}
class "TestThreadControllerCommon" as odoo_src.odoo.addons.mail.tests.test_thread_controller.TestThreadControllerCommon {
}
class "TestTimeoffEvent" as odoo_src.odoo.addons.hr_holidays.tests.test_timeoff_event.TestTimeoffEvent {
  holiday
  hr_leave_type
  test_no_videocall_url_in_timeoff_event()
}
class "TestTimesheet" as odoo_src.odoo.addons.hr_timesheet.tests.test_timesheet.TestTimesheet {
  project_customer2
  setUp()
  test_analytic_plan_timesheet_change_project()
  test_analytic_plan_timesheet_creation()
  test_cannot_convert_task_with_timesheets_in_private_task()
  test_compute_display_name()
  test_create_timesheet_employee_not_in_company()
  test_create_timesheet_with_archived_employee()
  test_create_timesheet_with_companyless_analytic_account()
  test_create_timesheet_with_default_employee_in_context()
  test_create_timesheet_with_multi_company()
  test_create_unlink_project()
  test_ensure_product_uom_set_in_timesheet()
  test_keep_create_account_values_at_timesheet_creation()
  test_keep_write_account_values_at_timesheet_update()
  test_log_access_rights()
  test_log_timesheet()
  test_mandatory_plan_timesheet_applicability()
  test_percentage_of_allocated_hours()
  test_recompute_amount_for_multiple_timesheets()
  test_recompute_partner_from_task_customer_change()
  test_split_analytic_dynamic_update()
  test_subtask_log_timesheet()
  test_task_with_timesheet_project_change()
  test_timesheet_unactive_analytic_account()
  test_timesheet_update_user_on_employee()
  test_transfert_project()
  test_unlink_task_with_timesheet()
  test_uom_change_timesheet()
}
class "TestTimesheetAttendance" as odoo_src.odoo.addons.hr_timesheet_attendance.tests.test_timesheet_attendance.TestTimesheetAttendance {
  setUpClass()
  test_timesheet_attendance_report()
}
class "TestToggleUpload" as odoo_src.odoo.addons.mail.tests.discuss.test_toggle_upload.TestToggleUpload {
  test_upload_allowed()
  test_upload_denied()
}
class "TestTokenAccess" as odoo_src.odoo.addons.google_calendar.tests.test_token_access.TestTokenAccess {
  setUpClass()
  test_normal_user_should_be_able_to_reset_his_own_token()
  test_normal_user_should_not_be_able_to_reset_other_user_tokens()
  test_system_user_should_be_able_to_reset_any_tokens()
}
class "TestTourBoM" as odoo_src.odoo.addons.mrp.tests.test_bom.TestTourBoM {
  setUpClass()
  test_bom_kit_rounding()
  test_manufacture_from_bom()
  test_mrp_bom_product_catalog()
}
class "TestTourManualConsumption" as odoo_src.odoo.addons.mrp.tests.test_manual_consumption.TestTourManualConsumption {
  test_mrp_manual_consumption_02()
}
class "TestTourMrpOrder" as odoo_src.odoo.addons.mrp.tests.test_order.TestTourMrpOrder {
  test_manufacturing_and_byproduct_sm_to_sml_synchronization()
  test_mrp_order_product_catalog()
}
class "TestTraceability" as odoo_src.odoo.addons.mrp.tests.test_traceability.TestTraceability {
  TRACKING_TYPES : list
  setUpClass()
  test_assign_stock_move_date_on_mark_done()
  test_generate_serial_button()
  test_generate_serial_button_sequence()
  test_last_delivery_traceability()
  test_produce_consume_unbuild_all_and_consume()
  test_produce_consume_unbuild_and_consume()
  test_reuse_unbuilt_usn()
  test_tracked_and_manufactured_component()
  test_tracking_on_byproducts()
  test_tracking_types_on_mo()
  test_unbuild_scrap_and_unscrap_tracked_component()
  test_use_lot_already_consumed()
}
class "TestTrackerHttpRequests" as odoo_src.odoo.addons.link_tracker.tests.test_tracker_http_requests.TestTrackerHttpRequests {
  test_no_preview_tracking()
}
class "TestTracking" as odoo_src.odoo.addons.account.tests.test_mail_tracking_value.TestTracking {
  default_env_context()
  test_aml_change_tracking()
}
class "TestTransactionCase" as odoo_src.odoo.addons.base.tests.test_basecase.TestTransactionCase {
  test_00()
  test_01()
  test_20a()
}
class "TestTransactionEnvs" as odoo_src.odoo.addons.base.tests.test_transactions.TestTransactionEnvs {
  do_stuff_with_env()
  test_transation_envs_ordered()
  test_transation_envs_weakrefs()
  test_transation_envs_weakrefs_call()
  test_transation_envs_weakrefs_return()
}
class "TestTransferWizard" as odoo_src.odoo.addons.account.tests.test_transfer_wizard.TestTransferWizard {
  setUpClass()
  test_period_change_lock_date()
  test_period_change_tax_lock_date()
  test_transfer_default_tax()
  test_transfer_wizard_amount_currency_is_zero()
  test_transfer_wizard_analytic()
  test_transfer_wizard_currency_conversion()
  test_transfer_wizard_grouping()
  test_transfer_wizard_no_currency_conversion()
  test_transfer_wizard_reconcile()
}
class "TestTranslation" as odoo_src.odoo.addons.base.tests.test_translate.TestTranslation {
  setUpClass()
  test_101_create_translated_record()
  test_101_translation_read()
  test_102_duplicate_record()
  test_103_duplicate_record_fr()
  test_104_orderby_translated_field()
  test_105_duplicate_record_multi_no_en()
  test_107_duplicate_record_en()
  test_108_search_en()
  test_109_search_fr()
  test_110_search_es()
  test_111_prefetch_langs()
}
class "TestTranslationController" as odoo_src.odoo.addons.mail.tests.test_mail_message_translate.TestTranslationController {
  request_count
  setUpClass()
  test_access_right()
  test_html_sanitization()
  test_invalid_api_key()
  test_translation_multi_users()
  test_unknown_language()
  test_update_message()
}
class "TestTranslationExport" as odoo_src.odoo.addons.base.tests.test_translate.TestTranslationExport {
  test_export_translatable_resources()
}
class "TestTranslationTrigramIndexPatterns" as odoo_src.odoo.addons.base.tests.test_translate.TestTranslationTrigramIndexPatterns {
  test_pattern_conversion()
  test_value_conversion()
}
class "TestTranslationWrite" as odoo_src.odoo.addons.base.tests.test_translate.TestTranslationWrite {
  setUpClass()
  test_00()
  test_01_invalid_lang()
  test_03_fr_single()
  test_04_fr_multi()
  test_04_fr_multi_no_en()
  test_05_remove_multi_false()
  test_create_empty_false()
  test_field_selection()
  test_load_views()
  test_update_field_translations()
  test_update_field_translations_for_empty()
  test_write_empty_and_value()
}
class "TestUBLAU" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_ubl_au.TestUBLAU {
  setUpClass()
  test_export_import_invoice()
  test_export_import_refund()
  test_import_invoice_xml()
}
class "TestUBLAttachedDocument" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_ubl_attacheddocument.TestUBLAttachedDocument {
  setUpClass()
  test_import_attached_document_invoice_xml()
}
class "TestUBLBE" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_ubl_be.TestUBLBE {
  maxDiff : NoneType
  setUpClass()
  test_encoding_in_attachment_ubl()
  test_export_import_cash_rounding()
  test_export_import_cash_rounding_new()
  test_export_import_invoice()
  test_export_import_invoice_new()
  test_export_import_refund()
  test_export_import_refund_new()
  test_export_payment_terms()
  test_export_payment_terms_fixed_tax()
  test_export_payment_terms_with_discount()
  test_export_rounding_price_amount()
  test_export_rounding_price_amount_new()
  test_export_tax_exempt()
  test_export_tax_exempt_new()
  test_export_with_changed_taxes()
  test_export_with_changed_taxes_new()
  test_export_with_fixed_taxes_case1()
  test_export_with_fixed_taxes_case1_new()
  test_export_with_fixed_taxes_case2()
  test_export_with_fixed_taxes_case2_new()
  test_export_with_fixed_taxes_case3()
  test_export_with_fixed_taxes_case3_new()
  test_export_with_fixed_taxes_case4()
  test_export_with_fixed_taxes_case4_new()
  test_import_and_create_partner_ubl()
  test_import_existing_invoice_flip_move_type()
  test_import_export_invoice_xml()
  test_import_fixed_taxes()
  test_import_in_journal_ubl()
  test_import_invoice_xml()
  test_import_invoice_xml_open_peppol_examples()
  test_import_partner_ubl()
  test_import_payment_terms()
  test_import_quantity_and_or_unit_price_zero()
  test_inverting_negative_price_unit()
  test_inverting_negative_price_unit_new()
  test_rounding_price_unit()
  test_rounding_price_unit_new()
  test_send_and_print()
  test_sending_to_public_admin()
  test_sending_to_public_admin_new()
}
class "TestUBLCommon" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.common.TestUBLCommon {
  assert_same_invoice(invoice1, invoice2)
  setUpClass()
}
class "TestUBLDE" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_ubl_de.TestUBLDE {
  setUpClass()
  setup_independent_company()
  test_export_import_invoice()
  test_export_import_invoice_new()
  test_export_import_invoice_without_vat_and_peppol_endpoint()
  test_export_import_invoice_without_vat_and_peppol_endpoint_new()
  test_export_import_refund()
  test_export_import_refund_new()
  test_import_export_invoice_xml()
  test_import_invoice_xml()
}
class "TestUBLDK" as odoo_src.odoo.addons.l10n_dk_oioubl.tests.test_xml_oioubl_dk.TestUBLDK {
  create_post_and_send_invoice(partner, move_type)
  import_bill_xml_file_in_purchase_journal(file_path)
  setUpClass()
  test_export_credit_note_two_line_partner_dk()
  test_export_credit_note_two_line_partner_fr()
  test_export_invoice_company_and_partner_without_country_code_prefix_in_vat()
  test_export_invoice_two_line_foreign_partner_be()
  test_export_invoice_two_line_foreign_partner_fr()
  test_export_invoice_two_line_partner_dk()
  test_export_partner_fr_without_siret_should_raise_an_error()
  test_oioubl_export_partner_without_vat_number()
  test_oioubl_export_should_raise_an_error_when_company_building_number_is_missing()
  test_oioubl_export_should_raise_an_error_when_partner_building_number_is_missing()
  test_oioubl_export_should_still_be_valid_when_currency_has_more_precision_digit()
  test_oioubl_import_exemple_file_1()
  test_oioubl_import_exemple_file_2()
  test_oioubl_import_exemple_file_3()
  test_oioubl_import_exemple_file_4()
}
class "TestUBLNL" as odoo_src.odoo.addons.l10n_account_edi_ubl_cii_tests.tests.test_xml_ubl_nl.TestUBLNL {
  setUpClass()
  test_export_fixed_tax()
  test_export_import_invoice()
  test_export_import_invoice_new()
  test_export_import_refund()
  test_export_import_refund_new()
  test_import_invoice_xml()
}
class "TestUBLRO" as odoo_src.odoo.addons.l10n_ro_edi.tests.test_xml_ubl_ro.TestUBLRO {
  create_move(move_type, send)
  get_attachment(move)
  setUpClass()
  test_export_constraints()
  test_export_credit_note()
  test_export_invoice()
  test_export_invoice_different_currency()
  test_export_invoice_without_country_code_prefix_in_vat()
  test_export_no_vat_and_no_company_registry_raises_error()
  test_export_no_vat_but_have_company_registry()
  test_export_no_vat_but_have_company_registry_without_prefix()
}
class "TestUBLRS" as odoo_src.odoo.addons.l10n_rs_edi.tests.test_xml_ubl_rs.TestUBLRS {
  create_invoice(move_type)
  setUpClass()
  test_export_credit_note()
  test_export_invoice()
}
class "TestUBLTR" as odoo_src.odoo.addons.l10n_tr_nilvera_einvoice.tests.test_xml_ubl_tr.TestUBLTR {
  setUpClass()
  test_xml_invoice_earchive()
  test_xml_invoice_earchive_multicurrency()
  test_xml_invoice_einvoice()
  test_xml_invoice_einvoice_multicurrency()
}
class "TestUIBR" as odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUIBR {
  setUpClass()
  test_01_pos_order_with_pix_qr_payment_fail()
  test_02_pos_order_with_pix_qr_payment()
}
class "TestUSerCreationSettings" as odoo_src.odoo.addons.mail.tests.test_res_users_settings.TestUSerCreationSettings {
  test_create_internal_user()
  test_create_portal_user()
}
class "TestUTMConsistencyHrRecruitment" as odoo_src.odoo.addons.hr_recruitment.tests.test_utm.TestUTMConsistencyHrRecruitment {
  test_utm_consistency()
}
class "TestUTMConsistencyMassMailing" as odoo_src.odoo.addons.mass_mailing.tests.test_utm.TestUTMConsistencyMassMailing {
  setUpClass()
  test_utm_consistency()
  test_utm_consistency_mass_mailing_user()
}
class "TestUblBis3" as odoo_src.odoo.addons.account_edi_ubl_cii.tests.test_ubl_bis3.TestUblBis3 {
  setUpClass()
  setup_partner_as_be1(partner)
  setup_partner_as_be2(partner)
  test_dispatch_base_lines_delta()
  test_early_pay_discount_different_taxes()
  test_early_pay_discount_with_discount_on_lines()
  test_early_pay_discount_with_fixed_tax()
  test_export_invoice_from_account_edi_xml_ubl_bis3()
  test_financial_account()
  test_manual_tax_amount_on_invoice()
  test_multiple_fixed_taxes_price_excluded()
  test_price_unit_with_more_decimals()
  test_product_code_and_barcode()
  test_single_fixed_tax_price_excluded()
  test_single_fixed_tax_price_excluded_and_discount()
  test_single_fixed_tax_price_included()
  test_taxes_rounding_negative_line_tax_included()
}
class "TestUi" as odoo_src.odoo.addons.l10n_it_edi_website_sale.tests.test_l10n_it_edi_website_sale.TestUi {
  setUp()
  test_checkout_address()
  test_public_user_codice_fiscale()
}
class "TestUi" as odoo_src.odoo.addons.l10n_uy_website_sale.tests.test_l10n_uy_website_sale.TestUi {
  test_checkout_address_uy()
}
class "TestUi" as odoo_src.odoo.addons.mail.tests.discuss.test_ui.TestUi {
  test_01_mail_tour()
  test_02_mail_create_channel_no_mail_tour()
  test_03_mail_discuss_configuration_tour()
}
class "TestUi" as odoo_src.odoo.addons.l10n_ec_website_sale.tests.test_l10n_ec_website_sale.TestUi {
  test_checkout_address_ec()
  test_new_billing_ec()
}
class "TestUi" as odoo_src.odoo.addons.contacts.tests.test_ui.TestUi {
  test_set_defaults()
  test_vat_label_string()
}
class "TestUi" as odoo_src.odoo.addons.l10n_es_pos.tests.test_frontend.TestUi {
  customer_account_payment_method
  pos_make_payment_0
  pos_order_pos0
  test_l10n_es_pos_reconcile()
  test_simplified_invoice_not_override_set_pricelist()
  test_spanish_pos()
  test_spanish_pos_invoice_no_certificate()
}
class "TestUi" as odoo_src.odoo.addons.crm.tests.test_sales_team_ui.TestUi {
  test_crm_team_members_mono_company()
}
class "TestUi" as odoo_src.odoo.addons.crm.tests.test_crm_ui.TestUi {
  setUpClass()
  test_01_crm_tour()
  test_02_crm_tour_rainbowman()
  test_03_crm_tour_forecast()
  test_email_and_phone_propagation_edit_save()
}
class "TestUi" as odoo_src.odoo.addons.lunch.tests.test_ui.TestUi {
  category_pizza
  location_office
  partner_pizza_inn
  product_pizza
  supplier_pizza_inn
  test_01_ui()
}
class "TestUi" as odoo_src.odoo.addons.hr_expense.tests.test_ui.TestUi {
  browser_size : str
  test_expense_manager_can_always_set_employee()
  test_not_create_zero_amount_expense_in_expense_sheet()
  test_show_expense_receipt_on_expense_line_click()
}
class "TestUi" as odoo_src.odoo.addons.event_sale.tests.test_event_sale_ui.TestUi {
  product_event
  tax_10
  test_event_configurator()
}
class "TestUi" as odoo_src.odoo.addons.account.tests.test_tour.TestUi {
  setUpClass()
  test_01_account_tax_groups_tour()
  test_01_account_tour()
}
class "TestUiCH" as odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUiCH {
  setUpClass()
  test_01_pos_order_with_swiss_qr_payment_fail()
  test_02_pos_order_with_swiss_qr_payment()
}
class "TestUiHK" as odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUiHK {
  setUpClass()
  setup_armageddon_tax(tax_name, company_data)
  test_01_pos_order_with_fps_qr_payment_fail()
  test_02_pos_order_with_emv_qr_payment()
}
class "TestUiSEPA" as odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUiSEPA {
  setUpClass()
  test_01_pos_order_with_sepa_qr_payment_fail()
  test_02_pos_order_with_sepa_qr_payment()
}
class "TestUnbuild" as odoo_src.odoo.addons.mrp.tests.test_unbuild.TestUnbuild {
  setUpClass()
  test_compute_location_id()
  test_compute_product_uom_id()
  test_production_links_with_non_tracked_lots()
  test_putaway_strategy_with_unbuild()
  test_unbuild_and_multilocations()
  test_unbuild_consigned_comp()
  test_unbuild_decimal_qty()
  test_unbuild_different_qty()
  test_unbuild_less_quantity_consumed()
  test_unbuild_mo_different_qty()
  test_unbuild_mo_with_tracked_product_and_component()
  test_unbuild_similar_tracked_components()
  test_unbuild_standart()
  test_unbuild_with_consumed_lot()
  test_unbuild_with_duplicate_move()
  test_unbuild_with_everything_tracked()
  test_unbuild_with_final_lot()
  test_unbuild_with_routes()
  test_use_unbuilt_sn_in_mo()
}
class "TestUnexpectedAmount" as odoo_src.odoo.addons.account.tests.test_unexpected_invoice.TestUnexpectedAmount {
  setUpClass()
  test_date_too_soon_month()
  test_date_too_soon_year()
  test_higher_amount()
}
class "TestUninstall" as odoo_src.odoo.addons.base.tests.test_uninstall.TestUninstall {
  test_01_install()
  test_02_uninstall()
}
class "TestUnsubscribe" as odoo_src.odoo.addons.digest.tests.test_digest.TestUnsubscribe {
  base_url
  test_digest
  user_demo_unsubscribe_token
  setUp()
  test_mail_mail_headers()
  test_unsubscribe()
  test_unsubscribe_token_one_click()
}
class "TestUpdateEvents" as odoo_src.odoo.addons.microsoft_calendar.tests.test_update_events.TestUpdateEvents {
  setUp()
  test_changing_event_organizer_to_another_user(mock_insert, mock_delete, mock_get_events)
  test_forbid_simple_event_become_recurrence_sync_on(mock_patch)
  test_restart_sync_with_synced_recurrence(mock_patch)
  test_update_all_events_of_recurrence_from_odoo_attendee_calendar(mock_patch, mock_insert, mock_delete)
  test_update_name_of_all_events_of_recurrence_from_odoo(mock_patch, mock_insert, mock_delete)
  test_update_name_of_all_events_of_recurrence_from_outlook_organizer_calendar(mock_get_events)
  test_update_name_of_one_and_future_events_of_recurrence_from_odoo(mock_patch, mock_insert, mock_delete)
  test_update_name_of_one_event_and_future_of_recurrence_from_outlook_organizer_calendar(mock_get_events)
  test_update_name_of_one_event_of_recurrence_from_odoo(mock_patch)
  test_update_name_of_one_event_of_recurrence_from_odoo_attendee_calendar(mock_patch)
  test_update_name_of_one_event_of_recurrence_from_outlook_organizer_calendar(mock_get_events)
  test_update_odoo_simple_event_without_sync(mock_patch)
  test_update_old_event_synced_with_outlook(mock_get_events, mock_write_from_microsoft)
  test_update_one_and_future_events_of_recurrence_from_odoo_attendee_calendar(mock_patch, mock_insert, mock_delete)
  test_update_simple_event_from_odoo(mock_patch)
  test_update_simple_event_from_odoo_attendee_calendar(mock_patch)
  test_update_simple_event_from_outlook_attendee_calendar(mock_get_events)
  test_update_simple_event_from_outlook_organizer_calendar(mock_get_events)
  test_update_start_of_all_events_of_recurrence_from_odoo(mock_patch, mock_insert, mock_delete)
  test_update_start_of_all_events_of_recurrence_from_outlook_organizer_calendar(mock_get_events)
  test_update_start_of_all_events_of_recurrence_with_exceptions(mock_get_events)
  test_update_start_of_all_events_of_recurrence_with_less_events(mock_get_events)
  test_update_start_of_all_events_of_recurrence_with_more_events(mock_get_events)
  test_update_start_of_one_and_future_events_of_recurrence_from_odoo(mock_patch, mock_insert, mock_delete)
  test_update_start_of_one_and_future_events_of_recurrence_from_odoo_with_overlap(mock_patch, mock_insert, mock_delete)
  test_update_start_of_one_event_and_future_of_recurrence_from_outlook_organizer_calendar(mock_get_events)
  test_update_start_of_one_event_and_future_of_recurrence_from_outlook_organizer_calendar_with_overlap(mock_get_events)
  test_update_start_of_one_event_of_recurrence_from_odoo(mock_patch)
  test_update_start_of_one_event_of_recurrence_from_odoo_with_overlap(mock_patch)
  test_update_start_of_one_event_of_recurrence_from_outlook_organizer_calendar(mock_get_events)
  test_update_start_of_one_event_of_recurrence_from_outlook_organizer_calendar_with_overlap(mock_get_events)
  test_update_synced_event_with_sync_config_paused(mock_patch)
}
class "TestUpdateMonthlyByDate" as odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateMonthlyByDate {
  setUpClass()
  test_attendees_state_after_update()
  test_recurring_ui_options_daily()
  test_recurring_ui_options_monthly()
  test_recurring_ui_options_yearly()
  test_shift_future()
  test_update_all()
}
class "TestUpdateMonthlyByDay" as odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateMonthlyByDay {
  setUpClass()
  test_shift_all()
}
class "TestUpdateMultiDayWeeklyRecurrentEvents" as odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateMultiDayWeeklyRecurrentEvents {
  setUpClass()
  test_shift_all_multiple_weekdays()
  test_shift_all_multiple_weekdays_duration()
  test_shift_future_multiple_weekdays()
}
class "TestUpdateNotification" as odoo_src.odoo.addons.mail.tests.test_update_notification.TestUpdateNotification {
  test_user_count()
}
class "TestUpdateRecurrentEvents" as odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateRecurrentEvents {
  setUpClass()
  test_all_day_shift()
  test_archive_recurrence_all()
  test_archive_recurrence_future()
  test_break_recurrence_all()
  test_break_recurrence_future()
  test_change_week_day_rrule()
  test_recurrence_update_all_first_archived()
  test_rrule_x_params()
  test_rrule_x_params_no_rrule_prefix()
  test_shift_all()
  test_shift_all_base_inactive()
  test_shift_all_with_outlier()
  test_shift_future()
  test_shift_future_first()
  test_shift_reapply()
  test_shift_single()
  test_shift_stop_all()
  test_unlink_recurrence_all()
  test_unlink_recurrence_future()
  test_unlink_recurrence_wizard_all()
  test_unlink_recurrence_wizard_next()
  test_update_name_all()
  test_update_name_future()
  test_update_recurrence_all()
  test_update_recurrence_future()
}
class "TestUploadAttachment" as odoo_src.odoo.addons.im_livechat.tests.test_upload_attachment.TestUploadAttachment {
  test_visitor_cannot_upload_on_closed_livechat()
}
class "TestUrlValidate" as odoo_src.odoo.addons.base.tests.test_misc.TestUrlValidate {
  test_url_validate()
}
class "TestUser" as odoo_src.odoo.addons.mail.tests.test_res_users.TestUser {
  test_notification_type_constraint()
  test_notification_type_convert_internal_inbox_to_portal()
  test_web_create_users()
}
class "TestUserTours" as odoo_src.odoo.addons.mail.tests.test_res_users.TestUserTours {
  test_user_modify_own_profile()
}
class "TestUsers" as odoo_src.odoo.addons.base.tests.test_res_users.TestUsers {
  cron
  test_change_user_company()
  test_context_get_lang()
  test_deactivate_portal_users_access()
  test_deactivate_portal_users_archive_and_remove()
  test_name_search()
  test_user_home_action_restriction()
  test_user_partner()
}
class "TestUsers2" as odoo_src.odoo.addons.base.tests.test_res_users.TestUsers2 {
  setUpClass()
  test_change_user_login()
  test_read_list_with_reified_field()
  test_reified_groups()
  test_reified_groups_on_change()
  test_selection_groups()
  test_self_readable_writeable_fields_preferences_form()
  test_update_user_groups_view()
}
class "TestUsersGroupWarning" as odoo_src.odoo.addons.base.tests.test_res_users.TestUsersGroupWarning {
  setUpClass()
  test_user_group_empty_group_warning()
  test_user_group_inheritance_warning()
  test_user_group_inheritance_warning_multi()
  test_user_group_least_possible_inheritance_warning()
  test_user_group_parent_inheritance_no_warning()
}
class "TestUsersIdentitycheck" as odoo_src.odoo.addons.base.tests.test_res_users.TestUsersIdentitycheck {
  test_revoke_all_devices()
}
class "TestUsersTweaks" as odoo_src.odoo.addons.base.tests.test_res_users.TestUsersTweaks {
  test_superuser()
}
class "TestVNEDI" as odoo_src.odoo.addons.l10n_vn_edi_viettel.tests.test_edi.TestVNEDI {
  setUpClass()
  test_access_token()
  test_adjustment_invoice()
  test_cancel_invoice()
  test_default_symbol_on_partner()
  test_invoice_creation()
  test_invoice_foreign_currency()
  test_json_data_generation()
  test_replacement_invoice()
  test_send_and_print()
}
class "TestValidationTools" as odoo_src.odoo.addons.base.tests.test_views.TestValidationTools {
  test_get_expression_identities()
}
class "TestViewCombined" as odoo_src.odoo.addons.base.tests.test_views.TestViewCombined {
  a1
  a2
  a3
  a4
  b1
  b2
  c1
  c2
  c3
  d1
  setUp()
  test_basic_read()
  test_cross_model_double()
  test_cross_model_simple()
  test_inherit_python_expression()
  test_primary_after_extensions()
  test_read_from_child()
  test_read_from_child_primary()
}
class "TestViewInheritance" as odoo_src.odoo.addons.base.tests.test_views.TestViewInheritance {
  a
  a1
  a11
  a2
  a22
  b
  c
  d
  d1
  model : str
  view_ids : dict
  arch_for(name, view_type, parent)
  get_views(names)
  makeView(name, parent, arch)
  setUp()
  test_default_view()
  test_get_combined_arch_query_count()
  test_get_inheriting_views()
  test_no_arch()
  test_no_default_view()
  test_no_recursion()
  test_view_validate_attrs_groups_query_count()
  test_view_validate_button_action_query_count()
  test_write_arch()
}
class "TestViewTranslations" as odoo_src.odoo.addons.base.tests.test_views.TestViewTranslations {
  create_view(archf, terms)
  setUpClass()
  test_cache_consistency()
  test_no_groups_for_inherited()
  test_sync()
  test_sync_update()
  test_sync_xml()
}
class "TestViews" as odoo_src.odoo.addons.base.tests.test_views.TestViews {
  View
  test_attrs_groups_behavior()
  test_attrs_groups_validation()
  test_attrs_missing_field()
  test_button()
  test_check_xml_on_reenable()
  test_col_colspan_numerical()
  test_context_in_subsubview_with_parent()
  test_context_in_subview()
  test_context_in_subview_with_parent()
  test_context_in_view()
  test_custom_view_validation()
  test_domain_boolean_case()
  test_domain_field_no_comodel()
  test_domain_field_searchable()
  test_domain_id_case()
  test_domain_in_filter()
  test_domain_in_subview()
  test_domain_in_subview_with_parent()
  test_domain_in_view()
  test_domain_invalid_in_filter()
  test_domain_on_field_in_noneditable_subview()
  test_domain_on_field_in_subview()
  test_domain_on_field_in_subview_with_parent()
  test_domain_on_field_in_view()
  test_domain_on_readonly_field_in_subview()
  test_domain_on_readonly_field_in_view()
  test_domain_unknown_field()
  test_empty_groups_attrib()
  test_for_in_label()
  test_forbidden_data_tooltip_attributes_in_form()
  test_forbidden_data_tooltip_attributes_in_kanban()
  test_forbidden_owl_directives_in_form()
  test_forbidden_owl_directives_in_kanban()
  test_forbidden_use_of___comp___in_kanban()
  test_graph_attributes()
  test_graph_fields()
  test_group_by_in_filter()
  test_groups_field()
  test_invalid_field()
  test_invalid_subfield()
  test_invisible_groups_with_groups_in_model()
  test_nonexistent_attribute_removal()
  test_partial_validation()
  test_searchpanel()
  test_tree()
  test_tree_groupby()
  test_tree_groupby_many2one()
  test_valid_accessibility_icon_text()
  test_valid_alerts()
  test_valid_alternative_image_text()
  test_valid_dialog()
  test_valid_focusable_button()
  test_valid_prohibited_none_role()
  test_valid_simili_button()
  test_valid_simili_dropdown()
  test_valid_simili_progressbar()
  test_valid_simili_tab()
  test_valid_simili_tablist()
  test_valid_simili_tabpanel()
  test_view_inheritance()
  test_view_inheritance_divergent_models()
  test_view_inheritance_text_after()
  test_view_inheritance_text_before()
  test_view_inheritance_text_inside()
  test_view_ref()
  test_view_root_node_matches_view_type()
}
class "TestWarehouseMrp" as odoo_src.odoo.addons.mrp.tests.test_stock.TestWarehouseMrp {
  new_mo_laptop()
  setUpClass()
  test_backorder_unpacking()
  test_manufacturing_route()
  test_manufacturing_rule_other_dest()
  test_manufacturing_scrap()
  test_multi_warehouse_resupply()
  test_produce_with_zero_available_qty()
  test_putaway_after_manufacturing_3()
  test_unarchive_mto_route_active_needed_rules_only()
}
class "TestWebsiteSaleInvoice" as odoo_src.odoo.addons.l10n_ar_website_sale.tests.test_invoice.TestWebsiteSaleInvoice {
  amount
  frozen_today : str
  setUpClass()
  test_website_automatic_invoice_date()
}
class "TestWebsocketCaryall" as odoo_src.odoo.addons.bus.tests.test_websocket_caryall.TestWebsocketCaryall {
  test_channel_subscription_disconnect()
  test_channel_subscription_update()
  test_disconnect_when_version_outdated()
  test_instances_weak_set()
  test_lifecycle_hooks()
  test_no_cursor_when_no_callback_for_lifecycle_event()
  test_public_configuration()
  test_subscribe_higher_last_notification_id()
  test_subscribe_lower_last_notification_id()
  test_subscribe_to_custom_channel()
  test_timeout_manager_keep_alive_timeout()
  test_timeout_manager_no_response_timeout()
  test_timeout_manager_reset_wait_for()
  test_trigger_notification()
  test_trigger_notification_unsupported_language()
  test_trigger_on_websocket_closed()
  test_user_login()
  test_user_logout_incoming_message()
  test_user_logout_outgoing_message()
}
class "TestWebsocketController" as odoo_src.odoo.addons.bus.tests.test_websocket_controller.TestWebsocketController {
  test_on_websocket_closed()
  test_receive_missed_presences_on_peek_notifications()
  test_websocket_peek()
  test_websocket_peek_session_expired_login()
  test_websocket_peek_session_expired_logout()
}
class "TestWebsocketRateLimiting" as odoo_src.odoo.addons.bus.tests.test_websocket_rate_limiting.TestWebsocketRateLimiting {
  test_rate_limiting_base_ko()
  test_rate_limiting_base_ok()
  test_rate_limiting_opening_burst()
  test_rate_limiting_start_ok_end_ko()
}
class "TestWithholdingAndPensionFundTaxes" as odoo_src.odoo.addons.l10n_it_edi_withholding.tests.test_withholding.TestWithholdingAndPensionFundTaxes {
  get_real_client_invoice_data()
  setUpClass()
  test_enasarco_tax_export()
  test_enasarco_tax_import()
  test_enasarco_tax_import_global()
  test_inps_tax_export()
  test_pension_fund_taxes_export()
  test_pension_fund_taxes_import()
  test_pension_fund_taxes_import_assosoftware_tag()
  test_withholding_tax_constraints()
  test_withholding_taxes_export()
  test_withholding_taxes_import()
}
class "TestWorkEntry" as odoo_src.odoo.addons.hr_work_entry_contract.tests.test_work_entry.TestWorkEntry {
  setUpClass()
  test_approve_multiple_day_work_entry()
  test_create_conflict()
  test_no_duplicate()
  test_no_overlap_sql_constraint()
  test_outside_calendar()
  test_separate_overlapping_work_entries_by_type()
  test_unarchive_conflict()
  test_validate_conflict_work_entry()
  test_validate_undefined_work_entry()
  test_validated_no_conflict()
  test_work_entry()
  test_work_entry_duration()
  test_work_entry_employee_without_contract()
  test_work_entry_timezone()
  test_write_conflict()
  test_write_move()
}
class "TestWorkEntryBase" as odoo_src.odoo.addons.hr_work_entry_contract.tests.common.TestWorkEntryBase {
  create_work_entries(intervals)
  create_work_entry(start, stop, work_entry_type)
  setUpClass()
}
class "TestWorkEntryHolidaysBase" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.common.TestWorkEntryHolidaysBase {
  setUpClass()
}
class "TestWorkEntryHolidaysMultiContract" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.test_multi_contract.TestWorkEntryHolidaysMultiContract {
  test_multi_contract_holiday()
}
class "TestWorkEntryHolidaysPerformance" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.test_performance.TestWorkEntryHolidaysPerformance {
  setUpClass()
  test_performance_leave_create()
  test_performance_leave_validate()
  test_performance_leave_write()
}
class "TestWorkEntryHolidaysPerformancesBigData" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.test_performance.TestWorkEntryHolidaysPerformancesBigData {
  setUpClass()
  test_work_entries_generation_perf()
}
class "TestWorkEntryLeave" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.test_leave.TestWorkEntryLeave {
  test_archived_work_entry_conflict()
  test_conflict_move_work_entry()
  test_create_mark_conflicting_work_entries()
  test_create_work_entry_for_flexible_employee_leave()
  test_refuse_approved_leave()
  test_refuse_leave()
  test_resource_leave_has_work_entry_type()
  test_resource_leave_in_contract_calendar()
  test_split_leaves_by_entry_type()
  test_time_off_duration_contract_state_change()
  test_validate_leave_with_overlap()
  test_validate_leave_without_overlap()
  test_work_entry_cancel_leave()
  test_work_entry_generation_company_time_off()
  test_write_mark_conflicting_work_entries()
}
class "TestWorkcenterOverview" as odoo_src.odoo.addons.mrp.tests.test_workcenter.TestWorkcenterOverview {
  test_workcenter_graph_data()
}
class "TestWorkeEntryHolidaysWorkEntry" as odoo_src.odoo.addons.hr_work_entry_holidays.tests.test_work_entry.TestWorkeEntryHolidaysWorkEntry {
  setUpClass()
  test_contract_on_another_company()
  test_refuse_leave_work_entry()
  test_time_week_leave_work_entry()
  test_validate_non_approved_leave_work_entry()
  test_work_entries_generation_if_parent_leave_zero_hours()
  test_work_entries_leave_if_leave_conflict_with_public_holiday()
}
class "TestWorkingHours" as odoo_src.odoo.addons.hr_holidays.tests.test_working_hours.TestWorkingHours {
  setUpClass()
  test_multi_companies_2_employees_2_selected_companies_company_holidays()
  test_multi_companies_2_employees_2_selected_companies_global_holidays()
  test_multi_companies_2_employees_2_selected_companies_holidays()
}
class "TestWorkingHours" as odoo_src.odoo.addons.hr_calendar.tests.test_working_hours.TestWorkingHours {
  setUpClass()
  test_multi_companies_2_employees_1_partner_1_selected_companies()
  test_multi_companies_2_employees_1_selected_company()
  test_multi_companies_2_employees_2_selected_companies()
  test_multi_companies_2_employees_2_selected_companies_union_between_schedules()
  test_work_hours_of_employee_without_time_zone()
  test_working_hours_2_emp_different_calendar()
  test_working_hours_2_emp_same_calendar()
  test_working_hours_2_emp_same_calendar_hours_different_timezone()
  test_working_hours_3_emp_different_calendar()
}
class "TestXMLDuplicateTranslations" as odoo_src.odoo.addons.base.tests.test_translate.TestXMLDuplicateTranslations {
  setUpClass()
  test_copy()
  test_get_field_translations()
  test_update_field_translations_again()
  test_update_field_translations_result()
  test_write()
}
class "TestXMLID" as odoo_src.odoo.addons.base.tests.test_ir_model.TestXMLID {
  get_data(xml_id)
  test_create()
  test_create_external_id_with_space()
  test_create_inherits()
  test_create_noupdate()
  test_create_noupdate_multi()
  test_create_order()
  test_create_xmlids()
  test_recreate()
  test_update_xmlid()
}
class "TestXMLRPC" as odoo_src.odoo.addons.base.tests.test_xmlrpc.TestXMLRPC {
  admin_uid
  setUp()
  test_01_xmlrpc_login()
  test_jsonrpc_name_search()
  test_jsonrpc_read_group()
  test_xmlrpc_attachment_raw()
  test_xmlrpc_datetime()
  test_xmlrpc_defaultdict_marshalling()
  test_xmlrpc_frozendict_marshalling()
  test_xmlrpc_html_field()
  test_xmlrpc_ir_model_search()
  test_xmlrpc_name_search()
  test_xmlrpc_read_group()
  test_xmlrpc_remove_control_characters()
  xmlrpc(model, method)
}
class "TestXMLTranslation" as odoo_src.odoo.addons.base.tests.test_translate.TestXMLTranslation {
  create_view(archf, terms)
  setUpClass()
  test_cache_consistency()
  test_copy()
  test_delay_translations()
  test_delay_translations_no_term()
  test_spaces()
  test_sync()
  test_sync_text_to_xml()
  test_sync_xml()
  test_sync_xml_attribute()
  test_sync_xml_close_terms()
  test_sync_xml_collision()
  test_sync_xml_inline_modifiers()
  test_sync_xml_no_en()
  test_sync_xml_upgrade()
  test_update_field_translations()
  test_update_field_translations_empty_str()
  test_update_field_translations_partially()
  test_update_field_translations_source_lang()
  test_update_field_translations_typofix()
}
class "TestXPathExtentions" as odoo_src.odoo.addons.base.tests.test_views.TestXPathExtentions {
  test_hasclass()
}
class "Test_A" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection.test_selector_selection.Test_A {
}
class "Test_B" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection.test_selector_selection.Test_B {
}
class "Test_C" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection.test_selector_selection.Test_C {
}
class "Test_D" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection.test_selector_selection.Test_D {
}
class "Test_E" as odoo_src.odoo.addons.base.tests.test_tests_tags.TestSelectorSelection.test_selector_selection.Test_E {
}
class "TestingSMTPSession" as odoo_src.odoo.addons.base.tests.common.MockSmtplibCase.mock_smtplib_connection.TestingSMTPSession {
  {abstract}ehlo_or_helo_if_needed()
  {abstract}login(user, password)
  {abstract}quit()
  send_message(message, smtp_from, smtp_to_list)
  {abstract}set_debuglevel(smtp_debug)
  {abstract}starttls(keyfile, certfile, context)
}
class "TestsCommon" as odoo_src.odoo.addons.lunch.tests.common.TestsCommon {
  alert_ny
  alert_tokyo
  category_pizza
  category_sandwich
  location_office_1
  location_office_2
  manager
  partner_coin_gourmand
  partner_kothai
  partner_pizza_inn
  product_pizza
  product_sandwich_tuna
  supplier_coin_gourmand
  supplier_kothai
  supplier_pizza_inn
  topping_olives
  setUp()
  setUpClass()
}
class "TestsSharedJsPython" as odoo_src.odoo.addons.account.controllers.tests_shared_js_python.TestsSharedJsPython {
  route_init_tests_shared_js_python()
  route_post_tests_shared_js_python(results)
}
class "TextConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.TextConverter {
  value_to_html(value, options)
}
class "<color:red>TextError</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.TextError {
  msg : str
  resultcode : int
}
class "ThreadController" as odoo_src.odoo.addons.im_livechat.controllers.thread.ThreadController {
  mail_message_post(thread_model, thread_id, post_data, context)
}
class "ThreadController" as odoo_src.odoo.addons.mail_bot.controllers.thread.ThreadController {
  mail_message_post(thread_model, thread_id, post_data, context)
}
class "ThreadController" as odoo_src.odoo.addons.mail.controllers.thread.ThreadController {
  mail_message_post(thread_model, thread_id, post_data, context)
  mail_message_update_content(message_id, body, attachment_ids, attachment_tokens, partner_ids)
  mail_thread_data(thread_model, thread_id, request_list)
  mail_thread_messages(thread_model, thread_id, search_term, before, after, around, limit)
  mail_thread_partner_from_email(emails, additional_values)
  read_subscription_data(follower_id)
}
class "<color:red>TicketNotPrinted</color>" as odoo_src.odoo.addons.hw_escpos.escpos.exceptions.TicketNotPrinted {
  msg : str
  resultcode : int
}
class "TimeConverter" as odoo_src.odoo.addons.base.models.ir_qweb_fields.TimeConverter {
  value_to_html(value, options)
}
class "TimeoutManager" as odoo_src.odoo.addons.bus.websocket.TimeoutManager {
  KEEP_ALIVE_TIMEOUT : int
  TIMEOUT : int
  timeout_reason : KEEP_ALIVE, NO_RESPONSE, NoneType
  acknowledge_frame_receipt(frame)
  acknowledge_frame_sent(frame)
  has_timed_out()
}
class "TimeoutReason" as odoo_src.odoo.addons.bus.websocket.TimeoutReason {
  name
}
class "TimesheetAttendance" as odoo_src.odoo.addons.hr_timesheet_attendance.report.hr_timesheet_attendance_report.TimesheetAttendance {
  attendance_cost
  company_id
  cost_difference
  date
  employee_id
  timesheets_cost
  total_attendance
  total_difference
  total_timesheet
  init()
  read_group(domain, fields, groupby, offset, limit, orderby, lazy)
}
class "TimesheetCustomerPortal" as odoo_src.odoo.addons.hr_timesheet.controllers.portal.TimesheetCustomerPortal {
  portal_my_timesheets(page, sortby, filterby, search, search_in, groupby)
}
class "TimesheetProjectCustomerPortal" as odoo_src.odoo.addons.hr_timesheet.controllers.portal.TimesheetProjectCustomerPortal {
}
class "TimesheetsAnalysisReport" as odoo_src.odoo.addons.hr_timesheet.report.timesheets_analysis_report.TimesheetsAnalysisReport {
  amount
  company_id
  currency_id
  date
  department_id
  manager_id
  message_partner_ids
  milestone_id
  name
  parent_task_id
  partner_id
  project_id
  task_id
  unit_amount
  user_id
  init()
}
class "TransactionCaseGamification" as odoo_src.odoo.addons.gamification.tests.common.TransactionCaseGamification {
  setUpClass()
}
class "TransactionCaseOnboarding" as odoo_src.odoo.addons.onboarding.tests.case.TransactionCaseOnboarding {
  assert_onboarding_is_done(onboarding, also_with_company)
  assert_onboarding_is_not_done(onboarding, also_with_company)
  assert_step_is_done(step, also_with_company)
  assert_step_is_not_done(step, also_with_company)
}
class "TransactionCaseWithUserDemo" as odoo_src.odoo.addons.base.tests.common.TransactionCaseWithUserDemo {
  setUpClass()
}
class "TransactionCaseWithUserPortal" as odoo_src.odoo.addons.base.tests.common.TransactionCaseWithUserPortal {
  setUpClass()
}
class "TransactionExpressionCase" as odoo_src.odoo.addons.base.tests.test_expression.TransactionExpressionCase {
}
class "TranslationToolsTestCase" as odoo_src.odoo.addons.base.tests.test_translate.TranslationToolsTestCase {
  assertItemsEqual(a, b, msg)
  test_quote_unquote()
  test_translate_html()
  test_translate_html_i()
  test_translate_html_nbsp()
  test_translate_xml_a()
  test_translate_xml_attribute()
  test_translate_xml_base()
  test_translate_xml_illegal_translations()
  test_translate_xml_inline1()
  test_translate_xml_inline2()
  test_translate_xml_inline3()
  test_translate_xml_inline4()
  test_translate_xml_inline5()
  test_translate_xml_invalid_translations()
  test_translate_xml_off()
  test_translate_xml_t()
  test_translate_xml_text()
  test_translate_xml_text_entity()
  test_translate_xml_unicode()
  test_translate_xml_with_namespace()
}
class "URL" as odoo_src.odoo._monkeypatches.werkzeug_urls.URL {
  encode(charset: str, errors: str) -> BytesURL
}
class "Unknown" as odoo_src.odoo.addons.base.models.ir_model.Unknown {
}
class "UoM" as odoo_src.odoo.addons.account.models.uom_uom.UoM {
  fiscal_country_codes
}
class "UoM" as odoo_src.odoo.addons.l10n_es_edi_facturae.models.uom_uom.UoM {
  l10n_es_edi_facturae_uom_code
}
class "UoM" as odoo_src.odoo.addons.l10n_in.models.uom_uom.UoM {
  l10n_in_code
}
class "Uom" as odoo_src.odoo.addons.l10n_ar.models.uom_uom.Uom {
  l10n_ar_afip_code
}
class "Uom" as odoo_src.odoo.addons.hr_timesheet.models.uom_uom.Uom {
  timesheet_widget
}
class "Uom" as odoo_src.odoo.addons.point_of_sale.models.product.Uom {
  is_pos_groupable
}
class "Uom" as odoo_src.odoo.addons.l10n_tr_nilvera.models.uom_uom.Uom {
}
class "Uom" as odoo_src.odoo.addons.l10n_id_efaktur_coretax.models.uom_uom.Uom {
  l10n_id_uom_code
}
class "UomCateg" as odoo_src.odoo.addons.point_of_sale.models.product.UomCateg {
  is_pos_groupable
}
class "UomCode" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.uom_uom.UomCode {
  code
  name
}
class "UomUom" as odoo_src.odoo.addons.l10n_cl.models.uom_uom.UomUom {
  l10n_cl_sii_code
}
class "UomUom" as odoo_src.odoo.addons.l10n_eg_edi_eta.models.uom_uom.UomUom {
  l10n_eg_unit_code_id
}
class "UpgradeRequired" as odoo_src.odoo.addons.bus.websocket.UpgradeRequired {
  code : int
  description : str
  get_headers(environ)
}
class "Usb" as odoo_src.odoo.addons.hw_escpos.escpos.printer.Usb {
  device : NoneType
  errorText : str
  idProduct
  idVendor
  in_ep : NoneType, int
  interface : int
  out_ep : NoneType, int
  write_kwargs : dict
  close()
  get_printer_status()
  open()
}
class "User" as odoo_src.odoo.addons.google_calendar.models.res_users.User {
  google_calendar_cal_id
  google_calendar_rtoken
  google_calendar_sync_token
  google_calendar_token
  google_calendar_token_validity
  google_synchronization_stopped
  check_calendar_credentials()
  check_synchronization_status()
  is_google_calendar_synced()
  pause_google_synchronization()
  restart_google_synchronization()
  stop_google_synchronization()
  unpause_google_synchronization()
}
class "User" as odoo_src.odoo.addons.hr_attendance.models.res_users.User {
  SELF_READABLE_FIELDS
  attendance_manager_id
  attendance_state
  display_extra_hours
  hours_last_month
  hours_last_month_display
  last_check_in
  last_check_out
  total_overtime
  action_open_last_month_attendances()
  action_open_last_month_overtime()
}
class "User" as odoo_src.odoo.addons.hr_expense.models.hr_employee.User {
  SELF_READABLE_FIELDS
  expense_manager_id
}
class "User" as odoo_src.odoo.addons.hr_holidays.models.res_users.User {
  SELF_READABLE_FIELDS
  allocation_count
  allocation_display
  allocation_remaining_display
  current_leave_state
  hr_icon_display
  is_absent
  leave_date_to
  leave_manager_id
  show_leaves
  create(vals_list)
}
class "User" as odoo_src.odoo.addons.microsoft_account.models.res_users.User {
  microsoft_calendar_rtoken
  microsoft_calendar_token
  microsoft_calendar_token_validity
}
class "User" as odoo_src.odoo.addons.hr.models.res_users.User {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  additional_note
  address_id
  barcode
  birthday
  can_edit
  category_ids
  certificate
  children
  coach_id
  country_of_birth
  create_employee
  create_employee_id
  department_id
  distance_home_work
  distance_home_work_unit
  emergency_contact
  emergency_phone
  employee_bank_account_id
  employee_count
  employee_country_id
  employee_id
  employee_ids
  employee_parent_id
  employee_resource_calendar_id
  employee_type
  gender
  hr_presence_state
  identification_id
  is_system
  job_title
  km_home_work
  last_activity
  last_activity_time
  marital
  mobile_phone
  passport_id
  permit_no
  pin
  place_of_birth
  private_city
  private_country_id
  private_email
  private_lang
  private_phone
  private_state_id
  private_street
  private_street2
  private_zip
  spouse_birthdate
  spouse_complete_name
  ssnid
  study_field
  study_school
  visa_expire
  visa_no
  work_contact_id
  work_email
  work_location_id
  work_location_name
  work_location_type
  work_phone
  action_create_employee()
  action_get()
  action_open_employees()
  create(vals_list)
  get_view(view_id, view_type)
  get_views(views, options)
  write(vals)
}
class "User" as odoo_src.odoo.addons.microsoft_calendar.models.res_users.User {
  microsoft_calendar_sync_token
  microsoft_last_sync_date
  microsoft_synchronization_stopped
  check_calendar_credentials()
  check_synchronization_status()
  pause_microsoft_synchronization()
  restart_microsoft_synchronization()
  stop_microsoft_synchronization()
  unpause_microsoft_synchronization()
}
class "User" as odoo_src.odoo.addons.hr_homeworking.models.res_users.User {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  friday_location_id
  monday_location_id
  saturday_location_id
  sunday_location_id
  thursday_location_id
  tuesday_location_id
  wednesday_location_id
}
class "User" as odoo_src.odoo.addons.hr_fleet.models.res_users.User {
  SELF_READABLE_FIELDS
  employee_cars_count
  action_open_employee_cars()
}
class "User" as odoo_src.odoo.addons.hr_skills.models.res_users.User {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  employee_skill_ids
  resume_line_ids
}
class "User" as odoo_src.odoo.addons.hr_contract.models.res_users.User {
  SELF_READABLE_FIELDS
  bank_account_id
  vehicle
}
class "UserDelegationKey" as odoo_src.odoo.addons.cloud_storage_azure.utils.cloud_storage_azure_utils.UserDelegationKey {
  signed_expiry : NoneType
  signed_oid : NoneType, str
  signed_service : NoneType, str
  signed_start : NoneType
  signed_tid : NoneType, str
  signed_version : NoneType, str
  value : NoneType, str
}
class "Users" as odoo_src.odoo.addons.auth_totp_mail.models.res_users.Users {
  action_open_my_account_settings()
  action_totp_invite()
  get_totp_invite_url()
  write(vals)
}
class "Users" as odoo_src.odoo.addons.im_livechat.models.res_users.Users {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  has_access_livechat
  livechat_lang_ids
  livechat_username
}
class "Users" as odoo_src.odoo.addons.mail_bot.models.res_users.Users {
  SELF_READABLE_FIELDS
  odoobot_failed
  odoobot_state
}
class "Users" as odoo_src.odoo.addons.calendar.models.res_users.Users {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  calendar_default_privacy
  check_calendar_credentials()
  check_synchronization_status()
  create(vals_list)
  get_selected_calendars_partner_ids(include_user)
  write(vals)
}
class "Users" as odoo_src.odoo.addons.gamification.models.res_users.Users {
  badge_ids
  bronze_badge
  gold_badge
  karma
  karma_tracking_ids
  next_rank_id
  rank_id
  silver_badge
  action_karma_report()
  create(values_list)
  get_gamification_redirection_data()
  write(values)
}
class "Users" as odoo_src.odoo.addons.mail.models.res_users.Users {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  notification_type
  action_archive()
  create(vals_list)
  write(vals)
}
class "Users" as odoo_src.odoo.addons.contacts.models.res_users.Users {
}
class "Users" as odoo_src.odoo.addons.crm.models.res_users.Users {
  target_sales_done
  target_sales_won
}
class "Users" as odoo_src.odoo.addons.auth_ldap.models.res_users.Users {
  change_password(old_passwd, new_passwd)
}
class "Users" as odoo_src.odoo.addons.mass_mailing.models.res_users.Users {
}
class "Users" as odoo_src.odoo.addons.auth_totp_portal.models.res_users.Users {
  get_totp_invite_url()
}
class "Users" as odoo_src.odoo.addons.phone_validation.models.res_users.Users {
}
class "Users" as odoo_src.odoo.addons.mass_mailing_sms.models.res_users.Users {
}
class "Users" as odoo_src.odoo.addons.hr_maintenance.models.res_users.Users {
  SELF_READABLE_FIELDS
  equipment_count
  equipment_ids
}
class "Users" as odoo_src.odoo.addons.auth_totp_mail_enforce.models.res_users.Users {
}
class "Users" as odoo_src.odoo.addons.base.models.res_users.Users {
  SELF_READABLE_FIELDS
  SELF_WRITEABLE_FIELDS
  accesses_count
  action_id
  active
  active_partner
  companies_count
  company_id
  company_ids
  device_ids
  email
  groups_count
  groups_id
  log_ids
  login
  login_date
  name
  new_password
  partner_id
  password
  res_users_settings_id
  res_users_settings_ids
  rules_count
  share
  signature
  tz_offset
  action_get()
  action_revoke_all_devices()
  action_show_accesses()
  action_show_groups()
  action_show_rules()
  authenticate(db, credential, user_agent_env)
  change_password(old_passwd, new_passwd)
  check(db, uid, passwd)
  check_field_access_rights(operation, field_names)
  context_get()
  copy_data(default)
  create(vals_list)
  get_company_currency_id()
  has_group(group_ext_id: str) -> bool
  has_groups(group_spec: str) -> bool
  init()
  name_search(name, args, operator, limit)
  on_change_login()
  onchange(values, field_names, fields_spec)
  onchange_parent_id()
  preference_change_password()
  preference_save()
  read(fields, load)
  toggle_active()
  write(values)
}
class "Users" as odoo_src.odoo.addons.auth_totp.models.res_users.Users {
  SELF_READABLE_FIELDS
  totp_enabled
  totp_secret
  totp_trusted_device_ids
  action_totp_disable()
  action_totp_enable_wizard()
  change_password(old_passwd, new_passwd)
  init()
  revoke_all_devices()
}
class "UsersImplied" as odoo_src.odoo.addons.base.models.res_users.UsersImplied {
  create(vals_list)
  write(values)
}
class "UsersPasskey" as odoo_src.odoo.addons.auth_passkey.models.res_users.UsersPasskey {
  SELF_READABLE_FIELDS
  auth_passkey_key_ids
  action_create_passkey()
}
class "UsersView" as odoo_src.odoo.addons.base.models.res_users.UsersView {
  user_group_warning
  create(vals_list)
  default_get(fields)
  fields_get(allfields, attributes)
  new(values, origin, ref)
  onchange(values, field_names, fields_spec)
  read(fields, load)
  write(values)
}
class "UtmCampaign" as odoo_src.odoo.addons.link_tracker.models.utm.UtmCampaign {
  click_count
}
class "UtmCampaign" as odoo_src.odoo.addons.mass_mailing_crm_sms.models.utm.UtmCampaign {
  ab_testing_sms_winner_selection
}
class "UtmCampaign" as odoo_src.odoo.addons.hr_recruitment.models.utm_campaign.UtmCampaign {
}
class "UtmCampaign" as odoo_src.odoo.addons.crm.models.utm.UtmCampaign {
  crm_lead_count
  use_leads
  action_redirect_to_leads_opportunities()
}
class "UtmCampaign" as odoo_src.odoo.addons.mass_mailing_sale.models.utm.UtmCampaign {
  ab_testing_winner_selection
}
class "UtmCampaign" as odoo_src.odoo.addons.mass_mailing.models.utm_campaign.UtmCampaign {
  ab_testing_completed
  ab_testing_mailings_count
  ab_testing_schedule_datetime
  ab_testing_winner_mailing_id
  ab_testing_winner_selection
  bounced_ratio
  is_mailing_campaign_activated
  mailing_mail_count
  mailing_mail_ids
  opened_ratio
  received_ratio
  replied_ratio
}
class "UtmCampaign" as odoo_src.odoo.addons.mass_mailing_sms.models.utm.UtmCampaign {
  ab_testing_mailings_sms_count
  ab_testing_sms_winner_selection
  mailing_sms_count
  mailing_sms_ids
  action_create_mass_sms()
  action_redirect_to_mailing_sms()
}
class "UtmCampaign" as odoo_src.odoo.addons.mass_mailing_sale_sms.models.utm.UtmCampaign {
  ab_testing_sms_winner_selection
}
class "UtmCampaign" as odoo_src.odoo.addons.mass_mailing_crm.models.utm.UtmCampaign {
  ab_testing_winner_selection
}
class "UtmMedium" as odoo_src.odoo.addons.mass_mailing.models.utm_medium.UtmMedium {
}
class "UtmMedium" as odoo_src.odoo.addons.mass_mailing_sms.models.utm.UtmMedium {
  SELF_REQUIRED_UTM_MEDIUMS_REF
}
class "UtmSource" as odoo_src.odoo.addons.hr_recruitment.models.utm_source.UtmSource {
}
class "UtmSource" as odoo_src.odoo.addons.mass_mailing.models.utm_source.UtmSource {
}
class "UtmSource" as odoo_src.odoo.addons.marketing_card.models.utm_source.UtmSource {
}
class "ValidateAccountMove" as odoo_src.odoo.addons.account.wizard.account_validate_account_move.ValidateAccountMove {
  abnormal_amount_partner_ids
  abnormal_date_partner_ids
  display_force_post
  force_post
  ignore_abnormal_amount
  ignore_abnormal_date
  is_entries
  move_ids
  default_get(fields_list)
  validate_move()
}
class "View" as odoo_src.odoo.addons.mail.models.ir_ui_view.View {
  type
}
class "View" as odoo_src.odoo.addons.base.models.ir_ui_view.View {
  active
  arch
  arch_base
  arch_db
  arch_fs
  arch_prev
  arch_updated
  groups_id
  inherit_children_ids
  inherit_id
  key
  mode
  model
  model_data_id
  model_id
  name
  priority
  type
  warning_info
  xml_id
  apply_inheritance_specs(source, specs_tree, pre_locate)
  copy_data(default)
  create(vals_list)
  default_view(model, view_type)
  distribute_branding(e, branding, parent_xpath, index_map)
  get_combined_arch()
  inherit_branding(specs_tree)
  is_node_branded(node)
  locate_node(arch, spec)
  postprocess_and_fields(node, model)
  render_public_asset(template, values)
  reset_arch(mode)
  unlink()
  write(vals)
}
class "ViewCase" as odoo_src.odoo.addons.base.tests.test_views.ViewCase {
  View
  assertInvalid(arch, expected_message, name, inherit_id, model)
  assertValid(arch, name, inherit_id, model)
  assertWarning(arch, expected_message, name, model)
  setUp()
}
class "ViewCustom" as odoo_src.odoo.addons.base.models.ir_ui_view.ViewCustom {
  arch
  ref_id
  user_id
}
class "ViewModeField" as odoo_src.odoo.addons.base.tests.test_views.ViewModeField {
  testChangeInheritOfPrimary()
  testDefaultExtensionToPrimary()
  testInheritPrimaryToExtension()
  testModeExplicit()
  testModeImplicitValue()
  testPurePrimaryToExtension()
}
class "ViewModifiers" as odoo_src.odoo.addons.base.tests.test_views.ViewModifiers {
  test_01_modifiers()
  test_03_modifier_attribute_is_boolean()
  test_04_modifier_attribute_using_context()
  test_05_modifier_attribute_priority()
  test_10_raise_for_old_attributes()
  test_11_attrs_field()
  test_12_invalid_syntax()
  test_13_attrs_states_invisible_to_modifier()
  test_14_attrs_subfield()
  test_15_attrs_subfield_with_parent()
  test_16_attrs_groups_behavior()
  test_17_attrs_groups_validation()
  test_18_test_missing_group()
}
class "ViewXMLID" as odoo_src.odoo.addons.base.tests.test_views.ViewXMLID {
  test_model_data_id()
}
class "VoiceController" as odoo_src.odoo.addons.mail.controllers.discuss.voice.VoiceController {
  voice_worklet_processor()
}
class "Warehouse" as odoo_src.odoo.addons.point_of_sale.models.stock_warehouse.Warehouse {
  pos_type_id
}
class "WebAsset" as odoo_src.odoo.addons.base.models.assetsbundle.WebAsset {
  bundle
  content
  inline : NoneType
  last_modified
  url : NoneType
  generate_error(msg)
  id()
  minify()
  name()
  stat()
  unique_descriptor()
  with_header(content)
}
class "WebClient" as odoo_src.odoo.addons.im_livechat.controllers.webclient.WebClient {
  test_external_livechat()
}
class "WebClient" as odoo_src.odoo.addons.im_livechat.controllers.cors.webclient.WebClient {
  livechat_action(guest_token)
  livechat_data(guest_token)
}
class "WebManifest" as odoo_src.odoo.addons.mail.controllers.webmanifest.WebManifest {
}
class "WebManifest" as odoo_src.odoo.addons.hr_expense.controllers.webmanifest.WebManifest {
}
class "WebauthnController" as odoo_src.odoo.addons.auth_passkey.controllers.main.WebauthnController {
  json_start_authentication()
}
class "WebclientController" as odoo_src.odoo.addons.mail.controllers.webclient.WebclientController {
  mail_action()
  mail_data()
}
class "Website" as odoo_src.odoo.addons.l10n_uy_website_sale.models.website.Website {
}
class "Website" as odoo_src.odoo.addons.l10n_ec_website_sale.models.website.Website {
}
class "Website" as odoo_src.odoo.addons.l10n_pe_website_sale.models.website.Website {
}
class "Website" as odoo_src.odoo.addons.l10n_br_website_sale.models.website.Website {
  create(vals_list)
}
class "Website" as odoo_src.odoo.addons.l10n_ar_website_sale.models.website.Website {
}
class "Websocket" as odoo_src.odoo.addons.bus.websocket.Websocket {
  CONNECTION_TIMEOUT : int
  INACTIVITY_TIMEOUT : int
  MAX_NOTIFICATION_HISTORY_SEC : int
  MESSAGE_MAX_SIZE : int
  RL_BURST : int
  RL_DELAY : float
  state : CLOSED, CLOSING, OPEN
  disconnect(code, reason)
  get_messages()
  onclose(func)
  onopen(func)
  subscribe(channels, last)
  trigger_notification_dispatching()
}
class "WebsocketCase" as odoo_src.odoo.addons.bus.tests.common.WebsocketCase {
  session
  assert_close_with_code(websocket, expected_code, expected_reason)
  setUp()
  setUpClass()
  subscribe(websocket, channels, last, wait_for_dispatch)
  tearDown()
  trigger_notification_dispatching(channels)
  wait_remaining_websocket_connections()
  websocket_connect()
}
class "WebsocketClient" as odoo_src.odoo.addons.hw_drivers.websocket_client.WebsocketClient {
  iot_channel : str
  url
  ws
  on_open(ws)
  run()
}
class "WebsocketConnectionHandler" as odoo_src.odoo.addons.bus.websocket.WebsocketConnectionHandler {
  SUPPORTED_VERSIONS : set
  open_connection(request, version)
  websocket_allowed(request)
}
class "WebsocketController" as odoo_src.odoo.addons.bus.controllers.websocket.WebsocketController {
  get_websocket_worker_bundle(v)
  health()
  on_websocket_closed()
  peek_notifications(channels, last, is_first_poll)
  update_bus_presence(inactivity_period, im_status_ids_by_model)
  websocket(version)
}
class "<color:red>WebsocketException</color>" as odoo_src.odoo.addons.bus.websocket.WebsocketException {
}
class "WebsocketRequest" as odoo_src.odoo.addons.bus.websocket.WebsocketRequest {
  db
  env
  httprequest
  registry
  session : NoneType
  ws
  cookies()
  serve_websocket_message(message)
  update_context()
  update_env(user, context, su)
}
class "WizardModelMenu" as odoo_src.odoo.addons.base.models.ir_model.WizardModelMenu {
  menu_id
  name
  menu_create()
}
class "WorkIntervals" as odoo_src.odoo.addons.hr_work_entry_contract.models.hr_work_intervals.WorkIntervals {
}
class "WorkLocation" as odoo_src.odoo.addons.hr.models.hr_work_location.WorkLocation {
  active
  address_id
  company_id
  location_number
  location_type
  name
}
class "WorkLocation" as odoo_src.odoo.addons.hr_homeworking.models.hr_work_location.WorkLocation {
}
class "WorkcenterTag" as odoo_src.odoo.addons.mrp.models.mrp_workcenter.WorkcenterTag {
  color
  name
}
class "WorldlineCommon" as odoo_src.odoo.addons.payment_worldline.tests.common.WorldlineCommon {
  setUpClass()
}
class "WorldlineController" as odoo_src.odoo.addons.payment_worldline.controllers.main.WorldlineController {
  worldline_return_from_checkout()
  worldline_webhook()
}
class "WorldlineTest" as odoo_src.odoo.addons.payment_worldline.tests.test_worldline.WorldlineTest {
  test_accept_notification_with_valid_signature()
  test_failed_webhook_notification_set_tx_as_cancel()
  test_failed_webhook_notification_set_tx_as_error_1()
  test_failed_webhook_notification_set_tx_as_error_2()
  test_reject_notification_with_invalid_signature()
  test_reject_notification_with_missing_signature()
  test_webhook_notification_confirms_transaction()
  test_webhook_notification_creates_token()
  test_webhook_notification_triggers_signature_check()
}
class "WriteToLogger" as odoo_src.odoo.addons.base.models.ir_mail_server.WriteToLogger {
  write(s)
}
class "XMLAsset" as odoo_src.odoo.addons.base.models.assetsbundle.XMLAsset {
  bundle_version
  generate_error(msg)
  with_header(content)
}
class "<color:red>XMLAssetError</color>" as odoo_src.odoo.addons.base.models.assetsbundle.XMLAssetError {
}
class "XenditCommon" as odoo_src.odoo.addons.payment_xendit.tests.common.XenditCommon {
  setUpClass()
}
class "XenditController" as odoo_src.odoo.addons.payment_xendit.controllers.main.XenditController {
  xendit_payment(reference, token_ref, auth_id)
  xendit_return(tx_ref, success, access_token)
  xendit_webhook()
}
class "XmlLineSerializer" as odoo_src.odoo.addons.hw_escpos.escpos.escpos.XmlLineSerializer {
  clwidth : int
  crwidth : int
  indent : int
  lbuffer : str
  left : bool
  lwidth : int
  rbuffer : str
  rwidth
  tabwidth : int
  width
  {abstract}end_entity()
  get_line()
  {abstract}linebreak()
  pre(text)
  {abstract}raw(raw)
  start_block(stylestack)
  start_inline(stylestack)
  start_right()
  {abstract}style(stylestack)
  text(text)
}
class "XmlSerializer" as odoo_src.odoo.addons.hw_escpos.escpos.escpos.XmlSerializer {
  dirty : bool
  escpos
  stack : list
  end_entity()
  linebreak()
  pre(text)
  raw(raw)
  start_block(stylestack)
  start_inline(stylestack)
  style(stylestack)
  text(text)
}
class "_BlobSharedAccessHelper" as odoo_src.odoo.addons.cloud_storage_azure.utils.cloud_storage_azure_utils._BlobSharedAccessHelper {
  query_dict : dict
  add_base(permission, expiry, start, ip, protocol, x_ms_version)
  add_id(policy_id)
  add_override_response_headers(cache_control, content_disposition, content_encoding, content_language, content_type)
  add_resource(resource)
  add_resource_signature(account_name, account_key, path, user_delegation_key)
  get_token()
  get_value_to_append(query)
}
class "_FakeSMTP" as odoo_src.odoo.addons.base.tests.test_ir_mail_server._FakeSMTP {
  from_filter : str
  messages : list
  send_message(message, smtp_from, smtp_to_list, mail_options, rcpt_options)
  sendmail(smtp_from, smtp_to_list, message_str, mail_options, rcpt_options)
}
class "_URLTuple" as odoo_src.odoo._monkeypatches.werkzeug_urls._URLTuple {
  fragment : str
  netloc : str
  path : str
  query : str
  scheme : str
}
class "account_journal" as odoo_src.odoo.addons.account.models.account_journal_dashboard.account_journal {
  color
  current_statement_balance
  entries_count
  has_entries
  has_posted_entries
  has_sequence_holes
  has_statement_lines
  has_unhashed_entries
  json_activity_data
  kanban_dashboard
  kanban_dashboard_graph
  last_statement_id
  show_on_dashboard
  action_create_new()
  action_create_vendor_bill()
  create_bank_statement()
  create_customer_payment()
  create_supplier_payment()
  open_action()
  open_action_with_context()
  open_bank_difference_action()
  open_payments_action(payment_type, mode)
  show_sequence_holes()
  show_unhashed_entries()
  to_check_ids()
}
class "goal_manual_wizard" as odoo_src.odoo.addons.gamification.wizard.update_goal.goal_manual_wizard {
  current
  goal_id
  action_update_current()
}
class "grant_badge_wizard" as odoo_src.odoo.addons.gamification.wizard.grant_badge.grant_badge_wizard {
  badge_id
  comment
  user_id
  action_grant_badge()
}
class "ir_cron" as odoo_src.odoo.addons.base.models.ir_cron.ir_cron {
  active
  cron_name
  failure_count
  first_failure_date
  interval_number
  interval_type
  ir_actions_server_id
  lastcall
  nextcall
  priority
  user_id
  create(vals_list)
  default_get(fields_list)
  method_direct_trigger()
  toggle(model, domain)
  try_write(values)
  unlink()
  write(vals)
}
class "ir_cron_progress" as odoo_src.odoo.addons.base.models.ir_cron.ir_cron_progress {
  cron_id
  deactivate
  done
  remaining
  timed_out_counter
}
class "ir_cron_trigger" as odoo_src.odoo.addons.base.models.ir_cron.ir_cron_trigger {
  call_at
  cron_id
}
class "l10nArPaymentRegisterWithholding" as odoo_src.odoo.addons.l10n_ar_withholding.wizards.l10n_ar_payment_register_withholding.l10nArPaymentRegisterWithholding {
  amount
  base_amount
  company_id
  currency_id
  name
  payment_register_id
  tax_id
  withholding_sequence_id
}
class "l10nLatamAccountPaymentCheck" as odoo_src.odoo.addons.l10n_latam_check.models.l10n_latam_check.l10nLatamAccountPaymentCheck {
  amount
  bank_id
  company_id
  currency_id
  current_journal_id
  issue_state
  issuer_vat
  name
  operation_ids
  original_journal_id
  outstanding_line_id
  partner_id
  payment_date
  payment_id
  payment_method_code
  payment_method_line_id
  action_show_journal_entry()
  action_show_reconciled_move()
  action_void()
  button_open_check_operations()
  button_open_payment()
}
class "l10nLatamCheckPaymentRegisterCheck" as odoo_src.odoo.addons.l10n_latam_check.wizards.l10n_latam_payment_register_check.l10nLatamCheckPaymentRegisterCheck {
  amount
  bank_id
  company_id
  currency_id
  issuer_vat
  name
  payment_date
  payment_register_id
}
class "pos_config" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.pos.pos_config {
  open_ui()
}
class "pos_config" as odoo_src.odoo.addons.l10n_sa_pos.models.pos_config.pos_config {
  open_ui()
}
class "pos_order" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.pos.pos_order {
  l10n_fr_hash
  l10n_fr_secure_sequence_number
  l10n_fr_string_to_hash
  pos_version
  previous_order_id
  create(vals_list)
  write(vals)
}
class "pos_session" as odoo_src.odoo.addons.l10n_fr_pos_cert.models.pos.pos_session {
  open_frontend_cb()
}
class "report_paperformat" as odoo_src.odoo.addons.base.models.report_paperformat.report_paperformat {
  css_margins
  default
  disable_shrinking
  dpi
  format
  header_line
  header_spacing
  margin_bottom
  margin_left
  margin_right
  margin_top
  name
  orientation
  page_height
  page_width
  print_page_height
  print_page_width
  report_ids
}
class "res_company" as odoo_src.odoo.addons.account_check_printing.models.res_company.res_company {
  account_check_printing_date_label
  account_check_printing_layout
  account_check_printing_margin_left
  account_check_printing_margin_right
  account_check_printing_margin_top
  account_check_printing_multi_stub
}
class "test_badge_wizard" as odoo_src.odoo.addons.gamification.tests.test_challenge.test_badge_wizard {
  test_grant_badge()
}
class "test_challenge" as odoo_src.odoo.addons.gamification.tests.test_challenge.test_challenge {
  test_00_join_challenge()
  test_10_reach_challenge()
  test_20_update_all_goals_filter()
  test_30_create_challenge_with_sum_goal()
  test_40_create_challenge_with_sum_goal()
  test_send_report_in_ranking()
}
class "test_guess_mimetype" as odoo_src.odoo.addons.base.tests.test_mimetypes.test_guess_mimetype {
  test_default_mimetype()
  test_default_mimetype_empty()
  test_mimetype_bmp()
  test_mimetype_fix_extension()
  test_mimetype_get_extension()
  test_mimetype_gif()
  test_mimetype_jpg()
  test_mimetype_octet_stream()
  test_mimetype_png()
  test_mimetype_svg()
  test_mimetype_txt()
  test_mimetype_webp()
  test_mimetype_xml()
  test_mimetype_zip()
}
class "test_res_lang" as odoo_src.odoo.addons.base.tests.test_res_lang.test_res_lang {
  test_00_intersperse()
  test_get_data()
  test_inactive_users_lang_deactivation()
  test_lang_url_code_shortening()
}
class "test_search" as odoo_src.odoo.addons.base.tests.test_search.test_search {
  patch_order(model, order)
  test_00_search_order()
  test_10_inherits_m2order()
  test_11_indirect_inherits_m2o_order()
  test_12_m2o_order_loop_self()
  test_13_m2o_order_loop_multi()
  test_20_x_active()
  test_21_search_count()
  test_22_like_folding()
}
odoo_src.odoo._monkeypatches.num2words.Num2Word_AR_Fixed --|> odoo_src.odoo._monkeypatches.num2words.Num2Word_Base
odoo_src.odoo._monkeypatches.num2words.NumberToWords_BG --|> odoo_src.odoo._monkeypatches.num2words.Num2Word_Base
odoo_src.odoo._monkeypatches.werkzeug_urls.BaseURL --|> odoo_src.odoo._monkeypatches.werkzeug_urls._URLTuple
odoo_src.odoo._monkeypatches.werkzeug_urls.BytesURL --|> odoo_src.odoo._monkeypatches.werkzeug_urls.BaseURL
odoo_src.odoo._monkeypatches.werkzeug_urls.URL --|> odoo_src.odoo._monkeypatches.werkzeug_urls.BaseURL
odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingHttpCommon --|> odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingCommon
odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingHttpCommon --|> odoo_src.odoo.addons.account.tests.common.AccountTestMockOnlineSyncCommon
odoo_src.odoo.addons.account.tests.common.TestAccountMergeCommon --|> odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingCommon
odoo_src.odoo.addons.account.tests.common.TestTaxCommon --|> odoo_src.odoo.addons.account.tests.common.AccountTestInvoicingHttpCommon
odoo_src.odoo.addons.account.tests.test_account_move_send.TestAccountMoveSend --|> odoo_src.odoo.addons.account.tests.test_account_move_send.TestAccountMoveSendCommon
odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceGaps --|> odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinCommon
odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixin --|> odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinCommon
odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinDeletion --|> odoo_src.odoo.addons.account.tests.test_sequence_mixin.TestSequenceMixinCommon
odoo_src.odoo.addons.auth_passkey.tests.test_passkey_demo.PasskeyTestTours --|> odoo_src.odoo.addons.auth_passkey.tests.test_passkey_demo.PasskeyTest
odoo_src.odoo.addons.auth_totp.tests.test_totp.TestTOTP --|> odoo_src.odoo.addons.auth_totp.tests.test_totp.TestTOTPMixin
odoo_src.odoo.addons.base.models.assetsbundle.AssetNotFound --|> odoo_src.odoo.addons.base.models.assetsbundle.AssetError
odoo_src.odoo.addons.base.models.assetsbundle.JavascriptAsset --|> odoo_src.odoo.addons.base.models.assetsbundle.WebAsset
odoo_src.odoo.addons.base.models.assetsbundle.LessStylesheetAsset --|> odoo_src.odoo.addons.base.models.assetsbundle.PreprocessedCSS
odoo_src.odoo.addons.base.models.assetsbundle.PreprocessedCSS --|> odoo_src.odoo.addons.base.models.assetsbundle.StylesheetAsset
odoo_src.odoo.addons.base.models.assetsbundle.SassStylesheetAsset --|> odoo_src.odoo.addons.base.models.assetsbundle.PreprocessedCSS
odoo_src.odoo.addons.base.models.assetsbundle.ScssStylesheetAsset --|> odoo_src.odoo.addons.base.models.assetsbundle.PreprocessedCSS
odoo_src.odoo.addons.base.models.assetsbundle.StylesheetAsset --|> odoo_src.odoo.addons.base.models.assetsbundle.WebAsset
odoo_src.odoo.addons.base.models.assetsbundle.XMLAsset --|> odoo_src.odoo.addons.base.models.assetsbundle.WebAsset
odoo_src.odoo.addons.base.models.ir_qweb.render.MockIrQWeb --|> odoo_src.odoo.addons.base.models.ir_qweb.IrQWeb
odoo_src.odoo.addons.base.models.res_config.ResConfigSettings --|> odoo_src.odoo.addons.base.models.res_config.ResConfigModuleInstallationMixin
odoo_src.odoo.addons.base.tests.common.BaseUsersCommon --|> odoo_src.odoo.addons.base.tests.common.BaseCommon
odoo_src.odoo.addons.base.tests.test_expression.TestAutoJoin --|> odoo_src.odoo.addons.base.tests.test_expression.TransactionExpressionCase
odoo_src.odoo.addons.base.tests.test_expression.TestExpression --|> odoo_src.odoo.addons.base.tests.test_expression.TransactionExpressionCase
odoo_src.odoo.addons.base.tests.test_expression.TestExpression2 --|> odoo_src.odoo.addons.base.tests.test_expression.TransactionExpressionCase
odoo_src.odoo.addons.base.tests.test_format_address_mixin.TestPartnerFormatAddress --|> odoo_src.odoo.addons.base.tests.test_format_address_mixin.FormatAddressCase
odoo_src.odoo.addons.base.tests.test_http_case.TestChromeBrowserOddDimensions --|> odoo_src.odoo.addons.base.tests.test_http_case.TestChromeBrowser
odoo_src.odoo.addons.base.tests.test_ir_actions.TestCustomFields --|> odoo_src.odoo.addons.base.tests.test_ir_actions.TestCommonCustomFields
odoo_src.odoo.addons.base.tests.test_ir_actions.TestCustomFieldsPostInstall --|> odoo_src.odoo.addons.base.tests.test_ir_actions.TestCommonCustomFields
odoo_src.odoo.addons.base.tests.test_ir_actions.TestServerActions --|> odoo_src.odoo.addons.base.tests.test_ir_actions.TestServerActionsBase
odoo_src.odoo.addons.base.tests.test_ir_cron.TestIrCron --|> odoo_src.odoo.addons.base.tests.test_ir_cron.CronMixinCase
odoo_src.odoo.addons.base.tests.test_ir_filters.TestEmbeddedFilters --|> odoo_src.odoo.addons.base.tests.test_ir_filters.FiltersCase
odoo_src.odoo.addons.base.tests.test_ir_filters.TestGetFilters --|> odoo_src.odoo.addons.base.tests.test_ir_filters.FiltersCase
odoo_src.odoo.addons.base.tests.test_ir_filters.TestGlobalDefaults --|> odoo_src.odoo.addons.base.tests.test_ir_filters.FiltersCase
odoo_src.odoo.addons.base.tests.test_ir_filters.TestOwnDefaults --|> odoo_src.odoo.addons.base.tests.test_ir_filters.FiltersCase
odoo_src.odoo.addons.base.tests.test_ir_mail_server_smtpd.TestIrMailServerSMTPD --|> odoo_src.odoo.addons.base.tests.common.TransactionCaseWithUserDemo
odoo_src.odoo.addons.base.tests.test_reports.TestReportsRendering --|> odoo_src.odoo.addons.base.tests.test_reports.TestReportsRenderingCommon
odoo_src.odoo.addons.base.tests.test_reports.TestReportsRenderingLimitations --|> odoo_src.odoo.addons.base.tests.test_reports.TestReportsRenderingCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetry --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetry1Disable --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetry2Disable --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommitedCursor --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommitedCursorError --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryFailures --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryRollbackedCursor --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryRollbackedCursorError --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetrySubtest --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_retry.TestRetrySubtestFailures --|> odoo_src.odoo.addons.base.tests.test_test_retry.TestRetryCommon
odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLogging --|> odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingCommon
odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingSetup --|> odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingCommon
odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingTeardown --|> odoo_src.odoo.addons.base.tests.test_test_suite.TestRunnerLoggingCommon
odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassC --|> odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassA
odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassD --|> odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_inheritance.FakeClassA
odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_parental_advisory.FakeClassB --|> odoo_src.odoo.addons.base.tests.test_tests_tags.TestSetTags.test_parental_advisory.FakeClassA
odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritanceMoveSpecs --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritanceSpecs --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritanceWrapSpecs --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestApplyInheritedArchs --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestDefaultView --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestNoModel --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestOptionalViews --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestQWebRender --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestTemplating --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestViewCombined --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestViewInheritance --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.TestViews --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.ViewModeField --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base.tests.test_views.ViewModifiers --|> odoo_src.odoo.addons.base.tests.test_views.ViewCase
odoo_src.odoo.addons.base_import_module.tests.test_import_module.TestImportModuleHttp --|> odoo_src.odoo.addons.base_import_module.tests.test_import_module.TestImportModule
odoo_src.odoo.addons.base_vat.tests.test_validate_ruc.TestStructureVIES --|> odoo_src.odoo.addons.base_vat.tests.test_validate_ruc.TestStructure
odoo_src.odoo.addons.bus.tests.test_ir_websocket.TestIrWebsocket --|> odoo_src.odoo.addons.bus.tests.common.WebsocketCase
odoo_src.odoo.addons.bus.tests.test_websocket_caryall.TestWebsocketCaryall --|> odoo_src.odoo.addons.bus.tests.common.WebsocketCase
odoo_src.odoo.addons.bus.tests.test_websocket_rate_limiting.TestWebsocketRateLimiting --|> odoo_src.odoo.addons.bus.tests.common.WebsocketCase
odoo_src.odoo.addons.bus.websocket.CloseFrame --|> odoo_src.odoo.addons.bus.websocket.Frame
odoo_src.odoo.addons.bus.websocket.ConnectionClosed --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.bus.websocket.InvalidCloseCodeException --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.bus.websocket.InvalidDatabaseException --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.bus.websocket.InvalidStateException --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.bus.websocket.InvalidWebsocketRequest --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.bus.websocket.PayloadTooLargeException --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.bus.websocket.ProtocolError --|> odoo_src.odoo.addons.bus.websocket.WebsocketException
odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestCreateRecurrentEvents --|> odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestRecurrentEvents
odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateMonthlyByDate --|> odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestRecurrentEvents
odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateMonthlyByDay --|> odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestRecurrentEvents
odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateMultiDayWeeklyRecurrentEvents --|> odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestRecurrentEvents
odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestUpdateRecurrentEvents --|> odoo_src.odoo.addons.calendar.tests.test_event_recurrence.TestRecurrentEvents
odoo_src.odoo.addons.cloud_storage_azure.tests.test_cloud_storage_azure.TestCloudStorageAzure --|> odoo_src.odoo.addons.cloud_storage_azure.tests.test_cloud_storage_azure.TestCloudStorageAzureCommon
odoo_src.odoo.addons.cloud_storage_google.tests.test_cloud_storage_google.TestCloudStorageGoogle --|> odoo_src.odoo.addons.cloud_storage_google.tests.test_cloud_storage_google.TestCloudStorageGoogleCommon
odoo_src.odoo.addons.crm.tests.common.TestLeadConvertCommon --|> odoo_src.odoo.addons.crm.tests.common.TestCrmCommon
odoo_src.odoo.addons.crm.tests.common.TestLeadConvertMassCommon --|> odoo_src.odoo.addons.crm.tests.common.TestLeadConvertCommon
odoo_src.odoo.addons.crm.tests.test_crm_lead_assignment.TestLeadAssign --|> odoo_src.odoo.addons.crm.tests.test_crm_lead_assignment.TestLeadAssignCommon
odoo_src.odoo.addons.crm.tests.test_crm_lead_merge.TestLeadMerge --|> odoo_src.odoo.addons.crm.tests.test_crm_lead_merge.TestLeadMergeCommon
odoo_src.odoo.addons.crm_mail_plugin.controllers.crm_client.CrmClient --|> odoo_src.odoo.addons.crm_mail_plugin.controllers.mail_plugin.MailPluginController
odoo_src.odoo.addons.event.tests.test_event_internals.TestEventData --|> odoo_src.odoo.addons.event.tests.test_event_internals.TestEventInternalsCommon
odoo_src.odoo.addons.event.tests.test_event_internals.TestEventRegistrationData --|> odoo_src.odoo.addons.event.tests.test_event_internals.TestEventInternalsCommon
odoo_src.odoo.addons.event.tests.test_event_internals.TestEventTicketData --|> odoo_src.odoo.addons.event.tests.test_event_internals.TestEventInternalsCommon
odoo_src.odoo.addons.event.tests.test_event_internals.TestEventTypeData --|> odoo_src.odoo.addons.event.tests.test_event_internals.TestEventInternalsCommon
odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSale --|> odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSaleWData
odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSaleInvoice --|> odoo_src.odoo.addons.event_booth_sale.tests.test_event_booth_sale.TestEventBoothSaleWData
odoo_src.odoo.addons.event_crm.tests.common.TestEventCrmCommon --|> odoo_src.odoo.addons.event_crm.tests.common.EventCrmCase
odoo_src.odoo.addons.gamification.tests.test_challenge.test_badge_wizard --|> odoo_src.odoo.addons.gamification.tests.test_challenge.TestGamificationCommon
odoo_src.odoo.addons.gamification.tests.test_challenge.test_challenge --|> odoo_src.odoo.addons.gamification.tests.test_challenge.TestGamificationCommon
odoo_src.odoo.addons.google_calendar.tests.test_sync_odoo2google.TestSyncOdoo2GoogleMail --|> odoo_src.odoo.addons.google_calendar.tests.test_token_access.TestTokenAccess
odoo_src.odoo.addons.hr.tests.test_mail_activity_plan.TestActivitySchedule --|> odoo_src.odoo.addons.hr.tests.test_mail_activity_plan.ActivityScheduleHRCase
odoo_src.odoo.addons.hr.tests.test_resource.TestResource --|> odoo_src.odoo.addons.hr.tests.common.TestHrCommon
odoo_src.odoo.addons.hr_contract.tests.test_employee.TestHrEmployee --|> odoo_src.odoo.addons.hr_contract.tests.common.TestContractCommon
odoo_src.odoo.addons.hr_contract.tests.test_resource.TestResource --|> odoo_src.odoo.addons.hr_contract.tests.common.TestContractCommon
odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsCreate --|> odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestHrHolidaysAccessRightsCommon
odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsRead --|> odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestHrHolidaysAccessRightsCommon
odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsUnlink --|> odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestHrHolidaysAccessRightsCommon
odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAccessRightsWrite --|> odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestHrHolidaysAccessRightsCommon
odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestAcessRightsStates --|> odoo_src.odoo.addons.hr_holidays.tests.test_access_rights.TestHrHolidaysAccessRightsCommon
odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsEmployeeManager --|> odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAllocationRights
odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsHolidayManager --|> odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAllocationRights
odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsHolidayUser --|> odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAllocationRights
odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAccessRightsSimpleUser --|> odoo_src.odoo.addons.hr_holidays.tests.test_allocation_access_rights.TestAllocationRights
odoo_src.odoo.addons.hr_holidays.tests.test_hr_holidays_cancel_leave.TestHrHolidaysCancelLeave --|> odoo_src.odoo.addons.hr_holidays.tests.common.TestHrHolidaysCommon
odoo_src.odoo.addons.hr_timesheet.tests.test_timesheet.TestTimesheet --|> odoo_src.odoo.addons.hr_timesheet.tests.test_timesheet.TestCommonTimesheet
odoo_src.odoo.addons.hr_work_entry_contract.tests.test_global_time_off.TestGlobalTimeOff --|> odoo_src.odoo.addons.hr_work_entry_contract.tests.common.TestWorkEntryBase
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.BarcodeCodeError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.BarcodeSizeError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.BarcodeTypeError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.CashDrawerError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.HandleDeviceError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.ImageSizeError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.NoDeviceError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.NoStatusError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.TextError --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.exceptions.TicketNotPrinted --|> odoo_src.odoo.addons.hw_escpos.escpos.exceptions.Error
odoo_src.odoo.addons.hw_escpos.escpos.printer.Network --|> odoo_src.odoo.addons.hw_escpos.escpos.escpos.Escpos
odoo_src.odoo.addons.hw_escpos.escpos.printer.Serial --|> odoo_src.odoo.addons.hw_escpos.escpos.escpos.Escpos
odoo_src.odoo.addons.hw_escpos.escpos.printer.Usb --|> odoo_src.odoo.addons.hw_escpos.escpos.escpos.Escpos
odoo_src.odoo.addons.l10n_ar.tests.test_manual.TestManual --|> odoo_src.odoo.addons.l10n_ar.tests.common.TestAr
odoo_src.odoo.addons.l10n_eg_edi_eta.tests.test_edi_json.TestEdiJson --|> odoo_src.odoo.addons.l10n_eg_edi_eta.tests.common.TestEGEdiCommon
odoo_src.odoo.addons.l10n_es_edi_sii.tests.test_edi_web_services.TestEdiWebServices --|> odoo_src.odoo.addons.l10n_es_edi_sii.tests.common.TestEsEdiCommon
odoo_src.odoo.addons.l10n_es_edi_sii.tests.test_edi_xml.TestEdiXmls --|> odoo_src.odoo.addons.l10n_es_edi_sii.tests.common.TestEsEdiCommon
odoo_src.odoo.addons.l10n_es_edi_sii.tests.test_resequence.TestResequenceSII --|> odoo_src.odoo.addons.l10n_es_edi_sii.tests.common.TestEsEdiCommon
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonBizkaia --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommon
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonGipuzkoa --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommon
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_send_bill_bizkaia.TestSendBillEdiBizkaia --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonBizkaia
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_send_invoice.TestSendAndPrintEdiGipuzkoa --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonGipuzkoa
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_send_invoice_bizkaia.TestSendAndPrintEdiBizkaia --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonBizkaia
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_tbai_user_errors.TestTbaiUserErrors --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonGipuzkoa
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_web_services.TestEdiTbaiWebServices --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommon
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_edi_xml.TestEdiTbaiXmls --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommon
odoo_src.odoo.addons.l10n_es_edi_tbai.tests.test_move_reversal.TestSendAndPrintEdiGipuzkoa --|> odoo_src.odoo.addons.l10n_es_edi_tbai.tests.common.TestEsEdiTbaiCommonGipuzkoa
odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.test_document.TestL10nEsEdiVerifactuDocument --|> odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.common.TestL10nEsEdiVerifactuCommon
odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.test_json.TestL10nEsEdiVerifactuJson --|> odoo_src.odoo.addons.l10n_es_edi_verifactu.tests.common.TestL10nEsEdiVerifactuCommon
odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.tests.test_pos_order.TestL10nEsEdiVerifactuPosOrder --|> odoo_src.odoo.addons.l10n_es_edi_verifactu_pos.tests.common.TestL10nEsEdiVerifactuPosCommon
odoo_src.odoo.addons.l10n_id_efaktur.tests.test_l10n_id_efaktur_download.TestIndonesianEfakturDownload --|> odoo_src.odoo.addons.l10n_id_efaktur.tests.test_l10n_id_efaktur.TestIndonesianEfaktur
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.ObjectIdentifierNode --|> odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.PrimitiveNode
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.OctetStringNode --|> odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.PrimitiveNode
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.PrimitiveNode --|> odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Asn1Node
odoo_src.odoo.addons.l10n_sa_edi.tests.test_account_move.TestSAEdiAccountMove --|> odoo_src.odoo.addons.l10n_sa_edi.tests.common.TestSaEdiCommon
odoo_src.odoo.addons.l10n_sa_edi.tests.test_edi_zatca.TestEdiZatca --|> odoo_src.odoo.addons.l10n_sa_edi.tests.common.TestSaEdiCommon
odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUIBR --|> odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.common.TestPosQrCommon
odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUiCH --|> odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.common.TestPosQrCommon
odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUiHK --|> odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.common.TestPosQrCommon
odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.test_pos_qr_payment.TestUiSEPA --|> odoo_src.odoo.addons.l10n_test_pos_qr_payment.tests.common.TestPosQrCommon
odoo_src.odoo.addons.mail.tests.common.MailCase --|> odoo_src.odoo.addons.mail.tests.common.MockEmail
odoo_src.odoo.addons.mail.tests.common.MailCommon --|> odoo_src.odoo.addons.mail.tests.common.MailCase
odoo_src.odoo.addons.mail.tests.discuss.test_discuss_binary_controller.TestDiscussBinaryController --|> odoo_src.odoo.addons.mail.tests.discuss.test_discuss_binary_controller.TestDiscussBinaryControllerCommon
odoo_src.odoo.addons.mail.tests.test_attachment_controller.TestAttachmentController --|> odoo_src.odoo.addons.mail.tests.test_attachment_controller.TestAttachmentControllerCommon
odoo_src.odoo.addons.mail.tests.test_binary_controller.TestBinaryController --|> odoo_src.odoo.addons.mail.tests.test_binary_controller.TestBinaryControllerCommon
odoo_src.odoo.addons.mail.tests.test_mail_activity.TestMailActivityIntegrity --|> odoo_src.odoo.addons.mail.tests.test_mail_activity.ActivityScheduleCase
odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposerForm --|> odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposer
odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposerRendering --|> odoo_src.odoo.addons.mail.tests.test_mail_composer.TestMailComposer
odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRender --|> odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRenderCommon
odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRenderSecurity --|> odoo_src.odoo.addons.mail.tests.test_mail_render.TestMailRenderCommon
odoo_src.odoo.addons.mail.tests.test_message_reaction_controller.TestMessageReactionController --|> odoo_src.odoo.addons.mail.tests.test_message_reaction_controller.TestMessageReactionControllerCommon
odoo_src.odoo.addons.mail.tests.test_message_update_controller.TestMessageUpdateController --|> odoo_src.odoo.addons.mail.tests.test_message_update_controller.TestMessageUpdateControllerCommon
odoo_src.odoo.addons.mail.tests.test_thread_controller.TestThreadController --|> odoo_src.odoo.addons.mail.tests.test_thread_controller.TestThreadControllerCommon
odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipment --|> odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipmentCommon
odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipmentPostInstall --|> odoo_src.odoo.addons.maintenance.tests.test_maintenance.TestEquipmentCommon
odoo_src.odoo.addons.marketing_card.tests.common.MarketingCardCommon --|> odoo_src.odoo.addons.marketing_card.tests.common.MockImageRender
odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardMail --|> odoo_src.odoo.addons.marketing_card.tests.common.MarketingCardCommon
odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardRender --|> odoo_src.odoo.addons.marketing_card.tests.common.MarketingCardCommon
odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardRouting --|> odoo_src.odoo.addons.marketing_card.tests.common.MarketingCardCommon
odoo_src.odoo.addons.marketing_card.tests.test_campaign.TestMarketingCardSecurity --|> odoo_src.odoo.addons.marketing_card.tests.common.MarketingCardCommon
odoo_src.odoo.addons.mass_mailing.tests.common.MassMailCommon --|> odoo_src.odoo.addons.mass_mailing.tests.common.MassMailCase
odoo_src.odoo.addons.mass_mailing.tests.test_mailing_ab_testing.TestMailingABTesting --|> odoo_src.odoo.addons.mass_mailing.tests.test_mailing_ab_testing.TestMailingABTestingCommon
odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingControllers --|> odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingControllersCommon
odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingTracking --|> odoo_src.odoo.addons.mass_mailing.tests.test_mailing_controllers.TestMailingControllersCommon
odoo_src.odoo.addons.mass_mailing_sms.tests.common.MassSMSCommon --|> odoo_src.odoo.addons.mass_mailing_sms.tests.common.MassSMSCase
odoo_src.odoo.addons.mrp.tests.test_consume_component.TestConsumeComponent --|> odoo_src.odoo.addons.mrp.tests.test_consume_component.TestConsumeComponentCommon
odoo_src.odoo.addons.mrp.tests.test_stock.TestKitPicking --|> odoo_src.odoo.addons.mrp.tests.common.TestMrpCommon
odoo_src.odoo.addons.mrp.tests.test_stock.TestWarehouseMrp --|> odoo_src.odoo.addons.mrp.tests.common.TestMrpCommon
odoo_src.odoo.addons.mrp.tests.test_workcenter.TestWorkcenterOverview --|> odoo_src.odoo.addons.mrp.tests.common.TestMrpCommon
odoo_src.odoo.addons.mrp_account.tests.test_analytic_account.TestAnalyticAccount --|> odoo_src.odoo.addons.mrp_account.tests.test_analytic_account.TestMrpAnalyticAccount
odoo_src.odoo.addons.mrp_account.tests.test_bom_price.TestBomPrice --|> odoo_src.odoo.addons.mrp_account.tests.test_bom_price.TestBomPriceCommon
odoo_src.odoo.addons.mrp_account.tests.test_valuation_layers.TestMrpValuationStandard --|> odoo_src.odoo.addons.mrp_account.tests.test_valuation_layers.TestMrpValuationCommon
odoo_src.odoo.addons.payment_authorize.tests.test_authorize.AuthorizeTest --|> odoo_src.odoo.addons.payment_authorize.tests.common.AuthorizeCommon
odoo_src.odoo.addons.base.models.ir_qweb.render.MockPool --* odoo_src.odoo.addons.base.models.ir_qweb.render.MockIrQWeb : pool
odoo_src.odoo.addons.base.models.res_bank.ResPartnerBank --* odoo_src.odoo.addons.base.models.res_partner.Partner : bank_ids
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.Partner : parent_id
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.Partner : child_ids
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.Partner : same_vat_partner_id
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.Partner : same_company_registry_partner_id
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.Partner : commercial_partner_id
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.Partner : self
odoo_src.odoo.addons.base.models.res_partner.Partner --* odoo_src.odoo.addons.base.models.res_partner.PartnerCategory : partner_ids
odoo_src.odoo.addons.base.models.res_partner.PartnerCategory --* odoo_src.odoo.addons.base.models.res_partner.Partner : category_id
odoo_src.odoo.addons.base.models.res_partner.PartnerCategory --* odoo_src.odoo.addons.base.models.res_partner.PartnerCategory : parent_id
odoo_src.odoo.addons.base.models.res_partner.PartnerCategory --* odoo_src.odoo.addons.base.models.res_partner.PartnerCategory : child_ids
odoo_src.odoo.addons.base.models.res_partner.PartnerTitle --* odoo_src.odoo.addons.base.models.res_partner.Partner : title
odoo_src.odoo.addons.base.models.res_partner.ResPartnerIndustry --* odoo_src.odoo.addons.base.models.res_partner.Partner : industry_id
odoo_src.odoo.addons.base.models.res_users.UsersView --* odoo_src.odoo.addons.base.models.res_partner.Partner : user_id
odoo_src.odoo.addons.base.models.res_users.UsersView --* odoo_src.odoo.addons.base.models.res_partner.Partner : user_ids
odoo_src.odoo.addons.base.tests.common.MockSmtplibCase.mock_smtplib_connection.TestingSMTPSession --* odoo_src.odoo.addons.base.tests.common.MockSmtplibCase : testing_smtp_session
odoo_src.odoo.addons.cloud_storage_azure.utils.cloud_storage_azure_utils.UserDelegationKey --* odoo_src.odoo.addons.cloud_storage_azure.tests.test_cloud_storage_azure.TestCloudStorageAzureCommon : DUMMY_USER_DELEGATION_KEY
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Asn1Node --* odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Reader : root
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Asn1Node --* odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Reader : current_node
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Asn1Node --* odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Reader : parent_node
odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Asn1Node --* odoo_src.odoo.addons.l10n_it_edi.tools.remove_signature.Reader : last_open_node
@enduml
