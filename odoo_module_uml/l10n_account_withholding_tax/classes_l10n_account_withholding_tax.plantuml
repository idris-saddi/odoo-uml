@startuml classes_l10n_account_withholding_tax
set namespaceSeparator none
class "AccountPayment" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_payment.AccountPayment {
  display_withholding
  outstanding_account_id
  should_withhold_tax
  withholding_hide_tax_base_account
  withholding_line_ids
  withholding_payment_account_id
}
class "AccountPaymentRegister" as odoo_src.odoo.addons.l10n_account_withholding_tax.wizards.account_payment_register.AccountPaymentRegister {
  display_withholding
  should_withhold_tax
  withholding_default_account_id
  withholding_hide_tax_base_account
  withholding_line_ids
  withholding_net_amount
  withholding_outstanding_account_id
  withholding_payment_account_id
}
class "AccountPaymentRegisterWithholdingLine" as odoo_src.odoo.addons.l10n_account_withholding_tax.wizards.account_payment_register_withholding_line.AccountPaymentRegisterWithholdingLine {
  payment_register_id
}
class "AccountPaymentWithholdingLine" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_payment_withholding_line.AccountPaymentWithholdingLine {
  payment_id
}
class "AccountTax" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_tax.AccountTax {
  is_withholding_tax_on_payment
  price_include_override : str
  tax_exigibility : str
  withholding_sequence_id
}
class "AccountWithholdingLine" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.account_withholding_line.AccountWithholdingLine {
  account_id
  amount
  base_amount
  comodel_company_currency_id
  comodel_currency_id
  comodel_date
  comodel_payment_type
  comodel_percentage_paid_factor
  company_id
  name
  original_base_amount
  original_tax_amount
  placeholder_type
  placeholder_value
  previous_placeholder_type
  source_base_amount
  source_base_amount_currency
  source_currency_id
  source_tax_amount
  source_tax_amount_currency
  source_tax_id
  tax_id
  type_tax_use
  withholding_sequence_id
}
class "ProductTemplate" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.product_template.ProductTemplate {
}
class "ResCompany" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.res_company.ResCompany {
  withholding_tax_base_account_id
}
class "ResConfigSettings" as odoo_src.odoo.addons.l10n_account_withholding_tax.models.res_config_settings.ResConfigSettings {
  withholding_tax_base_account_id
}
class "TestL10nAccountWithholdingTaxesAmounts" as odoo_src.odoo.addons.l10n_account_withholding_tax.tests.test_account_withholding_amounts.TestL10nAccountWithholdingTaxesAmounts {
  setUpClass()
  test_case_a()
  test_case_b()
  test_case_c()
  test_case_d()
  test_case_e()
  test_case_f()
  test_case_g()
  test_case_h()
  test_case_i()
  test_case_j()
  test_case_l()
  test_case_m()
  test_case_n()
  test_invoice_total_unaffected()
}
class "TestL10nAccountWithholdingTaxesFlows" as odoo_src.odoo.addons.l10n_account_withholding_tax.tests.test_account_withholding_flows.TestL10nAccountWithholdingTaxesFlows {
  setUpClass()
  test_cannot_register_negative_payment()
  test_compute_outstanding_account_id()
  test_display_withholding()
  test_manual_adjustments()
  test_no_withholding_tax_invoice_but_included_one_on_payment()
  test_outstanding_account_marked_as_reconcilable()
  test_partner_is_set_on_lines()
  test_payment_synchronize_to_moves()
  test_placeholder_computation()
  test_register_payment__with_installments()
  test_tax_repartition_on_refund()
  test_withholding_analytic_distribution()
  test_withholding_analytic_distribution_two_invoice_line()
  test_withholding_line_base_amount()
  test_withholding_not_payment_account_on_method_line()
  test_withholding_tax_amounts_manipulation()
  test_withholding_tax_before_payment()
  test_withholding_tax_default_tax_on_product()
  test_withholding_tax_grids()
  test_withholding_tax_repartition_line()
}
@enduml
