@startuml classes_iap
set namespaceSeparator none
class "<color:red>IAPServerError</color>" as odoo_src.odoo.addons.iap.tools.iap_tools.IAPServerError {
}
class "IapAccount" as odoo_src.odoo.addons.iap.models.iap_account.IapAccount {
  account_token
  balance
  company_ids
  description
  name
  service_id
  service_locked
  service_name
  state
  warning_threshold
  warning_user_ids
  action_buy_credits()
  create(vals_list)
  get(service_name, force_create)
  get_account_id(service_name)
  get_config_account_url()
  get_credits(service_name)
  get_credits_url(service_name, base_url, credit, trial, account_token)
  is_running_test_suite()
  validate_warning_alerts()
  web_read()
  web_save()
  write(values)
}
class "IapEnrichAPI" as odoo_src.odoo.addons.iap.models.iap_enrich_api.IapEnrichAPI {
}
class "IapService" as odoo_src.odoo.addons.iap.models.iap_service.IapService {
  description
  integer_balance
  name
  technical_name
  unit_name
}
class "IapTransaction" as odoo_src.odoo.addons.iap.tools.iap_tools.IapTransaction {
  credit : NoneType
}
class "<color:red>InsufficientCreditError</color>" as odoo_src.odoo.addons.iap.tools.iap_tools.InsufficientCreditError {
  args : tuple
  data
}
class "MockIAPEnrich" as odoo_src.odoo.addons.iap.tests.common.MockIAPEnrich {
  mockIAPEnrichGateway(default_data, email_data, sim_error, failing_emails)
  setUpClass()
}
class "TestIAP" as odoo_src.odoo.addons.iap.tests.test_iap.TestIAP {
  test_get_account()
}
@enduml
